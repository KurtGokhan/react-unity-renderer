//
// Types in assemblies: UnityEngine.CoreModule, UnityEngine.VideoModule, UnityEngine.AudioModule, UnityEngine.UIModule, UnityEngine.UI, UnityEngine.TextRenderingModule, UnityEngine.InputLegacyModule, UnityEngine.AnimationModule, UnityEngine.IMGUIModule, UnityEngine.AssetBundleModule, UnityEngine.UnityAnalyticsModule, UnityEngine.UIElementsModule, UnityEngine.AIModule
// Generated 7.03.2021 22:04:22
//
import { System } from './system';

export namespace Unity {
  export namespace Collections {
    export enum Allocator {
      Invalid = 0,
      None = 1,
      Temp = 2,
      TempJob = 3,
      Persistent = 4,
      AudioKernel = 5,
    }
    export enum NativeLeakDetectionMode {
      EnabledWithStackTrace = 3,
      Enabled = 2,
      Disabled = 1,
    }
    export declare class NativeLeakDetection {
      static Mode: Unity.Collections.NativeLeakDetectionMode;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum NativeArrayOptions {
      UninitializedMemory = 0,
      ClearMemory = 1,
    }
    export declare class NativeArray<T = any> {
      constructor(length: number, allocator: Unity.Collections.Allocator, options?: Unity.Collections.NativeArrayOptions);
      constructor(array: T[], allocator: Unity.Collections.Allocator);
      constructor(array: Unity.Collections.NativeArray<T>, allocator: Unity.Collections.Allocator);
      Length: number;
      IsCreated: boolean;
      Dispose: (() => void) | ((inputDeps: Unity.Jobs.JobHandle) => Unity.Jobs.JobHandle);
      CopyFrom: ((array: T[]) => void) | ((array: Unity.Collections.NativeArray<T>) => void);
      CopyTo: ((array: T[]) => void) | ((array: Unity.Collections.NativeArray<T>) => void);
      ToArray: (() => T[]);
      GetEnumerator: (() => Unity.Collections.NativeArray<T>);
      Equals: ((other: Unity.Collections.NativeArray<T>) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      static Copy: ((src: any, dst: any) => void) | ((src: any, dst: any) => void) | ((src: any[], dst: any) => void) | ((src: any, dst: any[]) => void) | ((src: any, dst: any[]) => void) | ((src: any, dst: any, length: number) => void) | ((src: any, dst: any, length: number) => void) | ((src: any[], dst: any, length: number) => void) | ((src: any, dst: any[], length: number) => void) | ((src: any, dst: any[], length: number) => void) | ((src: any, srcIndex: number, dst: any, dstIndex: number, length: number) => void) | ((src: any, srcIndex: number, dst: any, dstIndex: number, length: number) => void) | ((src: any[], srcIndex: number, dst: any, dstIndex: number, length: number) => void) | ((src: any, srcIndex: number, dst: any[], dstIndex: number, length: number) => void) | ((src: any, srcIndex: number, dst: any[], dstIndex: number, length: number) => void);
      GetSubArray: ((start: number, length: number) => Unity.Collections.NativeArray<T>);
      AsReadOnly: (() => Unity.Collections.NativeArray<T>);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NativeSliceExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class NativeSlice<T = any> {
      constructor(slice: Unity.Collections.NativeSlice<T>, start: number);
      constructor(slice: Unity.Collections.NativeSlice<T>, start: number, length: number);
      constructor(array: Unity.Collections.NativeArray<T>);
      constructor(array: Unity.Collections.NativeArray<T>, start: number);
      constructor(array: Unity.Collections.NativeArray<T>, start: number, length: number);
      Stride: number;
      Length: number;
      CopyFrom: ((slice: Unity.Collections.NativeSlice<T>) => void) | ((array: T[]) => void);
      CopyTo: ((array: Unity.Collections.NativeArray<T>) => void) | ((array: T[]) => void);
      ToArray: (() => T[]);
      GetEnumerator: (() => Unity.Collections.NativeSlice<T>);
      Equals: ((other: Unity.Collections.NativeSlice<T>) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export namespace LowLevel {
      export namespace Unsafe {
        export enum EnforceJobResult {
          AllJobsAlreadySynced = 0,
          DidSyncRunningJobs = 1,
          HandleWasAlreadyDeallocated = 2,
        }
        export enum AtomicSafetyErrorType {
          Deallocated = 0,
          DeallocatedFromJob = 1,
          NotAllocatedFromJob = 2,
        }
        export declare class AtomicSafetyHandle {
          static Create: (() => Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle);
          static GetTempUnsafePtrSliceHandle: (() => Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle);
          static GetTempMemoryHandle: (() => Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle);
          static IsTempMemoryHandle: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => boolean);
          static Release: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static SetAllowSecondaryVersionWriting: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle, allowWriting: boolean) => void);
          static SetBumpSecondaryVersionOnScheduleWrite: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle, value: boolean) => void);
          static SetAllowReadOrWriteAccess: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle, allowReadWriteAccess: boolean) => void);
          static GetAllowReadOrWriteAccess: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => boolean);
          static CheckWriteAndBumpSecondaryVersion: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static EnforceAllBufferJobsHaveCompleted: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => Unity.Collections.LowLevel.Unsafe.EnforceJobResult);
          static EnforceAllBufferJobsHaveCompletedAndRelease: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => Unity.Collections.LowLevel.Unsafe.EnforceJobResult);
          static EnforceAllBufferJobsHaveCompletedAndDisableReadWrite: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => Unity.Collections.LowLevel.Unsafe.EnforceJobResult);
          static CheckDeallocateAndThrow: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static CheckGetSecondaryDataPointerAndThrow: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static GetReaderArray: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle, maxCount: number, output: System.IntPtr) => number);
          static GetWriter: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => Unity.Jobs.JobHandle);
          static CheckReadAndThrow: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static CheckWriteAndThrow: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static CheckExistsAndThrow: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => void);
          static GetReaderName: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle, readerIndex: number) => string);
          static GetWriterName: ((handle: Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle) => string);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class DisposeSentinel {
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class NativeArrayUnsafeUtility {
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class NativeSliceUnsafeUtility {
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class UnsafeUtility {
          static GetFieldOffset: ((field: System.Reflection.FieldInfo) => number);
          static ReleaseGCObject: ((gcHandle: System.UInt64) => void);
          static IsValidAllocator: ((allocator: Unity.Collections.Allocator) => boolean);
          static SizeOf: ((type: System.Type) => number);
          static IsBlittable: ((type: System.Type) => boolean);
          static IsUnmanaged: ((type: System.Type) => boolean);
          static IsValidNativeContainerElementType: ((type: System.Type) => boolean);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
      }
    }
  }
  export namespace IO {
    export namespace LowLevel {
      export namespace Unsafe {
        export declare class ReadCommand {
          Offset: System.Int64;
          Size: System.Int64;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export enum AssetLoadingSubsystem {
          Other = 0,
          Texture = 1,
          VirtualTexture = 2,
          Mesh = 3,
          Audio = 4,
          Scripts = 5,
          EntitiesScene = 6,
          EntitiesStreamBinaryReader = 7,
        }
        export enum ReadStatus {
          Complete = 0,
          InProgress = 1,
          Failed = 2,
        }
        export enum Priority {
          PriorityLow = 0,
          PriorityHigh = 1,
        }
        export declare class ReadHandle {
          JobHandle: Unity.Jobs.JobHandle;
          Status: Unity.IO.LowLevel.Unsafe.ReadStatus;
          IsValid: (() => boolean);
          Dispose: (() => void);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class AsyncReadManager {
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export enum ProcessingState {
          Unknown = 0,
          InQueue = 1,
          Reading = 2,
          Completed = 3,
          Failed = 4,
          Canceled = 5,
        }
        export enum FileReadType {
          Sync = 0,
          Async = 1,
        }
        export declare class AsyncReadManagerRequestMetric {
          AssetName: string;
          FileName: string;
          OffsetBytes: System.UInt64;
          SizeBytes: System.UInt64;
          AssetTypeId: System.UInt64;
          CurrentBytesRead: System.UInt64;
          BatchReadCount: System.UInt32;
          IsBatchRead: boolean;
          State: Unity.IO.LowLevel.Unsafe.ProcessingState;
          ReadType: Unity.IO.LowLevel.Unsafe.FileReadType;
          PriorityLevel: Unity.IO.LowLevel.Unsafe.Priority;
          Subsystem: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem;
          RequestTimeMicroseconds: number;
          TimeInQueueMicroseconds: number;
          TotalTimeMicroseconds: number;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class AsyncReadManagerMetrics {
          static IsEnabled: (() => boolean);
          static ClearCompletedMetrics: (() => void);
          static GetMetrics: ((filters: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters, flags: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics_Flags) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[]) | ((outMetrics: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[], filters: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters, flags: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics_Flags) => void) | ((flags: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics_Flags) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[]) | ((outMetrics: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[], flags: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics_Flags) => void);
          static StartCollectingMetrics: (() => void);
          static StopCollectingMetrics: (() => void);
          static GetCurrentSummaryMetrics: ((flags: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics_Flags) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics) | ((metricsFilters: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters, flags: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics_Flags) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics);
          static GetSummaryOfMetrics: ((metrics: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[]) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics) | ((metrics: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[]) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics) | ((metrics: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[], metricsFilters: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics) | ((metrics: Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[], metricsFilters: Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters) => Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics);
          static GetTotalSizeOfNonASRMReadsBytes: ((emptyAfterRead: boolean) => System.UInt64);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export enum AsyncReadManagerMetrics_Flags {
          None = 0,
          ClearOnRead = 1,
        }
        export declare class AsyncReadManagerSummaryMetrics {
          constructor();
          TotalBytesRead: System.UInt64;
          AverageBandwidthMBPerSecond: number;
          AverageReadSizeInBytes: number;
          AverageWaitTimeMicroseconds: number;
          AverageReadTimeMicroseconds: number;
          AverageTotalRequestTimeMicroseconds: number;
          AverageThroughputMBPerSecond: number;
          LongestWaitTimeMicroseconds: number;
          LongestReadTimeMicroseconds: number;
          LongestReadAssetType: System.UInt64;
          LongestWaitAssetType: System.UInt64;
          LongestReadSubsystem: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem;
          LongestWaitSubsystem: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem;
          NumberOfInProgressRequests: number;
          NumberOfCompletedRequests: number;
          NumberOfFailedRequests: number;
          NumberOfWaitingRequests: number;
          NumberOfCanceledRequests: number;
          TotalNumberOfRequests: number;
          NumberOfCachedReads: number;
          NumberOfAsyncReads: number;
          NumberOfSyncReads: number;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class AsyncReadManagerMetricsFilters {
          constructor();
          constructor(typeID: System.UInt64);
          constructor(state: Unity.IO.LowLevel.Unsafe.ProcessingState);
          constructor(readType: Unity.IO.LowLevel.Unsafe.FileReadType);
          constructor(priorityLevel: Unity.IO.LowLevel.Unsafe.Priority);
          constructor(subsystem: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem);
          constructor(typeIDs: System.UInt64[]);
          constructor(states: Unity.IO.LowLevel.Unsafe.ProcessingState[]);
          constructor(readTypes: Unity.IO.LowLevel.Unsafe.FileReadType[]);
          constructor(priorityLevels: Unity.IO.LowLevel.Unsafe.Priority[]);
          constructor(subsystems: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[]);
          constructor(typeIDs: System.UInt64[], states: Unity.IO.LowLevel.Unsafe.ProcessingState[], readTypes: Unity.IO.LowLevel.Unsafe.FileReadType[], priorityLevels: Unity.IO.LowLevel.Unsafe.Priority[], subsystems: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[]);
          SetTypeIDFilter: ((_typeIDs: System.UInt64[]) => void) | ((_typeID: System.UInt64) => void);
          SetStateFilter: ((_states: Unity.IO.LowLevel.Unsafe.ProcessingState[]) => void) | ((_state: Unity.IO.LowLevel.Unsafe.ProcessingState) => void);
          SetReadTypeFilter: ((_readTypes: Unity.IO.LowLevel.Unsafe.FileReadType[]) => void) | ((_readType: Unity.IO.LowLevel.Unsafe.FileReadType) => void);
          SetPriorityFilter: ((_priorityLevels: Unity.IO.LowLevel.Unsafe.Priority[]) => void) | ((_priorityLevel: Unity.IO.LowLevel.Unsafe.Priority) => void);
          SetSubsystemFilter: ((_subsystems: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[]) => void) | ((_subsystem: Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem) => void);
          RemoveTypeIDFilter: (() => void);
          RemoveStateFilter: (() => void);
          RemoveReadTypeFilter: (() => void);
          RemovePriorityFilter: (() => void);
          RemoveSubsystemFilter: (() => void);
          ClearFilters: (() => void);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class VirtualFileSystem {
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
      }
    }
  }
  export namespace Jobs {
    export interface IJob {
      Execute: (() => void);
    }
    export declare class IJobExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IJobFor {
      Execute: ((index: number) => void);
    }
    export declare class IJobForExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IJobParallelFor {
      Execute: ((index: number) => void);
    }
    export declare class IJobParallelForExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class JobHandle {
      IsCompleted: boolean;
      Complete: (() => void);
      static CompleteAll: ((jobs: any) => void);
      static ScheduleBatchedJobs: (() => void);
      static CombineDependencies: ((job0: Unity.Jobs.JobHandle, job1: Unity.Jobs.JobHandle) => Unity.Jobs.JobHandle) | ((job0: Unity.Jobs.JobHandle, job1: Unity.Jobs.JobHandle, job2: Unity.Jobs.JobHandle) => Unity.Jobs.JobHandle) | ((jobs: any) => Unity.Jobs.JobHandle) | ((jobs: any) => Unity.Jobs.JobHandle);
      static CheckFenceIsDependencyOrDidSyncFence: ((jobHandle: Unity.Jobs.JobHandle, dependsOn: Unity.Jobs.JobHandle) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export namespace LowLevel {
      export namespace Unsafe {
        export declare class BatchQueryJob<CommandT = any, ResultT = any> {
          constructor(commands: Unity.Collections.NativeArray<CommandT>, results: Unity.Collections.NativeArray<ResultT>);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class BatchQueryJobStruct<T = any> {
          static Initialize: (() => System.IntPtr);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class JobHandleUnsafeUtility {
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class JobRanges {
          TotalIterationCount: number;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export enum ScheduleMode {
          Run = 0,
          Batched = 1,
          Parallel = 1,
          Single = 2,
        }
        export enum JobType {
          Single = 0,
          ParallelFor = 1,
        }
        export declare class JobsUtility {
          static IsExecutingJob: boolean;
          static JobDebuggerEnabled: boolean;
          static JobCompilerEnabled: boolean;
          static JobWorkerMaximumCount: number;
          static JobWorkerCount: number;
          static MaxJobThreadCount: number;
          static CacheLineSize: number;
          static CreateJobReflectionData: ((type: System.Type, jobType: Unity.Jobs.LowLevel.Unsafe.JobType, managedJobFunction0: System.Object, managedJobFunction1?: System.Object, managedJobFunction2?: System.Object) => System.IntPtr) | ((type: System.Type, managedJobFunction0: System.Object, managedJobFunction1?: System.Object, managedJobFunction2?: System.Object) => System.IntPtr) | ((wrapperJobType: System.Type, userJobType: System.Type, jobType: Unity.Jobs.LowLevel.Unsafe.JobType, managedJobFunction0: System.Object) => System.IntPtr) | ((wrapperJobType: System.Type, userJobType: System.Type, managedJobFunction0: System.Object) => System.IntPtr);
          static ResetJobWorkerCount: (() => void);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class JobsUtility_JobScheduleParameters {
          Dependency: Unity.Jobs.JobHandle;
          ScheduleMode: number;
          ReflectionData: System.IntPtr;
          JobDataPtr: System.IntPtr;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
      }
    }
  }
  export namespace Profiling {
    export declare class ProfilerCategory {
      constructor(categoryName: string);
      Name: string;
      Color: UnityEngine.Color32;
      static Render: Unity.Profiling.ProfilerCategory;
      static Scripts: Unity.Profiling.ProfilerCategory;
      static Gui: Unity.Profiling.ProfilerCategory;
      static Physics: Unity.Profiling.ProfilerCategory;
      static Animation: Unity.Profiling.ProfilerCategory;
      static Ai: Unity.Profiling.ProfilerCategory;
      static Audio: Unity.Profiling.ProfilerCategory;
      static Video: Unity.Profiling.ProfilerCategory;
      static Particles: Unity.Profiling.ProfilerCategory;
      static Lighting: Unity.Profiling.ProfilerCategory;
      static Network: Unity.Profiling.ProfilerCategory;
      static Loading: Unity.Profiling.ProfilerCategory;
      static Vr: Unity.Profiling.ProfilerCategory;
      static Input: Unity.Profiling.ProfilerCategory;
      static Memory: Unity.Profiling.ProfilerCategory;
      static VirtualTexturing: Unity.Profiling.ProfilerCategory;
      static Internal: Unity.Profiling.ProfilerCategory;
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum ProfilerCategoryFlags {
      None = 0,
      Builtin = 1,
    }
    export declare class ProfilerMarker {
      constructor(name: string);
      constructor(category: Unity.Profiling.ProfilerCategory, name: string);
      Handle: System.IntPtr;
      Begin: (() => void) | ((contextUnityObject: UnityEngine.Object) => void);
      End: (() => void);
      Auto: (() => Unity.Profiling.ProfilerMarker_AutoScope);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ProfilerMarker_AutoScope {
      Dispose: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum ProfilerFlowEventType {
      Begin = 0,
      ParallelNext = 1,
      End = 2,
      Next = 3,
    }
    export enum ProfilerMarkerDataUnit {
      Undefined = 0,
      TimeNanoseconds = 1,
      Bytes = 2,
      Count = 3,
      Percent = 4,
      FrequencyHz = 5,
    }
    export enum ProfilerCounterOptions {
      None = 0,
      FlushOnEndOfFrame = 2,
      ResetToZeroOnFlush = 4,
    }
    export enum ProfilerRecorderOptions {
      None = 0,
      StartImmediately = 1,
      KeepAliveDuringDomainReload = 2,
      CollectOnlyOnCurrentThread = 4,
      WrapAroundWhenCapacityReached = 8,
      SumAllSamplesInFrame = 16,
      Default = 24,
    }
    export declare class ProfilerRecorderSample {
      Value: System.Int64;
      Count: System.Int64;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ProfilerRecorder {
      constructor(statName: string, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions);
      constructor(categoryName: string, statName: string, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions);
      constructor(category: Unity.Profiling.ProfilerCategory, statName: string, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions);
      constructor(marker: Unity.Profiling.ProfilerMarker, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions);
      constructor(statHandle: Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions);
      Valid: boolean;
      DataType: Unity.Profiling.LowLevel.ProfilerMarkerDataType;
      UnitType: Unity.Profiling.ProfilerMarkerDataUnit;
      CurrentValue: System.Int64;
      CurrentValueAsDouble: number;
      LastValue: System.Int64;
      LastValueAsDouble: number;
      Capacity: number;
      Count: number;
      IsRunning: boolean;
      WrappedAround: boolean;
      static StartNew: ((category: Unity.Profiling.ProfilerCategory, statName: string, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions) => Unity.Profiling.ProfilerRecorder) | ((marker: Unity.Profiling.ProfilerMarker, capacity?: number, options?: Unity.Profiling.ProfilerRecorderOptions) => Unity.Profiling.ProfilerRecorder);
      Start: (() => void);
      Stop: (() => void);
      Reset: (() => void);
      GetSample: ((index: number) => Unity.Profiling.ProfilerRecorderSample);
      CopyTo: ((outSamples: Unity.Profiling.ProfilerRecorderSample[], reset?: boolean) => void);
      ToArray: (() => Unity.Profiling.ProfilerRecorderSample[]);
      Dispose: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export namespace LowLevel {
      export enum MarkerFlags {
        Default = 0,
        Script = 2,
        ScriptInvoke = 32,
        ScriptDeepProfiler = 64,
        AvailabilityEditor = 4,
        Warning = 16,
        Counter = 128,
      }
      export enum ProfilerMarkerDataType {
        Int32 = 2,
        UInt32 = 3,
        Int64 = 4,
        UInt64 = 5,
        Float = 6,
        Double = 7,
        String16 = 9,
        Blob8 = 11,
      }
      export namespace Unsafe {
        export declare class ProfilerRecorderDescription {
          Category: Unity.Profiling.ProfilerCategory;
          Flags: Unity.Profiling.LowLevel.MarkerFlags;
          DataType: Unity.Profiling.LowLevel.ProfilerMarkerDataType;
          UnitType: Unity.Profiling.ProfilerMarkerDataUnit;
          NameUtf8Len: number;
          Name: string;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class ProfilerRecorderHandle {
          Valid: boolean;
          static GetDescription: ((handle: Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle) => Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription);
          static GetAvailable: ((outRecorderHandleList: Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle[]) => void);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class ProfilerMarkerData {
          Type: System.Byte;
          Size: System.UInt32;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class ProfilerCategoryDescription {
          Name: string;
          Id: System.UInt16;
          Color: UnityEngine.Color32;
          NameUtf8Len: number;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
        export declare class ProfilerUnsafeUtility {
          static Timestamp: System.Int64;
          static TimestampToNanosecondsConversionRatio: Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility_TimestampConversionRatio;
          static CategoryRender: System.UInt16;
          static CategoryScripts: System.UInt16;
          static CategoryGUI: System.UInt16;
          static CategoryPhysics: System.UInt16;
          static CategoryAnimation: System.UInt16;
          static CategoryAi: System.UInt16;
          static CategoryAudio: System.UInt16;
          static CategoryVideo: System.UInt16;
          static CategoryParticles: System.UInt16;
          static CategoryLighting: System.UInt16;
          static CategoryLightning: System.UInt16;
          static CategoryNetwork: System.UInt16;
          static CategoryLoading: System.UInt16;
          static CategoryOther: System.UInt16;
          static CategoryVr: System.UInt16;
          static CategoryAllocation: System.UInt16;
          static CategoryInternal: System.UInt16;
          static CategoryInput: System.UInt16;
          static CategoryVirtualTexturing: System.UInt16;
          static GetCategoryDescription: ((categoryId: System.UInt16) => Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription);
          static CreateMarker: ((name: string, categoryId: System.UInt16, flags: Unity.Profiling.LowLevel.MarkerFlags, metadataCount: number) => System.IntPtr);
          static SetMarkerMetadata: ((markerPtr: System.IntPtr, index: number, name: string, type: System.Byte, unit: System.Byte) => void);
          static BeginSample: ((markerPtr: System.IntPtr) => void);
          static EndSample: ((markerPtr: System.IntPtr) => void);
          static CreateFlow: ((categoryId: System.UInt16) => System.UInt32);
          static FlowEvent: ((flowId: System.UInt32, flowEventType: Unity.Profiling.ProfilerFlowEventType) => void);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class ProfilerUnsafeUtility_TimestampConversionRatio {
          Numerator: System.Int64;
          Denominator: System.Int64;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          ToString: (() => string);
          GetType: (() => System.Type);
        }
      }
    }
  }
  export namespace Rendering {
    export namespace HybridV2 {
      export declare class DOTSInstancingCbuffer {
        NameID: number;
        CbufferIndex: number;
        SizeBytes: number;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export enum DOTSInstancingPropertyType {
        Unknown = 0,
        Float = 1,
        Half = 2,
        Int = 3,
        Short = 4,
        Uint = 5,
        Bool = 6,
        Struct = 7,
      }
      export declare class DOTSInstancingProperty {
        MetadataNameID: number;
        ConstantNameID: number;
        CbufferIndex: number;
        MetadataOffset: number;
        SizeBytes: number;
        ConstantType: Unity.Rendering.HybridV2.DOTSInstancingPropertyType;
        Cols: number;
        Rows: number;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class HybridV2ShaderReflection {
        constructor();
        static GetDOTSReflectionVersionNumber: (() => System.UInt32);
        static GetDOTSInstancingCbuffers: ((shader: UnityEngine.Shader) => any);
        static GetDOTSInstancingProperties: ((shader: UnityEngine.Shader) => any);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
  }
}
export namespace UnityEngine {
  export enum SendMessageOptions {
    RequireReceiver = 0,
    DontRequireReceiver = 1,
  }
  export enum PrimitiveType {
    Sphere = 0,
    Capsule = 1,
    Cylinder = 2,
    Cube = 3,
    Plane = 4,
    Quad = 5,
  }
  export enum Space {
    World = 0,
    Self = 1,
  }
  export enum RuntimePlatform {
    OSXEditor = 0,
    OSXPlayer = 1,
    WindowsPlayer = 2,
    OSXWebPlayer = 3,
    OSXDashboardPlayer = 4,
    WindowsWebPlayer = 5,
    WindowsEditor = 7,
    IPhonePlayer = 8,
    XBOX360 = 10,
    PS3 = 9,
    Android = 11,
    NaCl = 12,
    FlashPlayer = 15,
    LinuxPlayer = 13,
    LinuxEditor = 16,
    WebGLPlayer = 17,
    MetroPlayerX86 = 18,
    WSAPlayerX86 = 18,
    MetroPlayerX64 = 19,
    WSAPlayerX64 = 19,
    MetroPlayerARM = 20,
    WSAPlayerARM = 20,
    WP8Player = 21,
    BB10Player = 22,
    BlackBerryPlayer = 22,
    TizenPlayer = 23,
    PSP2 = 24,
    PS4 = 25,
    PSM = 26,
    XboxOne = 27,
    SamsungTVPlayer = 28,
    WiiU = 30,
    tvOS = 31,
    Switch = 32,
    Lumin = 33,
    Stadia = 34,
    CloudRendering = 35,
  }
  export enum SystemLanguage {
    Afrikaans = 0,
    Arabic = 1,
    Basque = 2,
    Belarusian = 3,
    Bulgarian = 4,
    Catalan = 5,
    Chinese = 6,
    Czech = 7,
    Danish = 8,
    Dutch = 9,
    English = 10,
    Estonian = 11,
    Faroese = 12,
    Finnish = 13,
    French = 14,
    German = 15,
    Greek = 16,
    Hebrew = 17,
    Hugarian = 18,
    Icelandic = 19,
    Indonesian = 20,
    Italian = 21,
    Japanese = 22,
    Korean = 23,
    Latvian = 24,
    Lithuanian = 25,
    Norwegian = 26,
    Polish = 27,
    Portuguese = 28,
    Romanian = 29,
    Russian = 30,
    SerboCroatian = 31,
    Slovak = 32,
    Slovenian = 33,
    Spanish = 34,
    Swedish = 35,
    Thai = 36,
    Turkish = 37,
    Ukrainian = 38,
    Vietnamese = 39,
    ChineseSimplified = 40,
    ChineseTraditional = 41,
    Unknown = 42,
    Hungarian = 18,
  }
  export enum LogType {
    Error = 0,
    Assert = 1,
    Warning = 2,
    Log = 3,
    Exception = 4,
  }
  export enum LogOption {
    None = 0,
    NoStacktrace = 1,
  }
  export enum ThreadPriority {
    Low = 0,
    BelowNormal = 1,
    Normal = 2,
    High = 4,
  }
  export declare class SortingLayer {
    id: number;
    name: string;
    value: number;
    static layers: UnityEngine.SortingLayer[];
    static GetLayerValueFromID: ((id: number) => number);
    static GetLayerValueFromName: ((name: string) => number);
    static NameToID: ((name: string) => number);
    static IDToName: ((id: number) => string);
    static IsValid: ((id: number) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum WeightedMode {
    None = 0,
    In = 1,
    Out = 2,
    Both = 3,
  }
  export declare class Keyframe {
    constructor(time: number, value: number);
    constructor(time: number, value: number, inTangent: number, outTangent: number);
    constructor(time: number, value: number, inTangent: number, outTangent: number, inWeight: number, outWeight: number);
    time: number;
    value: number;
    inTangent: number;
    outTangent: number;
    inWeight: number;
    outWeight: number;
    weightedMode: UnityEngine.WeightedMode;
    tangentMode: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum WrapMode {
    Once = 1,
    Loop = 2,
    PingPong = 4,
    Default = 0,
    ClampForever = 8,
    Clamp = 1,
  }
  export declare class AnimationCurve {
    constructor(...keys: UnityEngine.Keyframe[]);
    constructor();
    keys: UnityEngine.Keyframe[];
    length: number;
    preWrapMode: UnityEngine.WrapMode;
    postWrapMode: UnityEngine.WrapMode;
    Evaluate: ((time: number) => number);
    AddKey: ((time: number, value: number) => number) | ((key: UnityEngine.Keyframe) => number);
    MoveKey: ((index: number, key: UnityEngine.Keyframe) => number);
    RemoveKey: ((index: number) => void);
    SmoothTangents: ((index: number, weight: number) => void);
    static Constant: ((timeStart: number, timeEnd: number, value: number) => UnityEngine.AnimationCurve);
    static Linear: ((timeStart: number, valueStart: number, timeEnd: number, valueEnd: number) => UnityEngine.AnimationCurve);
    static EaseInOut: ((timeStart: number, valueStart: number, timeEnd: number, valueEnd: number) => UnityEngine.AnimationCurve);
    Equals: ((o: System.Object) => boolean) | ((other: UnityEngine.AnimationCurve) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Application {
    constructor();
    static isLoadingLevel: boolean;
    static streamedBytes: number;
    static webSecurityEnabled: boolean;
    static isPlaying: boolean;
    static isFocused: boolean;
    static buildGUID: string;
    static runInBackground: boolean;
    static isBatchMode: boolean;
    static dataPath: string;
    static streamingAssetsPath: string;
    static persistentDataPath: string;
    static temporaryCachePath: string;
    static absoluteURL: string;
    static unityVersion: string;
    static version: string;
    static installerName: string;
    static identifier: string;
    static installMode: UnityEngine.ApplicationInstallMode;
    static sandboxType: UnityEngine.ApplicationSandboxType;
    static productName: string;
    static companyName: string;
    static cloudProjectId: string;
    static targetFrameRate: number;
    static stackTraceLogType: UnityEngine.StackTraceLogType;
    static consoleLogPath: string;
    static backgroundLoadingPriority: UnityEngine.ThreadPriority;
    static genuine: boolean;
    static genuineCheckAvailable: boolean;
    static isShowingSplashScreen: boolean;
    static platform: UnityEngine.RuntimePlatform;
    static isMobilePlatform: boolean;
    static isConsolePlatform: boolean;
    static systemLanguage: UnityEngine.SystemLanguage;
    static internetReachability: UnityEngine.NetworkReachability;
    static isPlayer: boolean;
    static levelCount: number;
    static loadedLevel: number;
    static loadedLevelName: string;
    static isEditor: boolean;
    static Quit: ((exitCode: number) => void) | (() => void);
    static CancelQuit: (() => void);
    static Unload: (() => void);
    static GetStreamProgressForLevel: ((levelIndex: number) => number) | ((levelName: string) => number);
    static CanStreamedLevelBeLoaded: ((levelIndex: number) => boolean) | ((levelName: string) => boolean);
    static IsPlaying: ((obj: UnityEngine.Object) => boolean);
    static GetBuildTags: (() => string[]);
    static SetBuildTags: ((buildTags: string[]) => void);
    static HasProLicense: (() => boolean);
    static ExternalEval: ((script: string) => void);
    static RequestAdvertisingIdentifierAsync: ((delegateMethod: UnityEngine.Application_AdvertisingIdentifierCallback) => boolean);
    static OpenURL: ((url: string) => void);
    static ForceCrash: ((mode: number) => void);
    static GetStackTraceLogType: ((logType: UnityEngine.LogType) => UnityEngine.StackTraceLogType);
    static SetStackTraceLogType: ((logType: UnityEngine.LogType, stackTraceType: UnityEngine.StackTraceLogType) => void);
    static RequestUserAuthorization: ((mode: UnityEngine.UserAuthorization) => UnityEngine.AsyncOperation);
    static HasUserAuthorization: ((mode: UnityEngine.UserAuthorization) => boolean);
    static ExternalCall: ((functionName: string, ...args: System.Object[]) => void);
    static DontDestroyOnLoad: ((o: UnityEngine.Object) => void);
    static CaptureScreenshot: ((filename: string, superSize: number) => void) | ((filename: string) => void);
    static RegisterLogCallback: ((handler: UnityEngine.Application_LogCallback) => void);
    static RegisterLogCallbackThreaded: ((handler: UnityEngine.Application_LogCallback) => void);
    static LoadLevel: ((index: number) => void) | ((name: string) => void);
    static LoadLevelAdditive: ((index: number) => void) | ((name: string) => void);
    static LoadLevelAsync: ((index: number) => UnityEngine.AsyncOperation) | ((levelName: string) => UnityEngine.AsyncOperation);
    static LoadLevelAdditiveAsync: ((index: number) => UnityEngine.AsyncOperation) | ((levelName: string) => UnityEngine.AsyncOperation);
    static UnloadLevel: ((index: number) => boolean) | ((scenePath: string) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Application_AdvertisingIdentifierCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((advertisingId: string, trackingEnabled: boolean, errorMsg: string) => void);
    BeginInvoke: ((advertisingId: string, trackingEnabled: boolean, errorMsg: string, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Application_LowMemoryCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Application_LogCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((condition: string, stackTrace: string, type: UnityEngine.LogType) => void);
    BeginInvoke: ((condition: string, stackTrace: string, type: UnityEngine.LogType, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum StackTraceLogType {
    None = 0,
    ScriptOnly = 1,
    Full = 2,
  }
  export enum NetworkReachability {
    NotReachable = 0,
    ReachableViaCarrierDataNetwork = 1,
    ReachableViaLocalAreaNetwork = 2,
  }
  export enum UserAuthorization {
    WebCam = 1,
    Microphone = 2,
  }
  export enum ApplicationInstallMode {
    Unknown = 0,
    Store = 1,
    DeveloperBuild = 2,
    Adhoc = 3,
    Enterprise = 4,
    Editor = 5,
  }
  export enum ApplicationSandboxType {
    Unknown = 0,
    NotSandboxed = 1,
    Sandboxed = 2,
    SandboxBroken = 3,
  }
  export enum AudioType {
    UNKNOWN = 0,
    ACC = 1,
    AIFF = 2,
    IT = 10,
    MOD = 12,
    MPEG = 13,
    OGGVORBIS = 14,
    S3M = 17,
    WAV = 20,
    XM = 21,
    XMA = 22,
    VAG = 23,
    AUDIOQUEUE = 24,
  }
  export declare class CachedAssetBundle {
    constructor(name: string, hash: UnityEngine.Hash128);
    name: string;
    hash: UnityEngine.Hash128;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Cache {
    valid: boolean;
    ready: boolean;
    readOnly: boolean;
    path: string;
    index: number;
    spaceFree: System.Int64;
    maximumAvailableStorageSpace: System.Int64;
    spaceOccupied: System.Int64;
    expirationDelay: number;
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Cache) => boolean);
    ClearCache: (() => boolean) | ((expiration: number) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CacheIndex {
    name: string;
    bytesUsed: number;
    expires: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Caching {
    constructor();
    static compressionEnabled: boolean;
    static ready: boolean;
    static spaceUsed: number;
    static spaceOccupied: System.Int64;
    static spaceAvailable: number;
    static spaceFree: System.Int64;
    static maximumAvailableDiskSpace: System.Int64;
    static expirationDelay: number;
    static cacheCount: number;
    static defaultCache: UnityEngine.Cache;
    static currentCacheForWriting: UnityEngine.Cache;
    static ClearCache: (() => boolean) | ((expiration: number) => boolean);
    static ClearCachedVersion: ((assetBundleName: string, hash: UnityEngine.Hash128) => boolean);
    static ClearOtherCachedVersions: ((assetBundleName: string, hash: UnityEngine.Hash128) => boolean);
    static ClearAllCachedVersions: ((assetBundleName: string) => boolean);
    static GetCachedVersions: ((assetBundleName: string, outCachedVersions: UnityEngine.Hash128[]) => void);
    static IsVersionCached: ((url: string, version: number) => boolean) | ((url: string, hash: UnityEngine.Hash128) => boolean) | ((cachedBundle: UnityEngine.CachedAssetBundle) => boolean);
    static MarkAsUsed: ((url: string, version: number) => boolean) | ((url: string, hash: UnityEngine.Hash128) => boolean) | ((cachedBundle: UnityEngine.CachedAssetBundle) => boolean);
    static SetNoBackupFlag: ((url: string, version: number) => void) | ((url: string, hash: UnityEngine.Hash128) => void) | ((cachedBundle: UnityEngine.CachedAssetBundle) => void);
    static ResetNoBackupFlag: ((url: string, version: number) => void) | ((url: string, hash: UnityEngine.Hash128) => void) | ((cachedBundle: UnityEngine.CachedAssetBundle) => void);
    static GetVersionFromCache: ((url: string) => number);
    static AddCache: ((cachePath: string) => UnityEngine.Cache);
    static GetCacheAt: ((cacheIndex: number) => UnityEngine.Cache);
    static GetCacheByPath: ((cachePath: string) => UnityEngine.Cache);
    static GetAllCachePaths: ((cachePaths: string[]) => void);
    static RemoveCache: ((cache: UnityEngine.Cache) => boolean);
    static MoveCacheBefore: ((src: UnityEngine.Cache, dst: UnityEngine.Cache) => void);
    static MoveCacheAfter: ((src: UnityEngine.Cache, dst: UnityEngine.Cache) => void);
    static CleanCache: (() => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Camera {
    constructor();
    nearClipPlane: number;
    farClipPlane: number;
    fieldOfView: number;
    renderingPath: UnityEngine.RenderingPath;
    actualRenderingPath: UnityEngine.RenderingPath;
    allowHDR: boolean;
    allowMSAA: boolean;
    allowDynamicResolution: boolean;
    forceIntoRenderTexture: boolean;
    orthographicSize: number;
    orthographic: boolean;
    opaqueSortMode: UnityEngine.Rendering.OpaqueSortMode;
    transparencySortMode: UnityEngine.TransparencySortMode;
    transparencySortAxis: UnityEngine.Vector3;
    depth: number;
    aspect: number;
    velocity: UnityEngine.Vector3;
    cullingMask: number;
    eventMask: number;
    layerCullSpherical: boolean;
    cameraType: UnityEngine.CameraType;
    overrideSceneCullingMask: System.UInt64;
    layerCullDistances: number[];
    useOcclusionCulling: boolean;
    cullingMatrix: UnityEngine.Matrix4x4;
    backgroundColor: UnityEngine.Color;
    clearFlags: UnityEngine.CameraClearFlags;
    depthTextureMode: UnityEngine.DepthTextureMode;
    clearStencilAfterLightingPass: boolean;
    usePhysicalProperties: boolean;
    sensorSize: UnityEngine.Vector2;
    lensShift: UnityEngine.Vector2;
    focalLength: number;
    gateFit: UnityEngine.Camera_GateFitMode;
    rect: UnityEngine.Rect;
    pixelRect: UnityEngine.Rect;
    pixelWidth: number;
    pixelHeight: number;
    scaledPixelWidth: number;
    scaledPixelHeight: number;
    targetTexture: UnityEngine.RenderTexture;
    activeTexture: UnityEngine.RenderTexture;
    targetDisplay: number;
    cameraToWorldMatrix: UnityEngine.Matrix4x4;
    worldToCameraMatrix: UnityEngine.Matrix4x4;
    projectionMatrix: UnityEngine.Matrix4x4;
    nonJitteredProjectionMatrix: UnityEngine.Matrix4x4;
    useJitteredProjectionMatrixForTransparentRendering: boolean;
    previousViewProjectionMatrix: UnityEngine.Matrix4x4;
    static main: UnityEngine.Camera;
    static current: UnityEngine.Camera;
    scene: UnityEngine.SceneManagement.Scene;
    stereoEnabled: boolean;
    stereoSeparation: number;
    stereoConvergence: number;
    areVRStereoViewMatricesWithinSingleCullTolerance: boolean;
    stereoTargetEye: UnityEngine.StereoTargetEyeMask;
    stereoActiveEye: UnityEngine.Camera_MonoOrStereoscopicEye;
    static allCamerasCount: number;
    static allCameras: UnityEngine.Camera[];
    commandBufferCount: number;
    isOrthoGraphic: boolean;
    static mainCamera: UnityEngine.Camera;
    near: number;
    far: number;
    fov: number;
    hdr: boolean;
    stereoMirrorMode: boolean;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static onPreCull: UnityEngine.Camera_CameraCallback;
    static onPreRender: UnityEngine.Camera_CameraCallback;
    static onPostRender: UnityEngine.Camera_CameraCallback;
    Reset: (() => void);
    ResetTransparencySortSettings: (() => void);
    ResetAspect: (() => void);
    ResetCullingMatrix: (() => void);
    SetReplacementShader: ((shader: UnityEngine.Shader, replacementTag: string) => void);
    ResetReplacementShader: (() => void);
    GetGateFittedFieldOfView: (() => number);
    GetGateFittedLensShift: (() => UnityEngine.Vector2);
    SetTargetBuffers: ((colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer) => void) | ((colorBuffer: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer) => void);
    ResetWorldToCameraMatrix: (() => void);
    ResetProjectionMatrix: (() => void);
    CalculateObliqueMatrix: ((clipPlane: UnityEngine.Vector4) => UnityEngine.Matrix4x4);
    WorldToScreenPoint: ((position: UnityEngine.Vector3, eye: UnityEngine.Camera_MonoOrStereoscopicEye) => UnityEngine.Vector3) | ((position: UnityEngine.Vector3) => UnityEngine.Vector3);
    WorldToViewportPoint: ((position: UnityEngine.Vector3, eye: UnityEngine.Camera_MonoOrStereoscopicEye) => UnityEngine.Vector3) | ((position: UnityEngine.Vector3) => UnityEngine.Vector3);
    ViewportToWorldPoint: ((position: UnityEngine.Vector3, eye: UnityEngine.Camera_MonoOrStereoscopicEye) => UnityEngine.Vector3) | ((position: UnityEngine.Vector3) => UnityEngine.Vector3);
    ScreenToWorldPoint: ((position: UnityEngine.Vector3, eye: UnityEngine.Camera_MonoOrStereoscopicEye) => UnityEngine.Vector3) | ((position: UnityEngine.Vector3) => UnityEngine.Vector3);
    ScreenToViewportPoint: ((position: UnityEngine.Vector3) => UnityEngine.Vector3);
    ViewportToScreenPoint: ((position: UnityEngine.Vector3) => UnityEngine.Vector3);
    ViewportPointToRay: ((pos: UnityEngine.Vector3, eye: UnityEngine.Camera_MonoOrStereoscopicEye) => UnityEngine.Ray) | ((pos: UnityEngine.Vector3) => UnityEngine.Ray);
    ScreenPointToRay: ((pos: UnityEngine.Vector3, eye: UnityEngine.Camera_MonoOrStereoscopicEye) => UnityEngine.Ray) | ((pos: UnityEngine.Vector3) => UnityEngine.Ray);
    CalculateFrustumCorners: ((viewport: UnityEngine.Rect, z: number, eye: UnityEngine.Camera_MonoOrStereoscopicEye, outCorners: UnityEngine.Vector3[]) => void);
    static FocalLengthToFieldOfView: ((focalLength: number, sensorSize: number) => number);
    static FieldOfViewToFocalLength: ((fieldOfView: number, sensorSize: number) => number);
    static HorizontalToVerticalFieldOfView: ((horizontalFieldOfView: number, aspectRatio: number) => number);
    static VerticalToHorizontalFieldOfView: ((verticalFieldOfView: number, aspectRatio: number) => number);
    GetStereoNonJitteredProjectionMatrix: ((eye: UnityEngine.Camera_StereoscopicEye) => UnityEngine.Matrix4x4);
    GetStereoViewMatrix: ((eye: UnityEngine.Camera_StereoscopicEye) => UnityEngine.Matrix4x4);
    CopyStereoDeviceProjectionMatrixToNonJittered: ((eye: UnityEngine.Camera_StereoscopicEye) => void);
    GetStereoProjectionMatrix: ((eye: UnityEngine.Camera_StereoscopicEye) => UnityEngine.Matrix4x4);
    SetStereoProjectionMatrix: ((eye: UnityEngine.Camera_StereoscopicEye, matrix: UnityEngine.Matrix4x4) => void);
    ResetStereoProjectionMatrices: (() => void);
    SetStereoViewMatrix: ((eye: UnityEngine.Camera_StereoscopicEye, matrix: UnityEngine.Matrix4x4) => void);
    ResetStereoViewMatrices: (() => void);
    static GetAllCameras: ((cameras: UnityEngine.Camera[]) => number);
    RenderToCubemap: ((cubemap: UnityEngine.Cubemap, faceMask: number) => boolean) | ((cubemap: UnityEngine.Cubemap) => boolean) | ((cubemap: UnityEngine.RenderTexture, faceMask: number) => boolean) | ((cubemap: UnityEngine.RenderTexture) => boolean) | ((cubemap: UnityEngine.RenderTexture, faceMask: number, stereoEye: UnityEngine.Camera_MonoOrStereoscopicEye) => boolean);
    Render: (() => void);
    RenderWithShader: ((shader: UnityEngine.Shader, replacementTag: string) => void);
    RenderDontRestore: (() => void);
    SubmitRenderRequests: ((renderRequests: UnityEngine.Camera_RenderRequest[]) => void);
    static SetupCurrent: ((cur: UnityEngine.Camera) => void);
    CopyFrom: ((other: UnityEngine.Camera) => void);
    RemoveCommandBuffers: ((evt: UnityEngine.Rendering.CameraEvent) => void);
    RemoveAllCommandBuffers: (() => void);
    AddCommandBuffer: ((evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer) => void);
    AddCommandBufferAsync: ((evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer, queueType: UnityEngine.Rendering.ComputeQueueType) => void);
    RemoveCommandBuffer: ((evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer) => void);
    GetCommandBuffers: ((evt: UnityEngine.Rendering.CameraEvent) => UnityEngine.Rendering.CommandBuffer[]);
    GetScreenWidth: (() => number);
    GetScreenHeight: (() => number);
    DoClear: (() => void);
    ResetFieldOfView: (() => void);
    SetStereoViewMatrices: ((leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4) => void);
    SetStereoProjectionMatrices: ((leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4) => void);
    GetStereoViewMatrices: (() => UnityEngine.Matrix4x4[]);
    GetStereoProjectionMatrices: (() => UnityEngine.Matrix4x4[]);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum Camera_GateFitMode {
    Vertical = 1,
    Horizontal = 2,
    Fill = 3,
    Overscan = 4,
    None = 0,
  }
  export enum Camera_FieldOfViewAxis {
    Vertical = 0,
    Horizontal = 1,
  }
  export declare class Camera_GateFitParameters {
    constructor(mode: UnityEngine.Camera_GateFitMode, aspect: number);
    mode: UnityEngine.Camera_GateFitMode;
    aspect: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum Camera_StereoscopicEye {
    Left = 0,
    Right = 1,
  }
  export enum Camera_MonoOrStereoscopicEye {
    Left = 0,
    Right = 1,
    Mono = 2,
  }
  export enum Camera_RenderRequestMode {
    None = 0,
    ObjectId = 1,
    Depth = 2,
    VertexNormal = 3,
    WorldPosition = 4,
    EntityId = 5,
    BaseColor = 6,
    SpecularColor = 7,
    Metallic = 8,
    Emission = 9,
    Normal = 10,
    Smoothness = 11,
    Occlusion = 12,
    DiffuseColor = 13,
  }
  export enum Camera_RenderRequestOutputSpace {
    ScreenSpace = -1,
    UV0 = 0,
    UV1 = 1,
    UV2 = 2,
    UV3 = 3,
    UV4 = 4,
    UV5 = 5,
    UV6 = 6,
    UV7 = 7,
    UV8 = 8,
  }
  export declare class Camera_RenderRequest {
    constructor(mode: UnityEngine.Camera_RenderRequestMode, rt: UnityEngine.RenderTexture);
    constructor(mode: UnityEngine.Camera_RenderRequestMode, space: UnityEngine.Camera_RenderRequestOutputSpace, rt: UnityEngine.RenderTexture);
    isValid: boolean;
    mode: UnityEngine.Camera_RenderRequestMode;
    result: UnityEngine.RenderTexture;
    outputSpace: UnityEngine.Camera_RenderRequestOutputSpace;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Camera_CameraCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((cam: UnityEngine.Camera) => void);
    BeginInvoke: ((cam: UnityEngine.Camera, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class BoundingSphere {
    constructor(pos: UnityEngine.Vector3, rad: number);
    constructor(packedSphere: UnityEngine.Vector4);
    position: UnityEngine.Vector3;
    radius: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CullingGroupEvent {
    index: number;
    isVisible: boolean;
    wasVisible: boolean;
    hasBecomeVisible: boolean;
    hasBecomeInvisible: boolean;
    currentDistance: number;
    previousDistance: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CullingGroup {
    constructor();
    onStateChanged: UnityEngine.CullingGroup_StateChanged;
    enabled: boolean;
    targetCamera: UnityEngine.Camera;
    Dispose: (() => void);
    SetBoundingSpheres: ((array: UnityEngine.BoundingSphere[]) => void);
    SetBoundingSphereCount: ((count: number) => void);
    EraseSwapBack: ((index: number) => void);
    QueryIndices: ((visible: boolean, result: number[], firstIndex: number) => number) | ((distanceIndex: number, result: number[], firstIndex: number) => number) | ((visible: boolean, distanceIndex: number, result: number[], firstIndex: number) => number);
    IsVisible: ((index: number) => boolean);
    GetDistance: ((index: number) => number);
    SetBoundingDistances: ((distances: number[]) => void);
    SetDistanceReferencePoint: ((point: UnityEngine.Vector3) => void) | ((transform: UnityEngine.Transform) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class CullingGroup_StateChanged {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((sphere: UnityEngine.CullingGroupEvent) => void);
    BeginInvoke: ((sphere: UnityEngine.CullingGroupEvent, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class FlareLayer {
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class ReflectionProbe {
    constructor();
    type: UnityEngine.Rendering.ReflectionProbeType;
    size: UnityEngine.Vector3;
    center: UnityEngine.Vector3;
    nearClipPlane: number;
    farClipPlane: number;
    intensity: number;
    bounds: UnityEngine.Bounds;
    hdr: boolean;
    renderDynamicObjects: boolean;
    shadowDistance: number;
    resolution: number;
    cullingMask: number;
    clearFlags: UnityEngine.Rendering.ReflectionProbeClearFlags;
    backgroundColor: UnityEngine.Color;
    blendDistance: number;
    boxProjection: boolean;
    mode: UnityEngine.Rendering.ReflectionProbeMode;
    importance: number;
    refreshMode: UnityEngine.Rendering.ReflectionProbeRefreshMode;
    timeSlicingMode: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
    bakedTexture: UnityEngine.Texture;
    customBakedTexture: UnityEngine.Texture;
    realtimeTexture: UnityEngine.RenderTexture;
    texture: UnityEngine.Texture;
    textureHDRDecodeValues: UnityEngine.Vector4;
    static minBakedCubemapResolution: number;
    static maxBakedCubemapResolution: number;
    static defaultTextureHDRDecodeValues: UnityEngine.Vector4;
    static defaultTexture: UnityEngine.Texture;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Reset: (() => void);
    RenderProbe: (() => number) | ((targetTexture: UnityEngine.RenderTexture) => number);
    IsFinishedRendering: ((renderId: number) => boolean);
    static BlendCubemap: ((src: UnityEngine.Texture, dst: UnityEngine.Texture, blend: number, target: UnityEngine.RenderTexture) => boolean);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum ReflectionProbe_ReflectionProbeEvent {
    ReflectionProbeAdded = 0,
    ReflectionProbeRemoved = 1,
  }
  export declare class CrashReport {
    static reports: UnityEngine.CrashReport[];
    static lastReport: UnityEngine.CrashReport;
    time: System.DateTime;
    text: string;
    static RemoveAll: (() => void);
    Remove: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Debug {
    constructor();
    static unityLogger: UnityEngine.ILogger;
    static developerConsoleVisible: boolean;
    static isDebugBuild: boolean;
    static logger: UnityEngine.ILogger;
    static DrawLine: ((start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color, duration: number) => void) | ((start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color) => void) | ((start: UnityEngine.Vector3, end: UnityEngine.Vector3) => void) | ((start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color, duration: number, depthTest: boolean) => void);
    static DrawRay: ((start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color, duration: number) => void) | ((start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color) => void) | ((start: UnityEngine.Vector3, dir: UnityEngine.Vector3) => void) | ((start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color, duration: number, depthTest: boolean) => void);
    static Break: (() => void);
    static DebugBreak: (() => void);
    static Log: ((message: System.Object) => void) | ((message: System.Object, context: UnityEngine.Object) => void);
    static LogFormat: ((format: string, ...args: System.Object[]) => void) | ((context: UnityEngine.Object, format: string, ...args: System.Object[]) => void) | ((logType: UnityEngine.LogType, logOptions: UnityEngine.LogOption, context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    static LogError: ((message: System.Object) => void) | ((message: System.Object, context: UnityEngine.Object) => void);
    static LogErrorFormat: ((format: string, ...args: System.Object[]) => void) | ((context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    static ClearDeveloperConsole: (() => void);
    static LogException: ((exception: System.Exception) => void) | ((exception: System.Exception, context: UnityEngine.Object) => void);
    static LogWarning: ((message: System.Object) => void) | ((message: System.Object, context: UnityEngine.Object) => void);
    static LogWarningFormat: ((format: string, ...args: System.Object[]) => void) | ((context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    static Assert: ((condition: boolean) => void) | ((condition: boolean, context: UnityEngine.Object) => void) | ((condition: boolean, message: System.Object) => void) | ((condition: boolean, message: string) => void) | ((condition: boolean, message: System.Object, context: UnityEngine.Object) => void) | ((condition: boolean, message: string, context: UnityEngine.Object) => void) | ((condition: boolean, format: string, ...args: System.Object[]) => void);
    static AssertFormat: ((condition: boolean, format: string, ...args: System.Object[]) => void) | ((condition: boolean, context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    static LogAssertion: ((message: System.Object) => void) | ((message: System.Object, context: UnityEngine.Object) => void);
    static LogAssertionFormat: ((format: string, ...args: System.Object[]) => void) | ((context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ExposedPropertyResolver {
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class ExposedReference<T = any> {
    exposedName: UnityEngine.PropertyName;
    defaultValue: UnityEngine.Object;
    Resolve: ((resolver: UnityEngine.IExposedPropertyTable) => T);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export interface IExposedPropertyTable {
    SetReferenceValue: ((id: UnityEngine.PropertyName, value: UnityEngine.Object) => void);
    ClearReferenceValue: ((id: UnityEngine.PropertyName) => void);
  }
  export declare class EventProvider {
    constructor();
    static WriteCustomEvent: ((value: number, text: string) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Bounds {
    constructor(center: UnityEngine.Vector3, size: UnityEngine.Vector3);
    center: UnityEngine.Vector3;
    size: UnityEngine.Vector3;
    extents: UnityEngine.Vector3;
    min: UnityEngine.Vector3;
    max: UnityEngine.Vector3;
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Bounds) => boolean);
    SetMinMax: ((min: UnityEngine.Vector3, max: UnityEngine.Vector3) => void);
    Encapsulate: ((point: UnityEngine.Vector3) => void) | ((bounds: UnityEngine.Bounds) => void);
    Expand: ((amount: number) => void) | ((amount: UnityEngine.Vector3) => void);
    Intersects: ((bounds: UnityEngine.Bounds) => boolean);
    IntersectRay: ((ray: UnityEngine.Ray) => boolean);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Contains: ((point: UnityEngine.Vector3) => boolean);
    SqrDistance: ((point: UnityEngine.Vector3) => number);
    ClosestPoint: ((point: UnityEngine.Vector3) => UnityEngine.Vector3);
    GetType: (() => System.Type);
  }
  export declare class BoundsInt {
    constructor(xMin: number, yMin: number, zMin: number, sizeX: number, sizeY: number, sizeZ: number);
    constructor(position: UnityEngine.Vector3Int, size: UnityEngine.Vector3Int);
    x: number;
    y: number;
    z: number;
    center: UnityEngine.Vector3;
    min: UnityEngine.Vector3Int;
    max: UnityEngine.Vector3Int;
    xMin: number;
    yMin: number;
    zMin: number;
    xMax: number;
    yMax: number;
    zMax: number;
    position: UnityEngine.Vector3Int;
    size: UnityEngine.Vector3Int;
    allPositionsWithin: UnityEngine.BoundsInt_PositionEnumerator;
    SetMinMax: ((minPosition: UnityEngine.Vector3Int, maxPosition: UnityEngine.Vector3Int) => void);
    ClampToBounds: ((bounds: UnityEngine.BoundsInt) => void);
    Contains: ((position: UnityEngine.Vector3Int) => boolean);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.BoundsInt) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class BoundsInt_PositionEnumerator {
    constructor(min: UnityEngine.Vector3Int, max: UnityEngine.Vector3Int);
    Current: UnityEngine.Vector3Int;
    GetEnumerator: (() => UnityEngine.BoundsInt_PositionEnumerator);
    MoveNext: (() => boolean);
    Reset: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class GeometryUtility {
    constructor();
    static CalculateFrustumPlanes: ((camera: UnityEngine.Camera) => UnityEngine.Plane[]) | ((worldToProjectionMatrix: UnityEngine.Matrix4x4) => UnityEngine.Plane[]) | ((camera: UnityEngine.Camera, planes: UnityEngine.Plane[]) => void) | ((worldToProjectionMatrix: UnityEngine.Matrix4x4, planes: UnityEngine.Plane[]) => void);
    static CalculateBounds: ((positions: UnityEngine.Vector3[], transform: UnityEngine.Matrix4x4) => UnityEngine.Bounds);
    static TestPlanesAABB: ((planes: UnityEngine.Plane[], bounds: UnityEngine.Bounds) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Plane {
    constructor(inNormal: UnityEngine.Vector3, inPoint: UnityEngine.Vector3);
    constructor(inNormal: UnityEngine.Vector3, d: number);
    constructor(a: UnityEngine.Vector3, b: UnityEngine.Vector3, c: UnityEngine.Vector3);
    normal: UnityEngine.Vector3;
    distance: number;
    flipped: UnityEngine.Plane;
    SetNormalAndPosition: ((inNormal: UnityEngine.Vector3, inPoint: UnityEngine.Vector3) => void);
    Set3Points: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3, c: UnityEngine.Vector3) => void);
    Flip: (() => void);
    Translate: ((translation: UnityEngine.Vector3) => void) | ((plane: UnityEngine.Plane, translation: UnityEngine.Vector3) => UnityEngine.Plane);
    ClosestPointOnPlane: ((point: UnityEngine.Vector3) => UnityEngine.Vector3);
    GetDistanceToPoint: ((point: UnityEngine.Vector3) => number);
    GetSide: ((point: UnityEngine.Vector3) => boolean);
    SameSide: ((inPt0: UnityEngine.Vector3, inPt1: UnityEngine.Vector3) => boolean);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class Ray {
    constructor(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3);
    origin: UnityEngine.Vector3;
    direction: UnityEngine.Vector3;
    GetPoint: ((distance: number) => UnityEngine.Vector3);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class Ray2D {
    constructor(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2);
    origin: UnityEngine.Vector2;
    direction: UnityEngine.Vector2;
    GetPoint: ((distance: number) => UnityEngine.Vector2);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class Rect {
    constructor(x: number, y: number, width: number, height: number);
    constructor(position: UnityEngine.Vector2, size: UnityEngine.Vector2);
    constructor(source: UnityEngine.Rect);
    static zero: UnityEngine.Rect;
    x: number;
    y: number;
    position: UnityEngine.Vector2;
    center: UnityEngine.Vector2;
    min: UnityEngine.Vector2;
    max: UnityEngine.Vector2;
    width: number;
    height: number;
    size: UnityEngine.Vector2;
    xMin: number;
    yMin: number;
    xMax: number;
    yMax: number;
    left: number;
    right: number;
    top: number;
    bottom: number;
    static MinMaxRect: ((xmin: number, ymin: number, xmax: number, ymax: number) => UnityEngine.Rect);
    Set: ((x: number, y: number, width: number, height: number) => void);
    Contains: ((point: UnityEngine.Vector2) => boolean) | ((point: UnityEngine.Vector3) => boolean) | ((point: UnityEngine.Vector3, allowInverse: boolean) => boolean);
    Overlaps: ((other: UnityEngine.Rect) => boolean) | ((other: UnityEngine.Rect, allowInverse: boolean) => boolean);
    static NormalizedToPoint: ((rectangle: UnityEngine.Rect, normalizedRectCoordinates: UnityEngine.Vector2) => UnityEngine.Vector2);
    static PointToNormalized: ((rectangle: UnityEngine.Rect, point: UnityEngine.Vector2) => UnityEngine.Vector2);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Rect) => boolean);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    GetType: (() => System.Type);
  }
  export declare class RectInt {
    constructor(xMin: number, yMin: number, width: number, height: number);
    constructor(position: UnityEngine.Vector2Int, size: UnityEngine.Vector2Int);
    x: number;
    y: number;
    center: UnityEngine.Vector2;
    min: UnityEngine.Vector2Int;
    max: UnityEngine.Vector2Int;
    width: number;
    height: number;
    xMin: number;
    yMin: number;
    xMax: number;
    yMax: number;
    position: UnityEngine.Vector2Int;
    size: UnityEngine.Vector2Int;
    allPositionsWithin: UnityEngine.RectInt_PositionEnumerator;
    SetMinMax: ((minPosition: UnityEngine.Vector2Int, maxPosition: UnityEngine.Vector2Int) => void);
    ClampToBounds: ((bounds: UnityEngine.RectInt) => void);
    Contains: ((position: UnityEngine.Vector2Int) => boolean);
    Overlaps: ((other: UnityEngine.RectInt) => boolean);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Equals: ((other: UnityEngine.RectInt) => boolean) | ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class RectInt_PositionEnumerator {
    constructor(min: UnityEngine.Vector2Int, max: UnityEngine.Vector2Int);
    Current: UnityEngine.Vector2Int;
    GetEnumerator: (() => UnityEngine.RectInt_PositionEnumerator);
    MoveNext: (() => boolean);
    Reset: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RectOffset {
    constructor();
    constructor(left: number, right: number, top: number, bottom: number);
    left: number;
    right: number;
    top: number;
    bottom: number;
    horizontal: number;
    vertical: number;
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Add: ((rect: UnityEngine.Rect) => UnityEngine.Rect);
    Remove: ((rect: UnityEngine.Rect) => UnityEngine.Rect);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class DynamicGI {
    constructor();
    static indirectScale: number;
    static updateThreshold: number;
    static materialUpdateTimeSlice: number;
    static synchronousMode: boolean;
    static isConverged: boolean;
    static SetEmissive: ((renderer: UnityEngine.Renderer, color: UnityEngine.Color) => void);
    static SetEnvironmentData: ((input: number[]) => void);
    static UpdateEnvironment: (() => void);
    static UpdateMaterials: ((renderer: UnityEngine.Renderer) => void) | ((renderer: UnityEngine.Object) => void) | ((renderer: UnityEngine.Object, x: number, y: number, width: number, height: number) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class LightingSettings {
    constructor();
    bakedGI: boolean;
    realtimeGI: boolean;
    realtimeEnvironmentLighting: boolean;
    autoGenerate: boolean;
    mixedBakeMode: UnityEngine.MixedLightingMode;
    albedoBoost: number;
    indirectScale: number;
    lightmapper: UnityEngine.LightingSettings_Lightmapper;
    lightmapMaxSize: number;
    lightmapResolution: number;
    lightmapPadding: number;
    compressLightmaps: boolean;
    ao: boolean;
    aoMaxDistance: number;
    aoExponentIndirect: number;
    aoExponentDirect: number;
    extractAO: boolean;
    directionalityMode: UnityEngine.LightmapsMode;
    exportTrainingData: boolean;
    trainingDataDestination: string;
    indirectResolution: number;
    finalGather: boolean;
    finalGatherRayCount: number;
    finalGatherFiltering: boolean;
    sampling: UnityEngine.LightingSettings_Sampling;
    directSampleCount: number;
    indirectSampleCount: number;
    bounces: number;
    maxBounces: number;
    russianRouletteStartBounce: number;
    minBounces: number;
    prioritizeView: boolean;
    filteringMode: UnityEngine.LightingSettings_FilterMode;
    denoiserTypeDirect: UnityEngine.LightingSettings_DenoiserType;
    denoiserTypeIndirect: UnityEngine.LightingSettings_DenoiserType;
    denoiserTypeAO: UnityEngine.LightingSettings_DenoiserType;
    filterTypeDirect: UnityEngine.LightingSettings_FilterType;
    filterTypeIndirect: UnityEngine.LightingSettings_FilterType;
    filterTypeAO: UnityEngine.LightingSettings_FilterType;
    filteringGaussRadiusDirect: number;
    filteringGaussRadiusIndirect: number;
    filteringGaussRadiusAO: number;
    filteringAtrousPositionSigmaDirect: number;
    filteringAtrousPositionSigmaIndirect: number;
    filteringAtrousPositionSigmaAO: number;
    environmentSampleCount: number;
    lightProbeSampleCountMultiplier: number;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum LightingSettings_Lightmapper {
    Enlighten = 0,
    ProgressiveCPU = 1,
    ProgressiveGPU = 2,
  }
  export enum LightingSettings_Sampling {
    Auto = 0,
    Fixed = 1,
  }
  export enum LightingSettings_FilterMode {
    None = 0,
    Auto = 1,
    Advanced = 2,
  }
  export enum LightingSettings_DenoiserType {
    None = 0,
    Optix = 1,
    OpenImage = 2,
    RadeonPro = 3,
  }
  export enum LightingSettings_FilterType {
    Gaussian = 0,
    ATrous = 1,
    None = 2,
  }
  export declare class Gizmos {
    constructor();
    static color: UnityEngine.Color;
    static matrix: UnityEngine.Matrix4x4;
    static exposure: UnityEngine.Texture;
    static probeSize: number;
    static DrawLine: ((from: UnityEngine.Vector3, to: UnityEngine.Vector3) => void);
    static DrawWireSphere: ((center: UnityEngine.Vector3, radius: number) => void);
    static DrawSphere: ((center: UnityEngine.Vector3, radius: number) => void);
    static DrawWireCube: ((center: UnityEngine.Vector3, size: UnityEngine.Vector3) => void);
    static DrawCube: ((center: UnityEngine.Vector3, size: UnityEngine.Vector3) => void);
    static DrawMesh: ((mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number) => void);
    static DrawWireMesh: ((mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number) => void);
    static DrawIcon: ((center: UnityEngine.Vector3, name: string, allowScaling: boolean) => void) | ((center: UnityEngine.Vector3, name: string, allowScaling: boolean, tint: UnityEngine.Color) => void) | ((center: UnityEngine.Vector3, name: string) => void);
    static DrawGUITexture: ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number) => void);
    static DrawFrustum: ((center: UnityEngine.Vector3, fov: number, maxRange: number, minRange: number, aspect: number) => void);
    static DrawRay: ((r: UnityEngine.Ray) => void) | ((from: UnityEngine.Vector3, direction: UnityEngine.Vector3) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class BillboardAsset {
    constructor();
    width: number;
    height: number;
    bottom: number;
    imageCount: number;
    vertexCount: number;
    indexCount: number;
    material: UnityEngine.Material;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetImageTexCoords: ((imageTexCoords: UnityEngine.Vector4[]) => void) | (() => UnityEngine.Vector4[]);
    SetImageTexCoords: ((imageTexCoords: UnityEngine.Vector4[]) => void) | ((imageTexCoords: UnityEngine.Vector4[]) => void);
    GetVertices: ((vertices: UnityEngine.Vector2[]) => void) | (() => UnityEngine.Vector2[]);
    SetVertices: ((vertices: UnityEngine.Vector2[]) => void) | ((vertices: UnityEngine.Vector2[]) => void);
    GetIndices: ((indices: System.UInt16[]) => void) | (() => System.UInt16[]);
    SetIndices: ((indices: System.UInt16[]) => void) | ((indices: System.UInt16[]) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class BillboardRenderer {
    constructor();
    billboard: UnityEngine.BillboardAsset;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CustomRenderTextureManager {
    static GetAllCustomRenderTextures: ((currentCustomRenderTextures: UnityEngine.CustomRenderTexture[]) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Display {
    renderingWidth: number;
    renderingHeight: number;
    systemWidth: number;
    systemHeight: number;
    colorBuffer: UnityEngine.RenderBuffer;
    depthBuffer: UnityEngine.RenderBuffer;
    active: boolean;
    requiresBlitToBackbuffer: boolean;
    requiresSrgbBlitToBackbuffer: boolean;
    static main: UnityEngine.Display;
    static displays: UnityEngine.Display[];
    Activate: (() => void) | ((width: number, height: number, refreshRate: number) => void);
    SetParams: ((width: number, height: number, x: number, y: number) => void);
    SetRenderingResolution: ((w: number, h: number) => void);
    static MultiDisplayLicense: (() => boolean);
    static RelativeMouseAt: ((inputMouseCoordinates: UnityEngine.Vector3) => UnityEngine.Vector3);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Display_DisplaysUpdatedDelegate {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum FullScreenMode {
    ExclusiveFullScreen = 0,
    FullScreenWindow = 1,
    MaximizedWindow = 2,
    Windowed = 3,
  }
  export declare class SleepTimeout {
    constructor();
    static NeverSleep: number;
    static SystemSetting: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Screen {
    constructor();
    static width: number;
    static height: number;
    static dpi: number;
    static currentResolution: UnityEngine.Resolution;
    static resolutions: UnityEngine.Resolution[];
    static fullScreen: boolean;
    static fullScreenMode: UnityEngine.FullScreenMode;
    static safeArea: UnityEngine.Rect;
    static cutouts: UnityEngine.Rect[];
    static autorotateToPortrait: boolean;
    static autorotateToPortraitUpsideDown: boolean;
    static autorotateToLandscapeLeft: boolean;
    static autorotateToLandscapeRight: boolean;
    static orientation: UnityEngine.ScreenOrientation;
    static sleepTimeout: number;
    static brightness: number;
    static GetResolution: UnityEngine.Resolution[];
    static showCursor: boolean;
    static lockCursor: boolean;
    static SetResolution: ((width: number, height: number, fullscreenMode: UnityEngine.FullScreenMode, preferredRefreshRate: number) => void) | ((width: number, height: number, fullscreenMode: UnityEngine.FullScreenMode) => void) | ((width: number, height: number, fullscreen: boolean, preferredRefreshRate: number) => void) | ((width: number, height: number, fullscreen: boolean) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class RenderBuffer {
    GetNativeRenderBufferPtr: (() => System.IntPtr);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum ComputeBufferMode {
    Immutable = 0,
    Dynamic = 1,
    Circular = 2,
    StreamOut = 3,
    SubUpdates = 4,
  }
  export declare class Graphics {
    constructor();
    static activeColorGamut: UnityEngine.ColorGamut;
    static activeTier: UnityEngine.Rendering.GraphicsTier;
    static preserveFramebufferAlpha: boolean;
    static minOpenGLESVersion: UnityEngine.Rendering.OpenGLESVersion;
    static activeColorBuffer: UnityEngine.RenderBuffer;
    static activeDepthBuffer: UnityEngine.RenderBuffer;
    static deviceName: string;
    static deviceVendor: string;
    static deviceVersion: string;
    static ClearRandomWriteTargets: (() => void);
    static ExecuteCommandBuffer: ((buffer: UnityEngine.Rendering.CommandBuffer) => void);
    static ExecuteCommandBufferAsync: ((buffer: UnityEngine.Rendering.CommandBuffer, queueType: UnityEngine.Rendering.ComputeQueueType) => void);
    static SetRenderTarget: ((rt: UnityEngine.RenderTexture, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number) => void) | ((colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number) => void) | ((colorBuffers: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer) => void) | ((setup: UnityEngine.RenderTargetSetup) => void) | ((rt: UnityEngine.RenderTexture) => void) | ((rt: UnityEngine.RenderTexture, mipLevel: number) => void) | ((rt: UnityEngine.RenderTexture, mipLevel: number, face: UnityEngine.CubemapFace) => void) | ((colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer) => void) | ((colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number) => void) | ((colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace) => void);
    static SetRandomWriteTarget: ((index: number, uav: UnityEngine.RenderTexture) => void) | ((index: number, uav: UnityEngine.ComputeBuffer, preserveCounterValue: boolean) => void) | ((index: number, uav: UnityEngine.GraphicsBuffer, preserveCounterValue: boolean) => void) | ((index: number, uav: UnityEngine.ComputeBuffer) => void) | ((index: number, uav: UnityEngine.GraphicsBuffer) => void);
    static CopyTexture: ((src: UnityEngine.Texture, dst: UnityEngine.Texture) => void) | ((src: UnityEngine.Texture, srcElement: number, dst: UnityEngine.Texture, dstElement: number) => void) | ((src: UnityEngine.Texture, srcElement: number, srcMip: number, dst: UnityEngine.Texture, dstElement: number, dstMip: number) => void) | ((src: UnityEngine.Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: UnityEngine.Texture, dstElement: number, dstMip: number, dstX: number, dstY: number) => void);
    static ConvertTexture: ((src: UnityEngine.Texture, dst: UnityEngine.Texture) => boolean) | ((src: UnityEngine.Texture, srcElement: number, dst: UnityEngine.Texture, dstElement: number) => boolean);
    static CreateAsyncGraphicsFence: ((stage: UnityEngine.Rendering.SynchronisationStage) => UnityEngine.Rendering.GraphicsFence) | (() => UnityEngine.Rendering.GraphicsFence);
    static CreateGraphicsFence: ((fenceType: UnityEngine.Rendering.GraphicsFenceType, stage: UnityEngine.Rendering.SynchronisationStageFlags) => UnityEngine.Rendering.GraphicsFence);
    static WaitOnAsyncGraphicsFence: ((fence: UnityEngine.Rendering.GraphicsFence) => void) | ((fence: UnityEngine.Rendering.GraphicsFence, stage: UnityEngine.Rendering.SynchronisationStage) => void);
    static DrawTexture: ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color, mat: UnityEngine.Material, pass: number) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material, pass: number) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material, pass: number) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material, pass: number) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color, mat: UnityEngine.Material) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material) => void) | ((screenRect: UnityEngine.Rect, texture: UnityEngine.Texture) => void);
    static DrawMeshNow: ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, materialIndex: number) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, materialIndex: number) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4) => void);
    static DrawMesh: ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, useLightProbes: boolean) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, materialIndex: number) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, materialIndex: number) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, useLightProbes: boolean) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) => void);
    static DrawMeshInstanced: ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[]) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[]) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) => void);
    static DrawMeshInstancedProcedural: ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, count: number, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number, camera?: UnityEngine.Camera, lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage, lightProbeProxyVolume?: UnityEngine.LightProbeProxyVolume) => void);
    static DrawMeshInstancedIndirect: ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset?: number, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number, camera?: UnityEngine.Camera, lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset?: number, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number, camera?: UnityEngine.Camera, lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage) => void);
    static DrawProceduralNow: ((topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount?: number) => void) | ((topology: UnityEngine.MeshTopology, indexBuffer: UnityEngine.GraphicsBuffer, indexCount: number, instanceCount?: number) => void);
    static DrawProceduralIndirectNow: ((topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset?: number) => void) | ((topology: UnityEngine.MeshTopology, indexBuffer: UnityEngine.GraphicsBuffer, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset?: number) => void) | ((topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset?: number) => void) | ((topology: UnityEngine.MeshTopology, indexBuffer: UnityEngine.GraphicsBuffer, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset?: number) => void);
    static DrawProcedural: ((material: UnityEngine.Material, bounds: UnityEngine.Bounds, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount?: number, camera?: UnityEngine.Camera, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number) => void) | ((material: UnityEngine.Material, bounds: UnityEngine.Bounds, topology: UnityEngine.MeshTopology, indexBuffer: UnityEngine.GraphicsBuffer, indexCount: number, instanceCount?: number, camera?: UnityEngine.Camera, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number) => void) | ((topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount?: number) => void);
    static DrawProceduralIndirect: ((material: UnityEngine.Material, bounds: UnityEngine.Bounds, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset?: number, camera?: UnityEngine.Camera, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number) => void) | ((material: UnityEngine.Material, bounds: UnityEngine.Bounds, topology: UnityEngine.MeshTopology, indexBuffer: UnityEngine.GraphicsBuffer, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset?: number, camera?: UnityEngine.Camera, properties?: UnityEngine.MaterialPropertyBlock, castShadows?: UnityEngine.Rendering.ShadowCastingMode, receiveShadows?: boolean, layer?: number) => void) | ((topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset?: number) => void);
    static Blit: ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, sourceDepthSlice: number, destDepthSlice: number) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2, sourceDepthSlice: number, destDepthSlice: number) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, pass: number) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, pass: number, destDepthSlice: number) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material) => void) | ((source: UnityEngine.Texture, mat: UnityEngine.Material, pass: number) => void) | ((source: UnityEngine.Texture, mat: UnityEngine.Material, pass: number, destDepthSlice: number) => void) | ((source: UnityEngine.Texture, mat: UnityEngine.Material) => void);
    static BlitMultiTap: ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, ...offsets: UnityEngine.Vector2[]) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, destDepthSlice: number, ...offsets: UnityEngine.Vector2[]) => void);
    static CreateGPUFence: ((stage: UnityEngine.Rendering.SynchronisationStage) => UnityEngine.Rendering.GPUFence) | (() => UnityEngine.Rendering.GPUFence);
    static WaitOnGPUFence: ((fence: UnityEngine.Rendering.GPUFence, stage: UnityEngine.Rendering.SynchronisationStage) => void) | ((fence: UnityEngine.Rendering.GPUFence) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GL {
    constructor();
    static wireframe: boolean;
    static sRGBWrite: boolean;
    static invertCulling: boolean;
    static modelview: UnityEngine.Matrix4x4;
    static TRIANGLES: number;
    static TRIANGLE_STRIP: number;
    static QUADS: number;
    static LINES: number;
    static LINE_STRIP: number;
    static Vertex3: ((x: number, y: number, z: number) => void);
    static Vertex: ((v: UnityEngine.Vector3) => void);
    static TexCoord3: ((x: number, y: number, z: number) => void);
    static TexCoord: ((v: UnityEngine.Vector3) => void);
    static TexCoord2: ((x: number, y: number) => void);
    static MultiTexCoord3: ((unit: number, x: number, y: number, z: number) => void);
    static MultiTexCoord: ((unit: number, v: UnityEngine.Vector3) => void);
    static MultiTexCoord2: ((unit: number, x: number, y: number) => void);
    static Color: ((c: UnityEngine.Color) => void);
    static Flush: (() => void);
    static RenderTargetBarrier: (() => void);
    static MultMatrix: ((m: UnityEngine.Matrix4x4) => void);
    static IssuePluginEvent: ((eventID: number) => void) | ((callback: System.IntPtr, eventID: number) => void);
    static SetRevertBackfacing: ((revertBackFaces: boolean) => void);
    static PushMatrix: (() => void);
    static PopMatrix: (() => void);
    static LoadIdentity: (() => void);
    static LoadOrtho: (() => void);
    static LoadPixelMatrix: (() => void) | ((left: number, right: number, bottom: number, top: number) => void);
    static LoadProjectionMatrix: ((mat: UnityEngine.Matrix4x4) => void);
    static InvalidateState: (() => void);
    static GetGPUProjectionMatrix: ((proj: UnityEngine.Matrix4x4, renderIntoTexture: boolean) => UnityEngine.Matrix4x4);
    static Begin: ((mode: number) => void);
    static End: (() => void);
    static Clear: ((clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color, depth: number) => void) | ((clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color) => void);
    static Viewport: ((pixelRect: UnityEngine.Rect) => void);
    static ClearWithSkybox: ((clearDepth: boolean, camera: UnityEngine.Camera) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ScalableBufferManager {
    static widthScaleFactor: number;
    static heightScaleFactor: number;
    static ResizeBuffers: ((widthScale: number, heightScale: number) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class FrameTiming {
    cpuTimePresentCalled: System.UInt64;
    cpuFrameTime: number;
    cpuTimeFrameComplete: System.UInt64;
    gpuFrameTime: number;
    heightScale: number;
    widthScale: number;
    syncInterval: System.UInt32;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class FrameTimingManager {
    static CaptureFrameTimings: (() => void);
    static GetLatestTimings: ((numFrames: System.UInt32, timings: UnityEngine.FrameTiming[]) => System.UInt32);
    static GetVSyncsPerSecond: (() => number);
    static GetGpuTimerFrequency: (() => System.UInt64);
    static GetCpuTimerFrequency: (() => System.UInt64);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class LightmapData {
    constructor();
    lightmapLight: UnityEngine.Texture2D;
    lightmapColor: UnityEngine.Texture2D;
    lightmapDir: UnityEngine.Texture2D;
    shadowMask: UnityEngine.Texture2D;
    lightmap: UnityEngine.Texture2D;
    lightmapFar: UnityEngine.Texture2D;
    lightmapNear: UnityEngine.Texture2D;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class LightmapSettings {
    static lightmaps: UnityEngine.LightmapData[];
    static lightmapsMode: UnityEngine.LightmapsMode;
    static lightProbes: UnityEngine.LightProbes;
    static lightmapsModeLegacy: UnityEngine.LightmapsModeLegacy;
    static bakedColorSpace: UnityEngine.ColorSpace;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LightProbes {
    positions: UnityEngine.Vector3[];
    bakedProbes: UnityEngine.Rendering.SphericalHarmonicsL2[];
    count: number;
    cellCount: number;
    coefficients: number[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static Tetrahedralize: (() => void);
    static TetrahedralizeAsync: (() => void);
    static CalculateInterpolatedLightAndOcclusionProbes: ((positions: UnityEngine.Vector3[], lightProbes: UnityEngine.Rendering.SphericalHarmonicsL2[], occlusionProbes: UnityEngine.Vector4[]) => void) | ((positions: UnityEngine.Vector3[], lightProbes: UnityEngine.Rendering.SphericalHarmonicsL2[], occlusionProbes: UnityEngine.Vector4[]) => void);
    GetInterpolatedLightProbe: ((position: UnityEngine.Vector3, renderer: UnityEngine.Renderer, coefficients: number[]) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum D3DHDRDisplayBitDepth {
    D3DHDRDisplayBitDepth10 = 0,
    D3DHDRDisplayBitDepth16 = 1,
  }
  export declare class HDROutputSettings {
    static main: UnityEngine.HDROutputSettings;
    active: boolean;
    available: boolean;
    automaticHDRTonemapping: boolean;
    displayColorGamut: UnityEngine.ColorGamut;
    format: UnityEngine.RenderTextureFormat;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    paperWhiteNits: number;
    maxFullFrameToneMapLuminance: number;
    maxToneMapLuminance: number;
    minToneMapLuminance: number;
    HDRModeChangeRequested: boolean;
    static displays: UnityEngine.HDROutputSettings[];
    RequestHDRModeChange: ((enabled: boolean) => void);
    static SetPaperWhiteInNits: ((paperWhite: number) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Resolution {
    width: number;
    height: number;
    refreshRate: number;
    ToString: (() => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class RenderTargetSetup {
    constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer, mip: number, face: UnityEngine.CubemapFace, colorLoad: UnityEngine.Rendering.RenderBufferLoadAction[], colorStore: UnityEngine.Rendering.RenderBufferStoreAction[], depthLoad: UnityEngine.Rendering.RenderBufferLoadAction, depthStore: UnityEngine.Rendering.RenderBufferStoreAction);
    constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer);
    constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer, mipLevel: number);
    constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace);
    constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number);
    constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer);
    constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer, mipLevel: number);
    constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer, mip: number, face: UnityEngine.CubemapFace);
    color: UnityEngine.RenderBuffer[];
    depth: UnityEngine.RenderBuffer;
    mipLevel: number;
    cubemapFace: UnityEngine.CubemapFace;
    depthSlice: number;
    colorLoad: UnityEngine.Rendering.RenderBufferLoadAction[];
    colorStore: UnityEngine.Rendering.RenderBufferStoreAction[];
    depthLoad: UnityEngine.Rendering.RenderBufferLoadAction;
    depthStore: UnityEngine.Rendering.RenderBufferStoreAction;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class QualitySettings {
    static currentLevel: UnityEngine.QualityLevel;
    static pixelLightCount: number;
    static shadows: UnityEngine.ShadowQuality;
    static shadowProjection: UnityEngine.ShadowProjection;
    static shadowCascades: number;
    static shadowDistance: number;
    static shadowResolution: UnityEngine.ShadowResolution;
    static shadowmaskMode: UnityEngine.ShadowmaskMode;
    static shadowNearPlaneOffset: number;
    static shadowCascade2Split: number;
    static shadowCascade4Split: UnityEngine.Vector3;
    static lodBias: number;
    static anisotropicFiltering: UnityEngine.AnisotropicFiltering;
    static masterTextureLimit: number;
    static maximumLODLevel: number;
    static particleRaycastBudget: number;
    static softParticles: boolean;
    static softVegetation: boolean;
    static vSyncCount: number;
    static antiAliasing: number;
    static asyncUploadTimeSlice: number;
    static asyncUploadBufferSize: number;
    static asyncUploadPersistentBuffer: boolean;
    static realtimeReflectionProbes: boolean;
    static billboardsFaceCameraPosition: boolean;
    static resolutionScalingFixedDPIFactor: number;
    static renderPipeline: UnityEngine.Rendering.RenderPipelineAsset;
    static blendWeights: UnityEngine.BlendWeights;
    static skinWeights: UnityEngine.SkinWeights;
    static streamingMipmapsActive: boolean;
    static streamingMipmapsMemoryBudget: number;
    static streamingMipmapsRenderersPerFrame: number;
    static streamingMipmapsMaxLevelReduction: number;
    static streamingMipmapsAddAllCameras: boolean;
    static streamingMipmapsMaxFileIORequests: number;
    static maxQueuedFrames: number;
    static names: string[];
    static desiredColorSpace: UnityEngine.ColorSpace;
    static activeColorSpace: UnityEngine.ColorSpace;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static IncreaseLevel: ((applyExpensiveChanges: boolean) => void) | (() => void);
    static DecreaseLevel: ((applyExpensiveChanges: boolean) => void) | (() => void);
    static SetQualityLevel: ((index: number) => void) | ((index: number, applyExpensiveChanges: boolean) => void);
    static GetRenderPipelineAssetAt: ((index: number) => UnityEngine.Rendering.RenderPipelineAsset);
    static GetQualityLevel: (() => number);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RendererExtensions {
    static UpdateGIMaterials: ((renderer: UnityEngine.Renderer) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Mesh {
    constructor();
    uv1: UnityEngine.Vector2[];
    indexFormat: UnityEngine.Rendering.IndexFormat;
    vertexBufferCount: number;
    blendShapeCount: number;
    bindposes: UnityEngine.Matrix4x4[];
    isReadable: boolean;
    vertexCount: number;
    subMeshCount: number;
    bounds: UnityEngine.Bounds;
    vertices: UnityEngine.Vector3[];
    normals: UnityEngine.Vector3[];
    tangents: UnityEngine.Vector4[];
    uv: UnityEngine.Vector2[];
    uv2: UnityEngine.Vector2[];
    uv3: UnityEngine.Vector2[];
    uv4: UnityEngine.Vector2[];
    uv5: UnityEngine.Vector2[];
    uv6: UnityEngine.Vector2[];
    uv7: UnityEngine.Vector2[];
    uv8: UnityEngine.Vector2[];
    colors: UnityEngine.Color[];
    colors32: UnityEngine.Color32[];
    vertexAttributeCount: number;
    triangles: number[];
    boneWeights: UnityEngine.BoneWeight[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SetIndexBufferParams: ((indexCount: number, format: UnityEngine.Rendering.IndexFormat) => void);
    GetVertexAttribute: ((index: number) => UnityEngine.Rendering.VertexAttributeDescriptor);
    HasVertexAttribute: ((attr: UnityEngine.Rendering.VertexAttribute) => boolean);
    GetVertexAttributeDimension: ((attr: UnityEngine.Rendering.VertexAttribute) => number);
    GetVertexAttributeFormat: ((attr: UnityEngine.Rendering.VertexAttribute) => UnityEngine.Rendering.VertexAttributeFormat);
    GetNativeVertexBufferPtr: ((index: number) => System.IntPtr);
    GetNativeIndexBufferPtr: (() => System.IntPtr);
    ClearBlendShapes: (() => void);
    GetBlendShapeName: ((shapeIndex: number) => string);
    GetBlendShapeIndex: ((blendShapeName: string) => number);
    GetBlendShapeFrameCount: ((shapeIndex: number) => number);
    GetBlendShapeFrameWeight: ((shapeIndex: number, frameIndex: number) => number);
    GetBlendShapeFrameVertices: ((shapeIndex: number, frameIndex: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]) => void);
    AddBlendShapeFrame: ((shapeName: string, frameWeight: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]) => void);
    SetBoneWeights: ((bonesPerVertex: Unity.Collections.NativeArray<System.Byte>, weights: Unity.Collections.NativeArray<UnityEngine.BoneWeight1>) => void);
    GetAllBoneWeights: (() => Unity.Collections.NativeArray<UnityEngine.BoneWeight1>);
    GetBonesPerVertex: (() => Unity.Collections.NativeArray<System.Byte>);
    SetSubMesh: ((index: number, desc: UnityEngine.Rendering.SubMeshDescriptor, flags?: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetSubMesh: ((index: number) => UnityEngine.Rendering.SubMeshDescriptor);
    MarkModified: (() => void);
    GetUVDistributionMetric: ((uvSetIndex: number) => number);
    GetVertices: ((vertices: UnityEngine.Vector3[]) => void);
    SetVertices: ((inVertices: UnityEngine.Vector3[]) => void) | ((inVertices: UnityEngine.Vector3[], start: number, length: number) => void) | ((inVertices: UnityEngine.Vector3[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((inVertices: UnityEngine.Vector3[]) => void) | ((inVertices: UnityEngine.Vector3[], start: number, length: number) => void) | ((inVertices: UnityEngine.Vector3[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetNormals: ((normals: UnityEngine.Vector3[]) => void);
    SetNormals: ((inNormals: UnityEngine.Vector3[]) => void) | ((inNormals: UnityEngine.Vector3[], start: number, length: number) => void) | ((inNormals: UnityEngine.Vector3[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((inNormals: UnityEngine.Vector3[]) => void) | ((inNormals: UnityEngine.Vector3[], start: number, length: number) => void) | ((inNormals: UnityEngine.Vector3[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetTangents: ((tangents: UnityEngine.Vector4[]) => void);
    SetTangents: ((inTangents: UnityEngine.Vector4[]) => void) | ((inTangents: UnityEngine.Vector4[], start: number, length: number) => void) | ((inTangents: UnityEngine.Vector4[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((inTangents: UnityEngine.Vector4[]) => void) | ((inTangents: UnityEngine.Vector4[], start: number, length: number) => void) | ((inTangents: UnityEngine.Vector4[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetColors: ((colors: UnityEngine.Color[]) => void) | ((colors: UnityEngine.Color32[]) => void);
    SetColors: ((inColors: UnityEngine.Color[]) => void) | ((inColors: UnityEngine.Color[], start: number, length: number) => void) | ((inColors: UnityEngine.Color[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((inColors: UnityEngine.Color[]) => void) | ((inColors: UnityEngine.Color[], start: number, length: number) => void) | ((inColors: UnityEngine.Color[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((inColors: UnityEngine.Color32[]) => void) | ((inColors: UnityEngine.Color32[], start: number, length: number) => void) | ((inColors: UnityEngine.Color32[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((inColors: UnityEngine.Color32[]) => void) | ((inColors: UnityEngine.Color32[], start: number, length: number) => void) | ((inColors: UnityEngine.Color32[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    SetUVs: ((channel: number, uvs: UnityEngine.Vector2[]) => void) | ((channel: number, uvs: UnityEngine.Vector3[]) => void) | ((channel: number, uvs: UnityEngine.Vector4[]) => void) | ((channel: number, uvs: UnityEngine.Vector2[], start: number, length: number) => void) | ((channel: number, uvs: UnityEngine.Vector2[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((channel: number, uvs: UnityEngine.Vector3[], start: number, length: number) => void) | ((channel: number, uvs: UnityEngine.Vector3[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((channel: number, uvs: UnityEngine.Vector4[], start: number, length: number) => void) | ((channel: number, uvs: UnityEngine.Vector4[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((channel: number, uvs: UnityEngine.Vector2[]) => void) | ((channel: number, uvs: UnityEngine.Vector3[]) => void) | ((channel: number, uvs: UnityEngine.Vector4[]) => void) | ((channel: number, uvs: UnityEngine.Vector2[], start: number, length: number) => void) | ((channel: number, uvs: UnityEngine.Vector2[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((channel: number, uvs: UnityEngine.Vector3[], start: number, length: number) => void) | ((channel: number, uvs: UnityEngine.Vector3[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((channel: number, uvs: UnityEngine.Vector4[], start: number, length: number) => void) | ((channel: number, uvs: UnityEngine.Vector4[], start: number, length: number, flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetUVs: ((channel: number, uvs: UnityEngine.Vector2[]) => void) | ((channel: number, uvs: UnityEngine.Vector3[]) => void) | ((channel: number, uvs: UnityEngine.Vector4[]) => void);
    GetVertexAttributes: (() => UnityEngine.Rendering.VertexAttributeDescriptor[]) | ((attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]) => number) | ((attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]) => number);
    SetVertexBufferParams: ((vertexCount: number, ...attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]) => void) | ((vertexCount: number, attributes: Unity.Collections.NativeArray<UnityEngine.Rendering.VertexAttributeDescriptor>) => void);
    static AcquireReadOnlyMeshData: ((mesh: UnityEngine.Mesh) => UnityEngine.Mesh_MeshDataArray) | ((meshes: UnityEngine.Mesh[]) => UnityEngine.Mesh_MeshDataArray) | ((meshes: UnityEngine.Mesh[]) => UnityEngine.Mesh_MeshDataArray);
    static AllocateWritableMeshData: ((meshCount: number) => UnityEngine.Mesh_MeshDataArray);
    static ApplyAndDisposeWritableMeshData: ((data: UnityEngine.Mesh_MeshDataArray, mesh: UnityEngine.Mesh, flags?: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((data: UnityEngine.Mesh_MeshDataArray, meshes: UnityEngine.Mesh[], flags?: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((data: UnityEngine.Mesh_MeshDataArray, meshes: UnityEngine.Mesh[], flags?: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetTriangles: ((submesh: number) => number[]) | ((submesh: number, applyBaseVertex: boolean) => number[]) | ((triangles: number[], submesh: number) => void) | ((triangles: number[], submesh: number, applyBaseVertex: boolean) => void) | ((triangles: System.UInt16[], submesh: number, applyBaseVertex?: boolean) => void);
    GetIndices: ((submesh: number) => number[]) | ((submesh: number, applyBaseVertex: boolean) => number[]) | ((indices: number[], submesh: number) => void) | ((indices: number[], submesh: number, applyBaseVertex: boolean) => void) | ((indices: System.UInt16[], submesh: number, applyBaseVertex?: boolean) => void);
    GetIndexStart: ((submesh: number) => System.UInt32);
    GetIndexCount: ((submesh: number) => System.UInt32);
    GetBaseVertex: ((submesh: number) => System.UInt32);
    SetTriangles: ((triangles: number[], submesh: number) => void) | ((triangles: number[], submesh: number, calculateBounds: boolean) => void) | ((triangles: number[], submesh: number, calculateBounds: boolean, baseVertex: number) => void) | ((triangles: number[], trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((triangles: System.UInt16[], submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((triangles: System.UInt16[], trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((triangles: number[], submesh: number) => void) | ((triangles: number[], submesh: number, calculateBounds: boolean) => void) | ((triangles: number[], submesh: number, calculateBounds: boolean, baseVertex: number) => void) | ((triangles: number[], trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((triangles: System.UInt16[], submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((triangles: System.UInt16[], trianglesStart: number, trianglesLength: number, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void);
    SetIndices: ((indices: number[], topology: UnityEngine.MeshTopology, submesh: number) => void) | ((indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: boolean) => void) | ((indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number) => void) | ((indices: number[], indicesStart: number, indicesLength: number, topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((indices: System.UInt16[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((indices: System.UInt16[], indicesStart: number, indicesLength: number, topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((indices: number[], indicesStart: number, indicesLength: number, topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((indices: System.UInt16[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void) | ((indices: System.UInt16[], indicesStart: number, indicesLength: number, topology: UnityEngine.MeshTopology, submesh: number, calculateBounds?: boolean, baseVertex?: number) => void);
    SetSubMeshes: ((desc: UnityEngine.Rendering.SubMeshDescriptor[], start: number, count: number, flags?: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((desc: UnityEngine.Rendering.SubMeshDescriptor[], flags?: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((desc: UnityEngine.Rendering.SubMeshDescriptor[], start: number, count: number, flags?: UnityEngine.Rendering.MeshUpdateFlags) => void) | ((desc: UnityEngine.Rendering.SubMeshDescriptor[], flags?: UnityEngine.Rendering.MeshUpdateFlags) => void);
    GetBindposes: ((bindposes: UnityEngine.Matrix4x4[]) => void);
    GetBoneWeights: ((boneWeights: UnityEngine.BoneWeight[]) => void);
    Clear: ((keepVertexLayout: boolean) => void) | (() => void);
    RecalculateBounds: (() => void) | ((flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    RecalculateNormals: (() => void) | ((flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    RecalculateTangents: (() => void) | ((flags: UnityEngine.Rendering.MeshUpdateFlags) => void);
    RecalculateUVDistributionMetric: ((uvSetIndex: number, uvAreaThreshold?: number) => void);
    RecalculateUVDistributionMetrics: ((uvAreaThreshold?: number) => void);
    MarkDynamic: (() => void);
    UploadMeshData: ((markNoLongerReadable: boolean) => void);
    Optimize: (() => void);
    OptimizeIndexBuffers: (() => void);
    OptimizeReorderVertexBuffer: (() => void);
    GetTopology: ((submesh: number) => UnityEngine.MeshTopology);
    CombineMeshes: ((combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean, useMatrices: boolean, hasLightmapData: boolean) => void) | ((combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean, useMatrices: boolean) => void) | ((combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean) => void) | ((combine: UnityEngine.CombineInstance[]) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Mesh_MeshData {
    vertexCount: number;
    vertexBufferCount: number;
    indexFormat: UnityEngine.Rendering.IndexFormat;
    subMeshCount: number;
    HasVertexAttribute: ((attr: UnityEngine.Rendering.VertexAttribute) => boolean);
    GetVertexAttributeDimension: ((attr: UnityEngine.Rendering.VertexAttribute) => number);
    GetVertexAttributeFormat: ((attr: UnityEngine.Rendering.VertexAttribute) => UnityEngine.Rendering.VertexAttributeFormat);
    GetVertices: ((outVertices: Unity.Collections.NativeArray<UnityEngine.Vector3>) => void);
    GetNormals: ((outNormals: Unity.Collections.NativeArray<UnityEngine.Vector3>) => void);
    GetTangents: ((outTangents: Unity.Collections.NativeArray<UnityEngine.Vector4>) => void);
    GetColors: ((outColors: Unity.Collections.NativeArray<UnityEngine.Color>) => void) | ((outColors: Unity.Collections.NativeArray<UnityEngine.Color32>) => void);
    GetUVs: ((channel: number, outUVs: Unity.Collections.NativeArray<UnityEngine.Vector2>) => void) | ((channel: number, outUVs: Unity.Collections.NativeArray<UnityEngine.Vector3>) => void) | ((channel: number, outUVs: Unity.Collections.NativeArray<UnityEngine.Vector4>) => void);
    SetVertexBufferParams: ((vertexCount: number, ...attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]) => void) | ((vertexCount: number, attributes: Unity.Collections.NativeArray<UnityEngine.Rendering.VertexAttributeDescriptor>) => void);
    SetIndexBufferParams: ((indexCount: number, format: UnityEngine.Rendering.IndexFormat) => void);
    GetIndices: ((outIndices: Unity.Collections.NativeArray<System.UInt16>, submesh: number, applyBaseVertex?: boolean) => void) | ((outIndices: Unity.Collections.NativeArray<number>, submesh: number, applyBaseVertex?: boolean) => void);
    GetSubMesh: ((index: number) => UnityEngine.Rendering.SubMeshDescriptor);
    SetSubMesh: ((index: number, desc: UnityEngine.Rendering.SubMeshDescriptor, flags?: UnityEngine.Rendering.MeshUpdateFlags) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Mesh_MeshDataArray {
    Length: number;
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Renderer {
    constructor();
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Projector {
    constructor();
    isOrthoGraphic: boolean;
    orthoGraphicSize: number;
    nearClipPlane: number;
    farClipPlane: number;
    fieldOfView: number;
    aspectRatio: number;
    orthographic: boolean;
    orthographicSize: number;
    ignoreLayers: number;
    material: UnityEngine.Material;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Shader {
    static globalShaderHardwareTier: UnityEngine.Rendering.ShaderHardwareTier;
    maximumLOD: number;
    static globalMaximumLOD: number;
    isSupported: boolean;
    static globalRenderPipeline: string;
    renderQueue: number;
    passCount: number;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static SetGlobalTexGenMode: ((propertyName: string, mode: UnityEngine.TexGenMode) => void);
    static SetGlobalTextureMatrixName: ((propertyName: string, matrixName: string) => void);
    static Find: ((name: string) => UnityEngine.Shader);
    static EnableKeyword: ((keyword: string) => void);
    static DisableKeyword: ((keyword: string) => void);
    static IsKeywordEnabled: ((keyword: string) => boolean);
    static WarmupAllShaders: (() => void);
    static PropertyToID: ((name: string) => number);
    GetDependency: ((name: string) => UnityEngine.Shader);
    FindPassTagValue: ((passIndex: number, tagName: UnityEngine.Rendering.ShaderTagId) => UnityEngine.Rendering.ShaderTagId);
    static SetGlobalFloat: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    static SetGlobalInt: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    static SetGlobalVector: ((name: string, value: UnityEngine.Vector4) => void) | ((nameID: number, value: UnityEngine.Vector4) => void);
    static SetGlobalColor: ((name: string, value: UnityEngine.Color) => void) | ((nameID: number, value: UnityEngine.Color) => void);
    static SetGlobalMatrix: ((name: string, value: UnityEngine.Matrix4x4) => void) | ((nameID: number, value: UnityEngine.Matrix4x4) => void);
    static SetGlobalTexture: ((name: string, value: UnityEngine.Texture) => void) | ((nameID: number, value: UnityEngine.Texture) => void) | ((name: string, value: UnityEngine.RenderTexture, element: UnityEngine.Rendering.RenderTextureSubElement) => void) | ((nameID: number, value: UnityEngine.RenderTexture, element: UnityEngine.Rendering.RenderTextureSubElement) => void);
    static SetGlobalBuffer: ((name: string, value: UnityEngine.ComputeBuffer) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer) => void) | ((name: string, value: UnityEngine.GraphicsBuffer) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer) => void);
    static SetGlobalConstantBuffer: ((name: string, value: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((name: string, value: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
    static SetGlobalFloatArray: ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void) | ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void);
    static SetGlobalVectorArray: ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void);
    static SetGlobalMatrixArray: ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void);
    static GetGlobalFloat: ((name: string) => number) | ((nameID: number) => number);
    static GetGlobalInt: ((name: string) => number) | ((nameID: number) => number);
    static GetGlobalVector: ((name: string) => UnityEngine.Vector4) | ((nameID: number) => UnityEngine.Vector4);
    static GetGlobalColor: ((name: string) => UnityEngine.Color) | ((nameID: number) => UnityEngine.Color);
    static GetGlobalMatrix: ((name: string) => UnityEngine.Matrix4x4) | ((nameID: number) => UnityEngine.Matrix4x4);
    static GetGlobalTexture: ((name: string) => UnityEngine.Texture) | ((nameID: number) => UnityEngine.Texture);
    static GetGlobalFloatArray: ((name: string) => number[]) | ((nameID: number) => number[]) | ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void);
    static GetGlobalVectorArray: ((name: string) => UnityEngine.Vector4[]) | ((nameID: number) => UnityEngine.Vector4[]) | ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void);
    static GetGlobalMatrixArray: ((name: string) => UnityEngine.Matrix4x4[]) | ((nameID: number) => UnityEngine.Matrix4x4[]) | ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void);
    GetPropertyCount: (() => number);
    FindPropertyIndex: ((propertyName: string) => number);
    GetPropertyName: ((propertyIndex: number) => string);
    GetPropertyNameId: ((propertyIndex: number) => number);
    GetPropertyType: ((propertyIndex: number) => UnityEngine.Rendering.ShaderPropertyType);
    GetPropertyDescription: ((propertyIndex: number) => string);
    GetPropertyFlags: ((propertyIndex: number) => UnityEngine.Rendering.ShaderPropertyFlags);
    GetPropertyAttributes: ((propertyIndex: number) => string[]);
    GetPropertyDefaultFloatValue: ((propertyIndex: number) => number);
    GetPropertyDefaultVectorValue: ((propertyIndex: number) => UnityEngine.Vector4);
    GetPropertyRangeLimits: ((propertyIndex: number) => UnityEngine.Vector2);
    GetPropertyTextureDimension: ((propertyIndex: number) => UnityEngine.Rendering.TextureDimension);
    GetPropertyTextureDefaultName: ((propertyIndex: number) => string);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum LightmapsModeLegacy {
    Single = 0,
    Dual = 1,
    Directional = 2,
  }
  export declare class TrailRenderer {
    constructor();
    numPositions: number;
    time: number;
    startWidth: number;
    endWidth: number;
    widthMultiplier: number;
    autodestruct: boolean;
    emitting: boolean;
    numCornerVertices: number;
    numCapVertices: number;
    minVertexDistance: number;
    startColor: UnityEngine.Color;
    endColor: UnityEngine.Color;
    positionCount: number;
    shadowBias: number;
    generateLightingData: boolean;
    textureMode: UnityEngine.LineTextureMode;
    alignment: UnityEngine.LineAlignment;
    widthCurve: UnityEngine.AnimationCurve;
    colorGradient: UnityEngine.Gradient;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SetPosition: ((index: number, position: UnityEngine.Vector3) => void);
    GetPosition: ((index: number) => UnityEngine.Vector3);
    Clear: (() => void);
    BakeMesh: ((mesh: UnityEngine.Mesh, useTransform?: boolean) => void) | ((mesh: UnityEngine.Mesh, camera: UnityEngine.Camera, useTransform?: boolean) => void);
    GetPositions: ((positions: UnityEngine.Vector3[]) => number) | ((positions: Unity.Collections.NativeArray<UnityEngine.Vector3>) => number) | ((positions: Unity.Collections.NativeSlice<UnityEngine.Vector3>) => number);
    SetPositions: ((positions: UnityEngine.Vector3[]) => void) | ((positions: Unity.Collections.NativeArray<UnityEngine.Vector3>) => void) | ((positions: Unity.Collections.NativeSlice<UnityEngine.Vector3>) => void);
    AddPosition: ((position: UnityEngine.Vector3) => void);
    AddPositions: ((positions: UnityEngine.Vector3[]) => void) | ((positions: Unity.Collections.NativeArray<UnityEngine.Vector3>) => void) | ((positions: Unity.Collections.NativeSlice<UnityEngine.Vector3>) => void);
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LineRenderer {
    constructor();
    numPositions: number;
    startWidth: number;
    endWidth: number;
    widthMultiplier: number;
    numCornerVertices: number;
    numCapVertices: number;
    useWorldSpace: boolean;
    loop: boolean;
    startColor: UnityEngine.Color;
    endColor: UnityEngine.Color;
    positionCount: number;
    shadowBias: number;
    generateLightingData: boolean;
    textureMode: UnityEngine.LineTextureMode;
    alignment: UnityEngine.LineAlignment;
    widthCurve: UnityEngine.AnimationCurve;
    colorGradient: UnityEngine.Gradient;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SetWidth: ((start: number, end: number) => void);
    SetColors: ((start: UnityEngine.Color, end: UnityEngine.Color) => void);
    SetVertexCount: ((count: number) => void);
    SetPosition: ((index: number, position: UnityEngine.Vector3) => void);
    GetPosition: ((index: number) => UnityEngine.Vector3);
    Simplify: ((tolerance: number) => void);
    BakeMesh: ((mesh: UnityEngine.Mesh, useTransform?: boolean) => void) | ((mesh: UnityEngine.Mesh, camera: UnityEngine.Camera, useTransform?: boolean) => void);
    GetPositions: ((positions: UnityEngine.Vector3[]) => number) | ((positions: Unity.Collections.NativeArray<UnityEngine.Vector3>) => number) | ((positions: Unity.Collections.NativeSlice<UnityEngine.Vector3>) => number);
    SetPositions: ((positions: UnityEngine.Vector3[]) => void) | ((positions: Unity.Collections.NativeArray<UnityEngine.Vector3>) => void) | ((positions: Unity.Collections.NativeSlice<UnityEngine.Vector3>) => void);
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class MaterialPropertyBlock {
    constructor();
    isEmpty: boolean;
    AddFloat: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    AddVector: ((name: string, value: UnityEngine.Vector4) => void) | ((nameID: number, value: UnityEngine.Vector4) => void);
    AddColor: ((name: string, value: UnityEngine.Color) => void) | ((nameID: number, value: UnityEngine.Color) => void);
    AddMatrix: ((name: string, value: UnityEngine.Matrix4x4) => void) | ((nameID: number, value: UnityEngine.Matrix4x4) => void);
    AddTexture: ((name: string, value: UnityEngine.Texture) => void) | ((nameID: number, value: UnityEngine.Texture) => void);
    Clear: (() => void);
    SetFloat: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    SetInt: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    SetVector: ((name: string, value: UnityEngine.Vector4) => void) | ((nameID: number, value: UnityEngine.Vector4) => void);
    SetColor: ((name: string, value: UnityEngine.Color) => void) | ((nameID: number, value: UnityEngine.Color) => void);
    SetMatrix: ((name: string, value: UnityEngine.Matrix4x4) => void) | ((nameID: number, value: UnityEngine.Matrix4x4) => void);
    SetBuffer: ((name: string, value: UnityEngine.ComputeBuffer) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer) => void) | ((name: string, value: UnityEngine.GraphicsBuffer) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer) => void);
    SetTexture: ((name: string, value: UnityEngine.Texture) => void) | ((nameID: number, value: UnityEngine.Texture) => void) | ((name: string, value: UnityEngine.RenderTexture, element: UnityEngine.Rendering.RenderTextureSubElement) => void) | ((nameID: number, value: UnityEngine.RenderTexture, element: UnityEngine.Rendering.RenderTextureSubElement) => void);
    SetConstantBuffer: ((name: string, value: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((name: string, value: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
    SetFloatArray: ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void) | ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void);
    SetVectorArray: ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void);
    SetMatrixArray: ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void);
    GetFloat: ((name: string) => number) | ((nameID: number) => number);
    GetInt: ((name: string) => number) | ((nameID: number) => number);
    GetVector: ((name: string) => UnityEngine.Vector4) | ((nameID: number) => UnityEngine.Vector4);
    GetColor: ((name: string) => UnityEngine.Color) | ((nameID: number) => UnityEngine.Color);
    GetMatrix: ((name: string) => UnityEngine.Matrix4x4) | ((nameID: number) => UnityEngine.Matrix4x4);
    GetTexture: ((name: string) => UnityEngine.Texture) | ((nameID: number) => UnityEngine.Texture);
    GetFloatArray: ((name: string) => number[]) | ((nameID: number) => number[]) | ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void);
    GetVectorArray: ((name: string) => UnityEngine.Vector4[]) | ((nameID: number) => UnityEngine.Vector4[]) | ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void);
    GetMatrixArray: ((name: string) => UnityEngine.Matrix4x4[]) | ((nameID: number) => UnityEngine.Matrix4x4[]) | ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void);
    CopySHCoefficientArraysFrom: ((lightProbes: UnityEngine.Rendering.SphericalHarmonicsL2[]) => void) | ((lightProbes: UnityEngine.Rendering.SphericalHarmonicsL2[]) => void) | ((lightProbes: UnityEngine.Rendering.SphericalHarmonicsL2[], sourceStart: number, destStart: number, count: number) => void) | ((lightProbes: UnityEngine.Rendering.SphericalHarmonicsL2[], sourceStart: number, destStart: number, count: number) => void);
    CopyProbeOcclusionArrayFrom: ((occlusionProbes: UnityEngine.Vector4[]) => void) | ((occlusionProbes: UnityEngine.Vector4[]) => void) | ((occlusionProbes: UnityEngine.Vector4[], sourceStart: number, destStart: number, count: number) => void) | ((occlusionProbes: UnityEngine.Vector4[], sourceStart: number, destStart: number, count: number) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class RenderSettings {
    static ambientSkyboxAmount: number;
    static fog: boolean;
    static fogStartDistance: number;
    static fogEndDistance: number;
    static fogMode: UnityEngine.FogMode;
    static fogColor: UnityEngine.Color;
    static fogDensity: number;
    static ambientMode: UnityEngine.Rendering.AmbientMode;
    static ambientSkyColor: UnityEngine.Color;
    static ambientEquatorColor: UnityEngine.Color;
    static ambientGroundColor: UnityEngine.Color;
    static ambientIntensity: number;
    static ambientLight: UnityEngine.Color;
    static subtractiveShadowColor: UnityEngine.Color;
    static skybox: UnityEngine.Material;
    static sun: UnityEngine.Light;
    static ambientProbe: UnityEngine.Rendering.SphericalHarmonicsL2;
    static customReflection: UnityEngine.Cubemap;
    static reflectionIntensity: number;
    static reflectionBounces: number;
    static defaultReflectionMode: UnityEngine.Rendering.DefaultReflectionMode;
    static defaultReflectionResolution: number;
    static haloStrength: number;
    static flareStrength: number;
    static flareFadeSpeed: number;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Material {
    constructor(shader: UnityEngine.Shader);
    constructor(source: UnityEngine.Material);
    constructor(contents: string);
    shader: UnityEngine.Shader;
    color: UnityEngine.Color;
    mainTexture: UnityEngine.Texture;
    mainTextureOffset: UnityEngine.Vector2;
    mainTextureScale: UnityEngine.Vector2;
    renderQueue: number;
    globalIlluminationFlags: UnityEngine.MaterialGlobalIlluminationFlags;
    doubleSidedGI: boolean;
    enableInstancing: boolean;
    passCount: number;
    shaderKeywords: string[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static Create: ((scriptContents: string) => UnityEngine.Material);
    HasProperty: ((nameID: number) => boolean) | ((name: string) => boolean);
    EnableKeyword: ((keyword: string) => void);
    DisableKeyword: ((keyword: string) => void);
    IsKeywordEnabled: ((keyword: string) => boolean);
    SetShaderPassEnabled: ((passName: string, enabled: boolean) => void);
    GetShaderPassEnabled: ((passName: string) => boolean);
    GetPassName: ((pass: number) => string);
    FindPass: ((passName: string) => number);
    SetOverrideTag: ((tag: string, val: string) => void);
    GetTag: ((tag: string, searchFallbacks: boolean, defaultValue: string) => string) | ((tag: string, searchFallbacks: boolean) => string);
    Lerp: ((start: UnityEngine.Material, end: UnityEngine.Material, t: number) => void);
    SetPass: ((pass: number) => boolean);
    CopyPropertiesFromMaterial: ((mat: UnityEngine.Material) => void);
    ComputeCRC: (() => number);
    GetTexturePropertyNames: (() => string[]) | ((outNames: string[]) => void);
    GetTexturePropertyNameIDs: (() => number[]) | ((outNames: number[]) => void);
    SetFloat: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    SetInt: ((name: string, value: number) => void) | ((nameID: number, value: number) => void);
    SetColor: ((name: string, value: UnityEngine.Color) => void) | ((nameID: number, value: UnityEngine.Color) => void);
    SetVector: ((name: string, value: UnityEngine.Vector4) => void) | ((nameID: number, value: UnityEngine.Vector4) => void);
    SetMatrix: ((name: string, value: UnityEngine.Matrix4x4) => void) | ((nameID: number, value: UnityEngine.Matrix4x4) => void);
    SetTexture: ((name: string, value: UnityEngine.Texture) => void) | ((nameID: number, value: UnityEngine.Texture) => void) | ((name: string, value: UnityEngine.RenderTexture, element: UnityEngine.Rendering.RenderTextureSubElement) => void) | ((nameID: number, value: UnityEngine.RenderTexture, element: UnityEngine.Rendering.RenderTextureSubElement) => void);
    SetBuffer: ((name: string, value: UnityEngine.ComputeBuffer) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer) => void) | ((name: string, value: UnityEngine.GraphicsBuffer) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer) => void);
    SetConstantBuffer: ((name: string, value: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((name: string, value: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
    SetFloatArray: ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void) | ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void);
    SetColorArray: ((name: string, values: UnityEngine.Color[]) => void) | ((nameID: number, values: UnityEngine.Color[]) => void) | ((name: string, values: UnityEngine.Color[]) => void) | ((nameID: number, values: UnityEngine.Color[]) => void);
    SetVectorArray: ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void);
    SetMatrixArray: ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void);
    GetFloat: ((name: string) => number) | ((nameID: number) => number);
    GetInt: ((name: string) => number) | ((nameID: number) => number);
    GetColor: ((name: string) => UnityEngine.Color) | ((nameID: number) => UnityEngine.Color);
    GetVector: ((name: string) => UnityEngine.Vector4) | ((nameID: number) => UnityEngine.Vector4);
    GetMatrix: ((name: string) => UnityEngine.Matrix4x4) | ((nameID: number) => UnityEngine.Matrix4x4);
    GetTexture: ((name: string) => UnityEngine.Texture) | ((nameID: number) => UnityEngine.Texture);
    GetFloatArray: ((name: string) => number[]) | ((nameID: number) => number[]) | ((name: string, values: number[]) => void) | ((nameID: number, values: number[]) => void);
    GetColorArray: ((name: string) => UnityEngine.Color[]) | ((nameID: number) => UnityEngine.Color[]) | ((name: string, values: UnityEngine.Color[]) => void) | ((nameID: number, values: UnityEngine.Color[]) => void);
    GetVectorArray: ((name: string) => UnityEngine.Vector4[]) | ((nameID: number) => UnityEngine.Vector4[]) | ((name: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void);
    GetMatrixArray: ((name: string) => UnityEngine.Matrix4x4[]) | ((nameID: number) => UnityEngine.Matrix4x4[]) | ((name: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void);
    SetTextureOffset: ((name: string, value: UnityEngine.Vector2) => void) | ((nameID: number, value: UnityEngine.Vector2) => void);
    SetTextureScale: ((name: string, value: UnityEngine.Vector2) => void) | ((nameID: number, value: UnityEngine.Vector2) => void);
    GetTextureOffset: ((name: string) => UnityEngine.Vector2) | ((nameID: number) => UnityEngine.Vector2);
    GetTextureScale: ((name: string) => UnityEngine.Vector2) | ((nameID: number) => UnityEngine.Vector2);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class GraphicsBuffer {
    constructor(target: UnityEngine.GraphicsBuffer_Target, count: number, stride: number);
    count: number;
    stride: number;
    Dispose: (() => void);
    Release: (() => void);
    IsValid: (() => boolean);
    SetData: ((data: System.Array) => void) | ((data: System.Array, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number) => void);
    GetData: ((data: System.Array) => void) | ((data: System.Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number) => void);
    GetNativeBufferPtr: (() => System.IntPtr);
    SetCounterValue: ((counterValue: System.UInt32) => void);
    static CopyCount: ((src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number) => void) | ((src: UnityEngine.GraphicsBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number) => void) | ((src: UnityEngine.ComputeBuffer, dst: UnityEngine.GraphicsBuffer, dstOffsetBytes: number) => void) | ((src: UnityEngine.GraphicsBuffer, dst: UnityEngine.GraphicsBuffer, dstOffsetBytes: number) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum GraphicsBuffer_Target {
    Vertex = 1,
    Index = 2,
    Structured = 16,
    Raw = 32,
    Append = 64,
    Counter = 128,
    IndirectArguments = 256,
    Constant = 512,
  }
  export declare class OcclusionPortal {
    constructor();
    open: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class OcclusionArea {
    constructor();
    center: UnityEngine.Vector3;
    size: UnityEngine.Vector3;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Flare {
    constructor();
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LensFlare {
    constructor();
    brightness: number;
    fadeSpeed: number;
    color: UnityEngine.Color;
    flare: UnityEngine.Flare;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LightBakingOutput {
    probeOcclusionLightIndex: number;
    occlusionMaskChannel: number;
    lightmapBakeType: UnityEngine.LightmapBakeType;
    mixedLightingMode: UnityEngine.MixedLightingMode;
    isBaked: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum LightShadowCasterMode {
    Default = 0,
    NonLightmappedOnly = 1,
    Everything = 2,
  }
  export declare class Light {
    constructor();
    type: UnityEngine.LightType;
    shape: UnityEngine.LightShape;
    spotAngle: number;
    innerSpotAngle: number;
    color: UnityEngine.Color;
    colorTemperature: number;
    useColorTemperature: boolean;
    intensity: number;
    bounceIntensity: number;
    useBoundingSphereOverride: boolean;
    boundingSphereOverride: UnityEngine.Vector4;
    useViewFrustumForShadowCasterCull: boolean;
    shadowCustomResolution: number;
    shadowBias: number;
    shadowNormalBias: number;
    shadowNearPlane: number;
    useShadowMatrixOverride: boolean;
    shadowMatrixOverride: UnityEngine.Matrix4x4;
    range: number;
    flare: UnityEngine.Flare;
    bakingOutput: UnityEngine.LightBakingOutput;
    cullingMask: number;
    renderingLayerMask: number;
    lightShadowCasterMode: UnityEngine.LightShadowCasterMode;
    shadowRadius: number;
    shadowAngle: number;
    shadows: UnityEngine.LightShadows;
    shadowStrength: number;
    shadowResolution: UnityEngine.Rendering.LightShadowResolution;
    shadowSoftness: number;
    shadowSoftnessFade: number;
    layerShadowCullDistances: number[];
    cookieSize: number;
    cookie: UnityEngine.Texture;
    renderMode: UnityEngine.LightRenderMode;
    bakedIndex: number;
    areaSize: UnityEngine.Vector2;
    lightmapBakeType: UnityEngine.LightmapBakeType;
    commandBufferCount: number;
    static pixelLightCount: number;
    shadowConstantBias: number;
    shadowObjectSizeBias: number;
    attenuate: boolean;
    lightmappingMode: UnityEngine.LightmappingMode;
    isBaked: boolean;
    alreadyLightmapped: boolean;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Reset: (() => void);
    SetLightDirty: (() => void);
    AddCommandBuffer: ((evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer) => void) | ((evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer, shadowPassMask: UnityEngine.Rendering.ShadowMapPass) => void);
    AddCommandBufferAsync: ((evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer, queueType: UnityEngine.Rendering.ComputeQueueType) => void) | ((evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer, shadowPassMask: UnityEngine.Rendering.ShadowMapPass, queueType: UnityEngine.Rendering.ComputeQueueType) => void);
    RemoveCommandBuffer: ((evt: UnityEngine.Rendering.LightEvent, buffer: UnityEngine.Rendering.CommandBuffer) => void);
    RemoveCommandBuffers: ((evt: UnityEngine.Rendering.LightEvent) => void);
    RemoveAllCommandBuffers: (() => void);
    GetCommandBuffers: ((evt: UnityEngine.Rendering.LightEvent) => UnityEngine.Rendering.CommandBuffer[]);
    static GetLights: ((type: UnityEngine.LightType, layer: number) => UnityEngine.Light[]);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Skybox {
    constructor();
    material: UnityEngine.Material;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class MeshFilter {
    constructor();
    sharedMesh: UnityEngine.Mesh;
    mesh: UnityEngine.Mesh;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum RenderingPath {
    UsePlayerSettings = -1,
    VertexLit = 0,
    Forward = 1,
    DeferredLighting = 2,
    DeferredShading = 3,
  }
  export enum TransparencySortMode {
    Default = 0,
    Perspective = 1,
    Orthographic = 2,
    CustomAxis = 3,
  }
  export enum StereoTargetEyeMask {
    None = 0,
    Left = 1,
    Right = 2,
    Both = 3,
  }
  export enum CameraType {
    Game = 1,
    SceneView = 2,
    Preview = 4,
    VR = 8,
    Reflection = 16,
  }
  export enum ComputeBufferType {
    Default = 0,
    Raw = 1,
    Append = 2,
    Counter = 4,
    Constant = 8,
    Structured = 16,
    DrawIndirect = 256,
    IndirectArguments = 256,
    GPUMemory = 512,
  }
  export enum LightType {
    Spot = 0,
    Directional = 1,
    Point = 2,
    Area = 3,
    Rectangle = 3,
    Disc = 4,
  }
  export enum LightShape {
    Cone = 0,
    Pyramid = 1,
    Box = 2,
  }
  export enum LightRenderMode {
    Auto = 0,
    ForcePixel = 1,
    ForceVertex = 2,
  }
  export enum LightShadows {
    None = 0,
    Hard = 1,
    Soft = 2,
  }
  export enum FogMode {
    Linear = 1,
    Exponential = 2,
    ExponentialSquared = 3,
  }
  export enum LightmapBakeType {
    Realtime = 4,
    Baked = 2,
    Mixed = 1,
  }
  export enum MixedLightingMode {
    IndirectOnly = 0,
    Shadowmask = 2,
    Subtractive = 1,
  }
  export enum ReceiveGI {
    Lightmaps = 1,
    LightProbes = 2,
  }
  export enum QualityLevel {
    Fastest = 0,
    Fast = 1,
    Simple = 2,
    Good = 3,
    Beautiful = 4,
    Fantastic = 5,
  }
  export enum ShadowProjection {
    CloseFit = 0,
    StableFit = 1,
  }
  export enum ShadowQuality {
    Disable = 0,
    HardOnly = 1,
    All = 2,
  }
  export enum ShadowResolution {
    Low = 0,
    Medium = 1,
    High = 2,
    VeryHigh = 3,
  }
  export enum ShadowmaskMode {
    Shadowmask = 0,
    DistanceShadowmask = 1,
  }
  export enum CameraClearFlags {
    Skybox = 1,
    Color = 2,
    SolidColor = 2,
    Depth = 3,
    Nothing = 4,
  }
  export enum DepthTextureMode {
    None = 0,
    Depth = 1,
    DepthNormals = 2,
    MotionVectors = 4,
  }
  export enum TexGenMode {
    None = 0,
    SphereMap = 1,
    Object = 2,
    EyeLinear = 3,
    CubeReflect = 4,
    CubeNormal = 5,
  }
  export enum AnisotropicFiltering {
    Disable = 0,
    Enable = 1,
    ForceEnable = 2,
  }
  export enum BlendWeights {
    OneBone = 1,
    TwoBones = 2,
    FourBones = 4,
  }
  export enum SkinWeights {
    OneBone = 1,
    TwoBones = 2,
    FourBones = 4,
    Unlimited = 255,
  }
  export enum MeshTopology {
    Triangles = 0,
    Quads = 2,
    Lines = 3,
    LineStrip = 4,
    Points = 5,
  }
  export enum SkinQuality {
    Auto = 0,
    Bone1 = 1,
    Bone2 = 2,
    Bone4 = 4,
  }
  export enum ColorSpace {
    Uninitialized = -1,
    Gamma = 0,
    Linear = 1,
  }
  export enum ColorGamut {
    sRGB = 0,
    Rec709 = 1,
    Rec2020 = 2,
    DisplayP3 = 3,
    HDR10 = 4,
    DolbyHDR = 5,
  }
  export enum ScreenOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    LandscapeRight = 4,
    AutoRotation = 5,
    Landscape = 3,
  }
  export enum FilterMode {
    Point = 0,
    Bilinear = 1,
    Trilinear = 2,
  }
  export enum TextureWrapMode {
    Repeat = 0,
    Clamp = 1,
    Mirror = 2,
    MirrorOnce = 3,
  }
  export enum NPOTSupport {
    None = 0,
    Restricted = 1,
    Full = 2,
  }
  export enum TextureFormat {
    Alpha8 = 1,
    ARGB4444 = 2,
    RGB24 = 3,
    RGBA32 = 4,
    ARGB32 = 5,
    RGB565 = 7,
    R16 = 9,
    DXT1 = 10,
    DXT5 = 12,
    RGBA4444 = 13,
    BGRA32 = 14,
    RHalf = 15,
    RGHalf = 16,
    RGBAHalf = 17,
    RFloat = 18,
    RGFloat = 19,
    RGBAFloat = 20,
    YUY2 = 21,
    RGB9e5Float = 22,
    BC4 = 26,
    BC5 = 27,
    BC6H = 24,
    BC7 = 25,
    DXT1Crunched = 28,
    DXT5Crunched = 29,
    PVRTC_RGB2 = 30,
    PVRTC_RGBA2 = 31,
    PVRTC_RGB4 = 32,
    PVRTC_RGBA4 = 33,
    ETC_RGB4 = 34,
    ATC_RGB4 = -127,
    ATC_RGBA8 = -127,
    EAC_R = 41,
    EAC_R_SIGNED = 42,
    EAC_RG = 43,
    EAC_RG_SIGNED = 44,
    ETC2_RGB = 45,
    ETC2_RGBA1 = 46,
    ETC2_RGBA8 = 47,
    ASTC_4x4 = 48,
    ASTC_5x5 = 49,
    ASTC_6x6 = 50,
    ASTC_8x8 = 51,
    ASTC_10x10 = 52,
    ASTC_12x12 = 53,
    ETC_RGB4_3DS = 60,
    ETC_RGBA8_3DS = 61,
    RG16 = 62,
    R8 = 63,
    ETC_RGB4Crunched = 64,
    ETC2_RGBA8Crunched = 65,
    ASTC_HDR_4x4 = 66,
    ASTC_HDR_5x5 = 67,
    ASTC_HDR_6x6 = 68,
    ASTC_HDR_8x8 = 69,
    ASTC_HDR_10x10 = 70,
    ASTC_HDR_12x12 = 71,
    RG32 = 72,
    RGB48 = 73,
    RGBA64 = 74,
    ASTC_RGB_4x4 = 48,
    ASTC_RGB_5x5 = 49,
    ASTC_RGB_6x6 = 50,
    ASTC_RGB_8x8 = 51,
    ASTC_RGB_10x10 = 52,
    ASTC_RGB_12x12 = 53,
    ASTC_RGBA_4x4 = 54,
    ASTC_RGBA_5x5 = 55,
    ASTC_RGBA_6x6 = 56,
    ASTC_RGBA_8x8 = 57,
    ASTC_RGBA_10x10 = 58,
    ASTC_RGBA_12x12 = 59,
    PVRTC_2BPP_RGB = -127,
    PVRTC_2BPP_RGBA = -127,
    PVRTC_4BPP_RGB = -127,
    PVRTC_4BPP_RGBA = -127,
  }
  export enum CubemapFace {
    Unknown = -1,
    PositiveX = 0,
    NegativeX = 1,
    PositiveY = 2,
    NegativeY = 3,
    PositiveZ = 4,
    NegativeZ = 5,
  }
  export enum RenderTextureFormat {
    ARGB32 = 0,
    Depth = 1,
    ARGBHalf = 2,
    Shadowmap = 3,
    RGB565 = 4,
    ARGB4444 = 5,
    ARGB1555 = 6,
    Default = 7,
    ARGB2101010 = 8,
    DefaultHDR = 9,
    ARGB64 = 10,
    ARGBFloat = 11,
    RGFloat = 12,
    RGHalf = 13,
    RFloat = 14,
    RHalf = 15,
    R8 = 16,
    ARGBInt = 17,
    RGInt = 18,
    RInt = 19,
    BGRA32 = 20,
    RGB111110Float = 22,
    RG32 = 23,
    RGBAUShort = 24,
    RG16 = 25,
    BGRA10101010_XR = 26,
    BGR101010_XR = 27,
    R16 = 28,
  }
  export enum VRTextureUsage {
    None = 0,
    OneEye = 1,
    TwoEyes = 2,
    DeviceSpecific = 3,
  }
  export enum RenderTextureCreationFlags {
    MipMap = 1,
    AutoGenerateMips = 2,
    SRGB = 4,
    EyeTexture = 8,
    EnableRandomWrite = 16,
    CreatedFromScript = 32,
    AllowVerticalFlip = 128,
    NoResolvedColorSurface = 256,
    DynamicallyScalable = 1024,
    BindMS = 2048,
  }
  export enum RenderTextureReadWrite {
    Default = 0,
    Linear = 1,
    sRGB = 2,
  }
  export enum RenderTextureMemoryless {
    None = 0,
    Color = 1,
    Depth = 2,
    MSAA = 4,
  }
  export enum HDRDisplaySupportFlags {
    None = 0,
    Supported = 1,
    RuntimeSwitchable = 2,
    AutomaticTonemapping = 4,
  }
  export enum LightmapsMode {
    NonDirectional = 0,
    CombinedDirectional = 1,
    SeparateDirectional = 2,
    Single = 0,
    Dual = 1,
    Directional = 2,
  }
  export enum MaterialGlobalIlluminationFlags {
    None = 0,
    RealtimeEmissive = 1,
    BakedEmissive = 2,
    EmissiveIsBlack = 4,
    AnyEmissive = 3,
  }
  export declare class LightProbeProxyVolume {
    constructor();
    static isFeatureSupported: boolean;
    boundsGlobal: UnityEngine.Bounds;
    sizeCustom: UnityEngine.Vector3;
    originCustom: UnityEngine.Vector3;
    probeDensity: number;
    gridResolutionX: number;
    gridResolutionY: number;
    gridResolutionZ: number;
    boundingBoxMode: UnityEngine.LightProbeProxyVolume_BoundingBoxMode;
    resolutionMode: UnityEngine.LightProbeProxyVolume_ResolutionMode;
    probePositionMode: UnityEngine.LightProbeProxyVolume_ProbePositionMode;
    refreshMode: UnityEngine.LightProbeProxyVolume_RefreshMode;
    qualityMode: UnityEngine.LightProbeProxyVolume_QualityMode;
    dataFormat: UnityEngine.LightProbeProxyVolume_DataFormat;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Update: (() => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum LightProbeProxyVolume_ResolutionMode {
    Automatic = 0,
    Custom = 1,
  }
  export enum LightProbeProxyVolume_BoundingBoxMode {
    AutomaticLocal = 0,
    AutomaticWorld = 1,
    Custom = 2,
  }
  export enum LightProbeProxyVolume_ProbePositionMode {
    CellCorner = 0,
    CellCenter = 1,
  }
  export enum LightProbeProxyVolume_RefreshMode {
    Automatic = 0,
    EveryFrame = 1,
    ViaScripting = 2,
  }
  export enum LightProbeProxyVolume_QualityMode {
    Low = 0,
    Normal = 1,
  }
  export enum LightProbeProxyVolume_DataFormat {
    HalfFloat = 0,
    Float = 1,
  }
  export enum CustomRenderTextureInitializationSource {
    TextureAndColor = 0,
    Material = 1,
  }
  export enum CustomRenderTextureUpdateMode {
    OnLoad = 0,
    Realtime = 1,
    OnDemand = 2,
  }
  export enum CustomRenderTextureUpdateZoneSpace {
    Normalized = 0,
    Pixel = 1,
  }
  export enum MotionVectorGenerationMode {
    Camera = 0,
    Object = 1,
    ForceNoMotion = 2,
  }
  export enum LineTextureMode {
    Stretch = 0,
    Tile = 1,
    DistributePerSegment = 2,
    RepeatPerSegment = 3,
  }
  export enum LineAlignment {
    View = 0,
    Local = 1,
    TransformZ = 1,
  }
  export declare class SkinnedMeshRenderer {
    constructor();
    quality: UnityEngine.SkinQuality;
    updateWhenOffscreen: boolean;
    forceMatrixRecalculationPerRender: boolean;
    rootBone: UnityEngine.Transform;
    bones: UnityEngine.Transform[];
    sharedMesh: UnityEngine.Mesh;
    skinnedMotionVectors: boolean;
    localBounds: UnityEngine.Bounds;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetBlendShapeWeight: ((index: number) => number);
    SetBlendShapeWeight: ((index: number, value: number) => void);
    BakeMesh: ((mesh: UnityEngine.Mesh) => void) | ((mesh: UnityEngine.Mesh, useScale: boolean) => void);
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class MeshRenderer {
    constructor();
    additionalVertexStreams: UnityEngine.Mesh;
    enlightenVertexStream: UnityEngine.Mesh;
    subMeshStartIndex: number;
    scaleInLightmap: number;
    receiveGI: UnityEngine.ReceiveGI;
    stitchLightmapSeams: boolean;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum LightmappingMode {
    Realtime = 4,
    Baked = 2,
    Mixed = 1,
  }
  export declare class LightProbeGroup {
    constructor();
    probePositions: UnityEngine.Vector3[];
    dering: boolean;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LineUtility {
    constructor();
    static Simplify: ((points: UnityEngine.Vector3[], tolerance: number, pointsToKeep: number[]) => void) | ((points: UnityEngine.Vector3[], tolerance: number, simplifiedPoints: UnityEngine.Vector3[]) => void) | ((points: UnityEngine.Vector2[], tolerance: number, pointsToKeep: number[]) => void) | ((points: UnityEngine.Vector2[], tolerance: number, simplifiedPoints: UnityEngine.Vector2[]) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum LODFadeMode {
    None = 0,
    CrossFade = 1,
    SpeedTree = 2,
  }
  export declare class LOD {
    constructor(screenRelativeTransitionHeight: number, renderers: UnityEngine.Renderer[]);
    screenRelativeTransitionHeight: number;
    fadeTransitionWidth: number;
    renderers: UnityEngine.Renderer[];
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LODGroup {
    constructor();
    localReferencePoint: UnityEngine.Vector3;
    size: number;
    lodCount: number;
    fadeMode: UnityEngine.LODFadeMode;
    animateCrossFading: boolean;
    enabled: boolean;
    static crossFadeAnimationDuration: number;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    RecalculateBounds: (() => void);
    GetLODs: (() => UnityEngine.LOD[]);
    SetLODS: ((lods: UnityEngine.LOD[]) => void);
    SetLODs: ((lods: UnityEngine.LOD[]) => void);
    ForceLOD: ((index: number) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class BoneWeight {
    weight0: number;
    weight1: number;
    weight2: number;
    weight3: number;
    boneIndex0: number;
    boneIndex1: number;
    boneIndex2: number;
    boneIndex3: number;
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.BoneWeight) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class BoneWeight1 {
    weight: number;
    boneIndex: number;
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.BoneWeight1) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CombineInstance {
    mesh: UnityEngine.Mesh;
    subMeshIndex: number;
    transform: UnityEngine.Matrix4x4;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Texture {
    static masterTextureLimit: number;
    mipmapCount: number;
    static anisotropicFiltering: UnityEngine.AnisotropicFiltering;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    isReadable: boolean;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    static totalTextureMemory: System.UInt64;
    static desiredTextureMemory: System.UInt64;
    static targetTextureMemory: System.UInt64;
    static currentTextureMemory: System.UInt64;
    static nonStreamingTextureMemory: System.UInt64;
    static streamingMipmapUploadCount: System.UInt64;
    static streamingRendererCount: System.UInt64;
    static streamingTextureCount: System.UInt64;
    static nonStreamingTextureCount: System.UInt64;
    static streamingTexturePendingLoadCount: System.UInt64;
    static streamingTextureLoadingCount: System.UInt64;
    static streamingTextureForceLoadAll: boolean;
    static streamingTextureDiscardUnusedMips: boolean;
    static allowThreadedTextureCreation: boolean;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static GenerateAllMips: number;
    static SetGlobalAnisotropicFilteringLimits: ((forcedMin: number, globalMax: number) => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    static SetStreamingTextureMaterialDebugProperties: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Texture2D {
    constructor(width: number, height: number, format: UnityEngine.Experimental.Rendering.DefaultFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, mipCount: number, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipCount: number, linear: boolean);
    constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean);
    constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
    constructor(width: number, height: number);
    format: UnityEngine.TextureFormat;
    static whiteTexture: UnityEngine.Texture2D;
    static blackTexture: UnityEngine.Texture2D;
    static redTexture: UnityEngine.Texture2D;
    static grayTexture: UnityEngine.Texture2D;
    static linearGrayTexture: UnityEngine.Texture2D;
    static normalTexture: UnityEngine.Texture2D;
    isReadable: boolean;
    vtOnly: boolean;
    streamingMipmaps: boolean;
    streamingMipmapsPriority: number;
    requestedMipmapLevel: number;
    minimumMipmapLevel: number;
    calculatedMipmapLevel: number;
    desiredMipmapLevel: number;
    loadingMipmapLevel: number;
    loadedMipmapLevel: number;
    alphaIsTransparency: boolean;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Compress: ((highQuality: boolean) => void);
    ClearRequestedMipmapLevel: (() => void);
    IsRequestedMipmapLevelLoaded: (() => boolean);
    ClearMinimumMipmapLevel: (() => void);
    UpdateExternalTexture: ((nativeTex: System.IntPtr) => void);
    GetRawTextureData: (() => System.Byte[]);
    GetPixels: ((x: number, y: number, blockWidth: number, blockHeight: number, miplevel: number) => UnityEngine.Color[]) | ((x: number, y: number, blockWidth: number, blockHeight: number) => UnityEngine.Color[]) | ((miplevel: number) => UnityEngine.Color[]) | (() => UnityEngine.Color[]);
    GetPixels32: ((miplevel: number) => UnityEngine.Color32[]) | (() => UnityEngine.Color32[]);
    PackTextures: ((textures: UnityEngine.Texture2D[], padding: number, maximumAtlasSize: number, makeNoLongerReadable: boolean) => UnityEngine.Rect[]) | ((textures: UnityEngine.Texture2D[], padding: number, maximumAtlasSize: number) => UnityEngine.Rect[]) | ((textures: UnityEngine.Texture2D[], padding: number) => UnityEngine.Rect[]);
    static CreateExternalTexture: ((width: number, height: number, format: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean, nativeTex: System.IntPtr) => UnityEngine.Texture2D);
    SetPixel: ((x: number, y: number, color: UnityEngine.Color) => void) | ((x: number, y: number, color: UnityEngine.Color, mipLevel: number) => void);
    SetPixels: ((x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color[], miplevel: number) => void) | ((x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color[]) => void) | ((colors: UnityEngine.Color[], miplevel: number) => void) | ((colors: UnityEngine.Color[]) => void);
    GetPixel: ((x: number, y: number) => UnityEngine.Color) | ((x: number, y: number, mipLevel: number) => UnityEngine.Color);
    GetPixelBilinear: ((u: number, v: number) => UnityEngine.Color) | ((u: number, v: number, mipLevel: number) => UnityEngine.Color);
    LoadRawTextureData: ((data: System.IntPtr, size: number) => void) | ((data: System.Byte[]) => void);
    Apply: ((updateMipmaps: boolean, makeNoLongerReadable: boolean) => void) | ((updateMipmaps: boolean) => void) | (() => void);
    Resize: ((width: number, height: number) => boolean) | ((width: number, height: number, format: UnityEngine.TextureFormat, hasMipMap: boolean) => boolean) | ((width: number, height: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, hasMipMap: boolean) => boolean);
    ReadPixels: ((source: UnityEngine.Rect, destX: number, destY: number, recalculateMipMaps: boolean) => void) | ((source: UnityEngine.Rect, destX: number, destY: number) => void);
    static GenerateAtlas: ((sizes: UnityEngine.Vector2[], padding: number, atlasSize: number, results: UnityEngine.Rect[]) => boolean);
    SetPixels32: ((colors: UnityEngine.Color32[], miplevel: number) => void) | ((colors: UnityEngine.Color32[]) => void) | ((x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color32[], miplevel: number) => void) | ((x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color32[]) => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum Texture2D_EXRFlags {
    None = 0,
    OutputAsFloat = 1,
    CompressZIP = 2,
    CompressRLE = 4,
    CompressPIZ = 8,
  }
  export declare class Cubemap {
    constructor(width: number, format: UnityEngine.Experimental.Rendering.DefaultFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, format: UnityEngine.TextureFormat, mipCount: number);
    constructor(width: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, mipCount: number);
    constructor(width: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
    format: UnityEngine.TextureFormat;
    isReadable: boolean;
    streamingMipmaps: boolean;
    streamingMipmapsPriority: number;
    requestedMipmapLevel: number;
    desiredMipmapLevel: number;
    loadingMipmapLevel: number;
    loadedMipmapLevel: number;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    UpdateExternalTexture: ((nativeTexture: System.IntPtr) => void);
    SmoothEdges: ((smoothRegionWidthInPixels: number) => void) | (() => void);
    GetPixels: ((face: UnityEngine.CubemapFace, miplevel: number) => UnityEngine.Color[]) | ((face: UnityEngine.CubemapFace) => UnityEngine.Color[]);
    SetPixels: ((colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, miplevel: number) => void) | ((colors: UnityEngine.Color[], face: UnityEngine.CubemapFace) => void);
    ClearRequestedMipmapLevel: (() => void);
    IsRequestedMipmapLevelLoaded: (() => boolean);
    static CreateExternalTexture: ((width: number, format: UnityEngine.TextureFormat, mipmap: boolean, nativeTex: System.IntPtr) => UnityEngine.Cubemap);
    SetPixel: ((face: UnityEngine.CubemapFace, x: number, y: number, color: UnityEngine.Color) => void);
    GetPixel: ((face: UnityEngine.CubemapFace, x: number, y: number) => UnityEngine.Color);
    Apply: ((updateMipmaps: boolean, makeNoLongerReadable: boolean) => void) | ((updateMipmaps: boolean) => void) | (() => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Texture3D {
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.DefaultFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, mipCount: number);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipCount: number);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipCount: number, nativeTex: System.IntPtr);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, nativeTex: System.IntPtr);
    depth: number;
    format: UnityEngine.TextureFormat;
    isReadable: boolean;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    UpdateExternalTexture: ((nativeTex: System.IntPtr) => void);
    GetPixels: ((miplevel: number) => UnityEngine.Color[]) | (() => UnityEngine.Color[]);
    GetPixels32: ((miplevel: number) => UnityEngine.Color32[]) | (() => UnityEngine.Color32[]);
    SetPixels: ((colors: UnityEngine.Color[], miplevel: number) => void) | ((colors: UnityEngine.Color[]) => void);
    SetPixels32: ((colors: UnityEngine.Color32[], miplevel: number) => void) | ((colors: UnityEngine.Color32[]) => void);
    static CreateExternalTexture: ((width: number, height: number, depth: number, format: UnityEngine.TextureFormat, mipChain: boolean, nativeTex: System.IntPtr) => UnityEngine.Texture3D);
    Apply: ((updateMipmaps: boolean, makeNoLongerReadable: boolean) => void) | ((updateMipmaps: boolean) => void) | (() => void);
    SetPixel: ((x: number, y: number, z: number, color: UnityEngine.Color) => void) | ((x: number, y: number, z: number, color: UnityEngine.Color, mipLevel: number) => void);
    GetPixel: ((x: number, y: number, z: number) => UnityEngine.Color) | ((x: number, y: number, z: number, mipLevel: number) => UnityEngine.Color);
    GetPixelBilinear: ((u: number, v: number, w: number) => UnityEngine.Color) | ((u: number, v: number, w: number, mipLevel: number) => UnityEngine.Color);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Texture2DArray {
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.DefaultFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, mipCount: number);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipCount: number, linear: boolean);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean);
    constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
    static allSlices: number;
    depth: number;
    format: UnityEngine.TextureFormat;
    isReadable: boolean;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetPixels: ((arrayElement: number, miplevel: number) => UnityEngine.Color[]) | ((arrayElement: number) => UnityEngine.Color[]);
    GetPixels32: ((arrayElement: number, miplevel: number) => UnityEngine.Color32[]) | ((arrayElement: number) => UnityEngine.Color32[]);
    SetPixels: ((colors: UnityEngine.Color[], arrayElement: number, miplevel: number) => void) | ((colors: UnityEngine.Color[], arrayElement: number) => void);
    SetPixels32: ((colors: UnityEngine.Color32[], arrayElement: number, miplevel: number) => void) | ((colors: UnityEngine.Color32[], arrayElement: number) => void);
    Apply: ((updateMipmaps: boolean, makeNoLongerReadable: boolean) => void) | ((updateMipmaps: boolean) => void) | (() => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CubemapArray {
    constructor(width: number, cubemapCount: number, format: UnityEngine.Experimental.Rendering.DefaultFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, cubemapCount: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags);
    constructor(width: number, cubemapCount: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, mipCount: number);
    constructor(width: number, cubemapCount: number, textureFormat: UnityEngine.TextureFormat, mipCount: number, linear: boolean);
    constructor(width: number, cubemapCount: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean);
    constructor(width: number, cubemapCount: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
    cubemapCount: number;
    format: UnityEngine.TextureFormat;
    isReadable: boolean;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetPixels: ((face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number) => UnityEngine.Color[]) | ((face: UnityEngine.CubemapFace, arrayElement: number) => UnityEngine.Color[]);
    GetPixels32: ((face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number) => UnityEngine.Color32[]) | ((face: UnityEngine.CubemapFace, arrayElement: number) => UnityEngine.Color32[]);
    SetPixels: ((colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number) => void) | ((colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, arrayElement: number) => void);
    SetPixels32: ((colors: UnityEngine.Color32[], face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number) => void) | ((colors: UnityEngine.Color32[], face: UnityEngine.CubemapFace, arrayElement: number) => void);
    Apply: ((updateMipmaps: boolean, makeNoLongerReadable: boolean) => void) | ((updateMipmaps: boolean) => void) | (() => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class SparseTexture {
    constructor(width: number, height: number, format: UnityEngine.Experimental.Rendering.DefaultFormat, mipCount: number);
    constructor(width: number, height: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, mipCount: number);
    constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipCount: number);
    constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipCount: number, linear: boolean);
    tileWidth: number;
    tileHeight: number;
    isCreated: boolean;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    isReadable: boolean;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    UpdateTile: ((tileX: number, tileY: number, miplevel: number, data: UnityEngine.Color32[]) => void);
    UpdateTileRaw: ((tileX: number, tileY: number, miplevel: number, data: System.Byte[]) => void);
    UnloadTile: ((tileX: number, tileY: number, miplevel: number) => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RenderTexture {
    constructor(desc: UnityEngine.RenderTextureDescriptor);
    constructor(textureToCopy: UnityEngine.RenderTexture);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.DefaultFormat);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat);
    constructor(width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, mipCount: number);
    constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite);
    constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat);
    constructor(width: number, height: number, depth: number);
    constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat, mipCount: number);
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    useMipMap: boolean;
    sRGB: boolean;
    vrUsage: UnityEngine.VRTextureUsage;
    memorylessMode: UnityEngine.RenderTextureMemoryless;
    format: UnityEngine.RenderTextureFormat;
    stencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    autoGenerateMips: boolean;
    volumeDepth: number;
    antiAliasing: number;
    bindTextureMS: boolean;
    enableRandomWrite: boolean;
    useDynamicScale: boolean;
    isPowerOfTwo: boolean;
    static active: UnityEngine.RenderTexture;
    colorBuffer: UnityEngine.RenderBuffer;
    depthBuffer: UnityEngine.RenderBuffer;
    depth: number;
    descriptor: UnityEngine.RenderTextureDescriptor;
    generateMips: boolean;
    isCubemap: boolean;
    isVolume: boolean;
    static enabled: boolean;
    mipmapCount: number;
    isReadable: boolean;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetNativeDepthBufferPtr: (() => System.IntPtr);
    DiscardContents: ((discardColor: boolean, discardDepth: boolean) => void) | (() => void);
    MarkRestoreExpected: (() => void);
    ResolveAntiAliasedSurface: (() => void) | ((target: UnityEngine.RenderTexture) => void);
    SetGlobalShaderProperty: ((propertyName: string) => void);
    Create: (() => boolean);
    Release: (() => void);
    IsCreated: (() => boolean);
    GenerateMips: (() => void);
    ConvertToEquirect: ((equirect: UnityEngine.RenderTexture, eye?: UnityEngine.Camera_MonoOrStereoscopicEye) => void);
    static SupportsStencil: ((rt: UnityEngine.RenderTexture) => boolean);
    static ReleaseTemporary: ((temp: UnityEngine.RenderTexture) => void);
    static GetTemporary: ((desc: UnityEngine.RenderTextureDescriptor) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage, useDynamicScale: boolean) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage, useDynamicScale: boolean) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat) => UnityEngine.RenderTexture) | ((width: number, height: number, depthBuffer: number) => UnityEngine.RenderTexture) | ((width: number, height: number) => UnityEngine.RenderTexture);
    SetBorderColor: ((color: UnityEngine.Color) => void);
    GetTexelOffset: (() => UnityEngine.Vector2);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CustomRenderTextureUpdateZone {
    updateZoneCenter: UnityEngine.Vector3;
    updateZoneSize: UnityEngine.Vector3;
    rotation: number;
    passIndex: number;
    needSwap: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CustomRenderTexture {
    constructor(width: number, height: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite);
    constructor(width: number, height: number, format: UnityEngine.RenderTextureFormat);
    constructor(width: number, height: number);
    constructor(width: number, height: number, defaultFormat: UnityEngine.Experimental.Rendering.DefaultFormat);
    constructor(width: number, height: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat);
    material: UnityEngine.Material;
    initializationMaterial: UnityEngine.Material;
    initializationTexture: UnityEngine.Texture;
    initializationSource: UnityEngine.CustomRenderTextureInitializationSource;
    initializationColor: UnityEngine.Color;
    updateMode: UnityEngine.CustomRenderTextureUpdateMode;
    initializationMode: UnityEngine.CustomRenderTextureUpdateMode;
    updateZoneSpace: UnityEngine.CustomRenderTextureUpdateZoneSpace;
    shaderPass: number;
    cubemapFaceMask: System.UInt32;
    doubleBuffered: boolean;
    wrapUpdateZones: boolean;
    updatePeriod: number;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    useMipMap: boolean;
    sRGB: boolean;
    vrUsage: UnityEngine.VRTextureUsage;
    memorylessMode: UnityEngine.RenderTextureMemoryless;
    format: UnityEngine.RenderTextureFormat;
    stencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    autoGenerateMips: boolean;
    volumeDepth: number;
    antiAliasing: number;
    bindTextureMS: boolean;
    enableRandomWrite: boolean;
    useDynamicScale: boolean;
    isPowerOfTwo: boolean;
    colorBuffer: UnityEngine.RenderBuffer;
    depthBuffer: UnityEngine.RenderBuffer;
    depth: number;
    descriptor: UnityEngine.RenderTextureDescriptor;
    generateMips: boolean;
    isCubemap: boolean;
    isVolume: boolean;
    mipmapCount: number;
    isReadable: boolean;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Update: ((count: number) => void) | (() => void);
    Initialize: (() => void);
    ClearUpdateZones: (() => void);
    GetUpdateZones: ((updateZones: UnityEngine.CustomRenderTextureUpdateZone[]) => void);
    GetDoubleBufferRenderTexture: (() => UnityEngine.RenderTexture);
    EnsureDoubleBufferConsistency: (() => void);
    SetUpdateZones: ((updateZones: UnityEngine.CustomRenderTextureUpdateZone[]) => void);
    GetNativeDepthBufferPtr: (() => System.IntPtr);
    DiscardContents: ((discardColor: boolean, discardDepth: boolean) => void) | (() => void);
    MarkRestoreExpected: (() => void);
    ResolveAntiAliasedSurface: (() => void) | ((target: UnityEngine.RenderTexture) => void);
    SetGlobalShaderProperty: ((propertyName: string) => void);
    Create: (() => boolean);
    Release: (() => void);
    IsCreated: (() => boolean);
    GenerateMips: (() => void);
    ConvertToEquirect: ((equirect: UnityEngine.RenderTexture, eye?: UnityEngine.Camera_MonoOrStereoscopicEye) => void);
    SetBorderColor: ((color: UnityEngine.Color) => void);
    GetTexelOffset: (() => UnityEngine.Vector2);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RenderTextureDescriptor {
    constructor(width: number, height: number);
    constructor(width: number, height: number, colorFormat: UnityEngine.RenderTextureFormat);
    constructor(width: number, height: number, colorFormat: UnityEngine.RenderTextureFormat, depthBufferBits: number);
    constructor(width: number, height: number, colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, depthBufferBits: number);
    constructor(width: number, height: number, colorFormat: UnityEngine.RenderTextureFormat, depthBufferBits: number, mipCount: number);
    constructor(width: number, height: number, colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, depthBufferBits: number, mipCount: number);
    width: number;
    height: number;
    msaaSamples: number;
    volumeDepth: number;
    mipCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    stencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    colorFormat: UnityEngine.RenderTextureFormat;
    sRGB: boolean;
    depthBufferBits: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    shadowSamplingMode: UnityEngine.Rendering.ShadowSamplingMode;
    vrUsage: UnityEngine.VRTextureUsage;
    flags: UnityEngine.RenderTextureCreationFlags;
    memoryless: UnityEngine.RenderTextureMemoryless;
    useMipMap: boolean;
    autoGenerateMips: boolean;
    enableRandomWrite: boolean;
    bindMS: boolean;
    useDynamicScale: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum FullScreenMovieControlMode {
    Full = 0,
    Minimal = 1,
    CancelOnInput = 2,
    Hidden = 3,
  }
  export enum FullScreenMovieScalingMode {
    None = 0,
    AspectFit = 1,
    AspectFill = 2,
    Fill = 3,
  }
  export enum AndroidActivityIndicatorStyle {
    DontShow = -1,
    Large = 0,
    InversedLarge = 1,
    Small = 2,
    InversedSmall = 3,
  }
  export declare class Handheld {
    constructor();
    static use32BitDisplayBuffer: boolean;
    static PlayFullScreenMovie: ((path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.FullScreenMovieControlMode, scalingMode: UnityEngine.FullScreenMovieScalingMode) => boolean) | ((path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.FullScreenMovieControlMode) => boolean) | ((path: string, bgColor: UnityEngine.Color) => boolean) | ((path: string) => boolean);
    static Vibrate: (() => void);
    static SetActivityIndicatorStyle: ((style: UnityEngine.iOS.ActivityIndicatorStyle) => void) | ((style: UnityEngine.AndroidActivityIndicatorStyle) => void);
    static GetActivityIndicatorStyle: (() => number);
    static StartActivityIndicator: (() => void);
    static StopActivityIndicator: (() => void);
    static ClearShaderCache: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Hash128 {
    constructor(u32_0: System.UInt32, u32_1: System.UInt32, u32_2: System.UInt32, u32_3: System.UInt32);
    constructor(u64_0: System.UInt64, u64_1: System.UInt64);
    isValid: boolean;
    CompareTo: ((rhs: UnityEngine.Hash128) => number) | ((obj: System.Object) => number);
    ToString: (() => string);
    static Parse: ((hashString: string) => UnityEngine.Hash128);
    static Compute: ((data: string) => UnityEngine.Hash128) | ((val: number) => UnityEngine.Hash128) | ((val: number) => UnityEngine.Hash128);
    Append: ((data: string) => void) | ((val: number) => void) | ((val: number) => void);
    Equals: ((obj: System.Object) => boolean) | ((obj: UnityEngine.Hash128) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class HashUtilities {
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class HashUnsafeUtilities {
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum CursorMode {
    Auto = 0,
    ForceSoftware = 1,
  }
  export enum CursorLockMode {
    None = 0,
    Locked = 1,
    Confined = 2,
  }
  export declare class Cursor {
    constructor();
    static visible: boolean;
    static lockState: UnityEngine.CursorLockMode;
    static SetCursor: ((texture: UnityEngine.Texture2D, hotspot: UnityEngine.Vector2, cursorMode: UnityEngine.CursorMode) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum KeyCode {
    None = 0,
    Backspace = 8,
    Delete = 127,
    Tab = 9,
    Clear = 12,
    Return = 13,
    Pause = 19,
    Escape = 27,
    Space = 32,
    Keypad0 = 256,
    Keypad1 = 257,
    Keypad2 = 258,
    Keypad3 = 259,
    Keypad4 = 260,
    Keypad5 = 261,
    Keypad6 = 262,
    Keypad7 = 263,
    Keypad8 = 264,
    Keypad9 = 265,
    KeypadPeriod = 266,
    KeypadDivide = 267,
    KeypadMultiply = 268,
    KeypadMinus = 269,
    KeypadPlus = 270,
    KeypadEnter = 271,
    KeypadEquals = 272,
    UpArrow = 273,
    DownArrow = 274,
    RightArrow = 275,
    LeftArrow = 276,
    Insert = 277,
    Home = 278,
    End = 279,
    PageUp = 280,
    PageDown = 281,
    F1 = 282,
    F2 = 283,
    F3 = 284,
    F4 = 285,
    F5 = 286,
    F6 = 287,
    F7 = 288,
    F8 = 289,
    F9 = 290,
    F10 = 291,
    F11 = 292,
    F12 = 293,
    F13 = 294,
    F14 = 295,
    F15 = 296,
    Alpha0 = 48,
    Alpha1 = 49,
    Alpha2 = 50,
    Alpha3 = 51,
    Alpha4 = 52,
    Alpha5 = 53,
    Alpha6 = 54,
    Alpha7 = 55,
    Alpha8 = 56,
    Alpha9 = 57,
    Exclaim = 33,
    DoubleQuote = 34,
    Hash = 35,
    Dollar = 36,
    Percent = 37,
    Ampersand = 38,
    Quote = 39,
    LeftParen = 40,
    RightParen = 41,
    Asterisk = 42,
    Plus = 43,
    Comma = 44,
    Minus = 45,
    Period = 46,
    Slash = 47,
    Colon = 58,
    Semicolon = 59,
    Less = 60,
    Equals = 61,
    Greater = 62,
    Question = 63,
    At = 64,
    LeftBracket = 91,
    Backslash = 92,
    RightBracket = 93,
    Caret = 94,
    Underscore = 95,
    BackQuote = 96,
    A = 97,
    B = 98,
    C = 99,
    D = 100,
    E = 101,
    F = 102,
    G = 103,
    H = 104,
    I = 105,
    J = 106,
    K = 107,
    L = 108,
    M = 109,
    N = 110,
    O = 111,
    P = 112,
    Q = 113,
    R = 114,
    S = 115,
    T = 116,
    U = 117,
    V = 118,
    W = 119,
    X = 120,
    Y = 121,
    Z = 122,
    LeftCurlyBracket = 123,
    Pipe = 124,
    RightCurlyBracket = 125,
    Tilde = 126,
    Numlock = 300,
    CapsLock = 301,
    ScrollLock = 302,
    RightShift = 303,
    LeftShift = 304,
    RightControl = 305,
    LeftControl = 306,
    RightAlt = 307,
    LeftAlt = 308,
    LeftCommand = 310,
    LeftApple = 310,
    LeftWindows = 311,
    RightCommand = 309,
    RightApple = 309,
    RightWindows = 312,
    AltGr = 313,
    Help = 315,
    Print = 316,
    SysReq = 317,
    Break = 318,
    Menu = 319,
    Mouse0 = 323,
    Mouse1 = 324,
    Mouse2 = 325,
    Mouse3 = 326,
    Mouse4 = 327,
    Mouse5 = 328,
    Mouse6 = 329,
    JoystickButton0 = 330,
    JoystickButton1 = 331,
    JoystickButton2 = 332,
    JoystickButton3 = 333,
    JoystickButton4 = 334,
    JoystickButton5 = 335,
    JoystickButton6 = 336,
    JoystickButton7 = 337,
    JoystickButton8 = 338,
    JoystickButton9 = 339,
    JoystickButton10 = 340,
    JoystickButton11 = 341,
    JoystickButton12 = 342,
    JoystickButton13 = 343,
    JoystickButton14 = 344,
    JoystickButton15 = 345,
    JoystickButton16 = 346,
    JoystickButton17 = 347,
    JoystickButton18 = 348,
    JoystickButton19 = 349,
    Joystick1Button0 = 350,
    Joystick1Button1 = 351,
    Joystick1Button2 = 352,
    Joystick1Button3 = 353,
    Joystick1Button4 = 354,
    Joystick1Button5 = 355,
    Joystick1Button6 = 356,
    Joystick1Button7 = 357,
    Joystick1Button8 = 358,
    Joystick1Button9 = 359,
    Joystick1Button10 = 360,
    Joystick1Button11 = 361,
    Joystick1Button12 = 362,
    Joystick1Button13 = 363,
    Joystick1Button14 = 364,
    Joystick1Button15 = 365,
    Joystick1Button16 = 366,
    Joystick1Button17 = 367,
    Joystick1Button18 = 368,
    Joystick1Button19 = 369,
    Joystick2Button0 = 370,
    Joystick2Button1 = 371,
    Joystick2Button2 = 372,
    Joystick2Button3 = 373,
    Joystick2Button4 = 374,
    Joystick2Button5 = 375,
    Joystick2Button6 = 376,
    Joystick2Button7 = 377,
    Joystick2Button8 = 378,
    Joystick2Button9 = 379,
    Joystick2Button10 = 380,
    Joystick2Button11 = 381,
    Joystick2Button12 = 382,
    Joystick2Button13 = 383,
    Joystick2Button14 = 384,
    Joystick2Button15 = 385,
    Joystick2Button16 = 386,
    Joystick2Button17 = 387,
    Joystick2Button18 = 388,
    Joystick2Button19 = 389,
    Joystick3Button0 = 390,
    Joystick3Button1 = 391,
    Joystick3Button2 = 392,
    Joystick3Button3 = 393,
    Joystick3Button4 = 394,
    Joystick3Button5 = 395,
    Joystick3Button6 = 396,
    Joystick3Button7 = 397,
    Joystick3Button8 = 398,
    Joystick3Button9 = 399,
    Joystick3Button10 = 400,
    Joystick3Button11 = 401,
    Joystick3Button12 = 402,
    Joystick3Button13 = 403,
    Joystick3Button14 = 404,
    Joystick3Button15 = 405,
    Joystick3Button16 = 406,
    Joystick3Button17 = 407,
    Joystick3Button18 = 408,
    Joystick3Button19 = 409,
    Joystick4Button0 = 410,
    Joystick4Button1 = 411,
    Joystick4Button2 = 412,
    Joystick4Button3 = 413,
    Joystick4Button4 = 414,
    Joystick4Button5 = 415,
    Joystick4Button6 = 416,
    Joystick4Button7 = 417,
    Joystick4Button8 = 418,
    Joystick4Button9 = 419,
    Joystick4Button10 = 420,
    Joystick4Button11 = 421,
    Joystick4Button12 = 422,
    Joystick4Button13 = 423,
    Joystick4Button14 = 424,
    Joystick4Button15 = 425,
    Joystick4Button16 = 426,
    Joystick4Button17 = 427,
    Joystick4Button18 = 428,
    Joystick4Button19 = 429,
    Joystick5Button0 = 430,
    Joystick5Button1 = 431,
    Joystick5Button2 = 432,
    Joystick5Button3 = 433,
    Joystick5Button4 = 434,
    Joystick5Button5 = 435,
    Joystick5Button6 = 436,
    Joystick5Button7 = 437,
    Joystick5Button8 = 438,
    Joystick5Button9 = 439,
    Joystick5Button10 = 440,
    Joystick5Button11 = 441,
    Joystick5Button12 = 442,
    Joystick5Button13 = 443,
    Joystick5Button14 = 444,
    Joystick5Button15 = 445,
    Joystick5Button16 = 446,
    Joystick5Button17 = 447,
    Joystick5Button18 = 448,
    Joystick5Button19 = 449,
    Joystick6Button0 = 450,
    Joystick6Button1 = 451,
    Joystick6Button2 = 452,
    Joystick6Button3 = 453,
    Joystick6Button4 = 454,
    Joystick6Button5 = 455,
    Joystick6Button6 = 456,
    Joystick6Button7 = 457,
    Joystick6Button8 = 458,
    Joystick6Button9 = 459,
    Joystick6Button10 = 460,
    Joystick6Button11 = 461,
    Joystick6Button12 = 462,
    Joystick6Button13 = 463,
    Joystick6Button14 = 464,
    Joystick6Button15 = 465,
    Joystick6Button16 = 466,
    Joystick6Button17 = 467,
    Joystick6Button18 = 468,
    Joystick6Button19 = 469,
    Joystick7Button0 = 470,
    Joystick7Button1 = 471,
    Joystick7Button2 = 472,
    Joystick7Button3 = 473,
    Joystick7Button4 = 474,
    Joystick7Button5 = 475,
    Joystick7Button6 = 476,
    Joystick7Button7 = 477,
    Joystick7Button8 = 478,
    Joystick7Button9 = 479,
    Joystick7Button10 = 480,
    Joystick7Button11 = 481,
    Joystick7Button12 = 482,
    Joystick7Button13 = 483,
    Joystick7Button14 = 484,
    Joystick7Button15 = 485,
    Joystick7Button16 = 486,
    Joystick7Button17 = 487,
    Joystick7Button18 = 488,
    Joystick7Button19 = 489,
    Joystick8Button0 = 490,
    Joystick8Button1 = 491,
    Joystick8Button2 = 492,
    Joystick8Button3 = 493,
    Joystick8Button4 = 494,
    Joystick8Button5 = 495,
    Joystick8Button6 = 496,
    Joystick8Button7 = 497,
    Joystick8Button8 = 498,
    Joystick8Button9 = 499,
    Joystick8Button10 = 500,
    Joystick8Button11 = 501,
    Joystick8Button12 = 502,
    Joystick8Button13 = 503,
    Joystick8Button14 = 504,
    Joystick8Button15 = 505,
    Joystick8Button16 = 506,
    Joystick8Button17 = 507,
    Joystick8Button18 = 508,
    Joystick8Button19 = 509,
  }
  export enum iPhoneScreenOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    LandscapeRight = 4,
    AutoRotation = 5,
    Landscape = 6,
  }
  export enum iPhoneNetworkReachability {
    NotReachable = 0,
    ReachableViaCarrierDataNetwork = 1,
    ReachableViaWiFiNetwork = 2,
  }
  export enum iPhoneGeneration {
    Unknown = 0,
    iPhone = 1,
    iPhone3G = 2,
    iPhone3GS = 3,
    iPodTouch1Gen = 4,
    iPodTouch2Gen = 5,
    iPodTouch3Gen = 6,
    iPad1Gen = 7,
    iPhone4 = 8,
    iPodTouch4Gen = 9,
    iPad2Gen = 10,
    iPhone4S = 11,
    iPad3Gen = 12,
    iPhone5 = 13,
    iPodTouch5Gen = 14,
    iPadMini1Gen = 15,
    iPad4Gen = 16,
    iPhone5C = 17,
    iPhone5S = 18,
    iPhoneUnknown = 19,
    iPadUnknown = 20,
    iPodTouchUnknown = 21,
  }
  export declare class iPhoneSettings {
    constructor();
    static screenOrientation: UnityEngine.iPhoneScreenOrientation;
    static uniqueIdentifier: string;
    static name: string;
    static model: string;
    static systemName: string;
    static internetReachability: UnityEngine.iPhoneNetworkReachability;
    static systemVersion: string;
    static generation: UnityEngine.iPhoneGeneration;
    static verticalOrientation: boolean;
    static screenCanDarken: boolean;
    static locationServiceEnabledByUser: boolean;
    static StartLocationServiceUpdates: ((desiredAccuracyInMeters: number, updateDistanceInMeters: number) => void) | ((desiredAccuracyInMeters: number) => void) | (() => void);
    static StopLocationServiceUpdates: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum iPhoneTouchPhase {
    Began = 0,
    Moved = 1,
    Stationary = 2,
    Ended = 3,
    Canceled = 4,
  }
  export declare class iPhoneTouch {
    positionDelta: UnityEngine.Vector2;
    timeDelta: number;
    fingerId: number;
    position: UnityEngine.Vector2;
    deltaPosition: UnityEngine.Vector2;
    deltaTime: number;
    tapCount: number;
    phase: UnityEngine.iPhoneTouchPhase;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum iPhoneMovieControlMode {
    Full = 0,
    Minimal = 1,
    CancelOnTouch = 2,
    Hidden = 3,
    VolumeOnly = 4,
  }
  export enum iPhoneMovieScalingMode {
    None = 0,
    AspectFit = 1,
    AspectFill = 2,
    Fill = 3,
  }
  export declare class iPhoneUtils {
    constructor();
    static isApplicationGenuine: boolean;
    static isApplicationGenuineAvailable: boolean;
    static PlayMovie: ((path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode, scalingMode: UnityEngine.iPhoneMovieScalingMode) => void) | ((path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode) => void) | ((path: string, bgColor: UnityEngine.Color) => void);
    static PlayMovieURL: ((url: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode, scalingMode: UnityEngine.iPhoneMovieScalingMode) => void) | ((url: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode) => void) | ((url: string, bgColor: UnityEngine.Color) => void);
    static Vibrate: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum iPhoneKeyboardType {
    Default = 0,
    ASCIICapable = 1,
    NumbersAndPunctuation = 2,
    URL = 3,
    NumberPad = 4,
    PhonePad = 5,
    NamePhonePad = 6,
    EmailAddress = 7,
  }
  export declare class iPhoneKeyboard {
    constructor();
    text: string;
    static hideInput: boolean;
    active: boolean;
    done: boolean;
    static area: UnityEngine.Rect;
    static visible: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class iPhoneAccelerationEvent {
    timeDelta: number;
    acceleration: UnityEngine.Vector3;
    deltaTime: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum iPhoneOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    LandscapeRight = 4,
    FaceUp = 5,
    FaceDown = 6,
  }
  export declare class iPhoneInput {
    constructor();
    static orientation: UnityEngine.iPhoneOrientation;
    static accelerationEvents: UnityEngine.iPhoneAccelerationEvent[];
    static touches: UnityEngine.iPhoneTouch[];
    static touchCount: number;
    static multiTouchEnabled: boolean;
    static accelerationEventCount: number;
    static acceleration: UnityEngine.Vector3;
    static GetTouch: ((index: number) => UnityEngine.iPhoneTouch);
    static GetAccelerationEvent: ((index: number) => UnityEngine.iPhoneAccelerationEvent);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class iPhone {
    constructor();
    static generation: UnityEngine.iPhoneGeneration;
    static vendorIdentifier: string;
    static advertisingIdentifier: string;
    static advertisingTrackingEnabled: boolean;
    static SetNoBackupFlag: ((path: string) => void);
    static ResetNoBackupFlag: ((path: string) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum iOSActivityIndicatorStyle {
    DontShow = 0,
    WhiteLarge = 1,
    White = 2,
    Gray = 3,
  }
  export enum CalendarIdentifier {
    GregorianCalendar = 0,
    BuddhistCalendar = 1,
    ChineseCalendar = 2,
    HebrewCalendar = 3,
    IslamicCalendar = 4,
    IslamicCivilCalendar = 5,
    JapaneseCalendar = 6,
    RepublicOfChinaCalendar = 7,
    PersianCalendar = 8,
    IndianCalendar = 9,
    ISO8601Calendar = 10,
  }
  export enum CalendarUnit {
    Era = 0,
    Year = 1,
    Month = 2,
    Day = 3,
    Hour = 4,
    Minute = 5,
    Second = 6,
    Week = 7,
    Weekday = 8,
    WeekdayOrdinal = 9,
    Quarter = 10,
  }
  export declare class LocalNotification {
    constructor();
    fireDate: System.DateTime;
    timeZone: string;
    repeatInterval: UnityEngine.CalendarUnit;
    repeatCalendar: UnityEngine.CalendarIdentifier;
    alertBody: string;
    alertAction: string;
    hasAction: boolean;
    alertLaunchImage: string;
    applicationIconBadgeNumber: number;
    soundName: string;
    static defaultSoundName: string;
    userInfo: System.Collections.IDictionary;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class RemoteNotification {
    constructor();
    alertBody: string;
    hasAction: boolean;
    applicationIconBadgeNumber: number;
    soundName: string;
    userInfo: System.Collections.IDictionary;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum RemoteNotificationType {
    None = 0,
    Badge = 1,
    Sound = 2,
    Alert = 3,
  }
  export declare class NotificationServices {
    constructor();
    static RegisterForRemoteNotificationTypes: ((notificationTypes: UnityEngine.RemoteNotificationType) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ADBannerView {
    constructor(type: UnityEngine.ADBannerView_Type, layout: UnityEngine.ADBannerView_Layout);
    loaded: boolean;
    visible: boolean;
    layout: UnityEngine.ADBannerView_Layout;
    position: UnityEngine.Vector2;
    size: UnityEngine.Vector2;
    static IsAvailable: ((type: UnityEngine.ADBannerView_Type) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum ADBannerView_Layout {
    Top = 0,
    Bottom = 1,
    TopLeft = 0,
    TopRight = 4,
    TopCenter = 8,
    BottomLeft = 1,
    BottomRight = 5,
    BottomCenter = 9,
    CenterLeft = 2,
    CenterRight = 6,
    Center = 10,
    Manual = -1,
  }
  export enum ADBannerView_Type {
    Banner = 0,
    MediumRect = 1,
  }
  export declare class ADBannerView_BannerWasClickedDelegate {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ADBannerView_BannerWasLoadedDelegate {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ADInterstitialAd {
    constructor(autoReload: boolean);
    constructor();
    static isAvailable: boolean;
    loaded: boolean;
    Show: (() => void);
    ReloadAd: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ADInterstitialAd_InterstitialWasLoadedDelegate {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export interface ILogger {
    logHandler: UnityEngine.ILogHandler;
    logEnabled: boolean;
    filterLogType: UnityEngine.LogType;
    IsLogTypeAllowed: ((logType: UnityEngine.LogType) => boolean);
    Log: ((logType: UnityEngine.LogType, message: System.Object) => void) | ((logType: UnityEngine.LogType, message: System.Object, context: UnityEngine.Object) => void) | ((logType: UnityEngine.LogType, tag: string, message: System.Object) => void) | ((logType: UnityEngine.LogType, tag: string, message: System.Object, context: UnityEngine.Object) => void) | ((message: System.Object) => void) | ((tag: string, message: System.Object) => void) | ((tag: string, message: System.Object, context: UnityEngine.Object) => void);
    LogWarning: ((tag: string, message: System.Object) => void) | ((tag: string, message: System.Object, context: UnityEngine.Object) => void);
    LogError: ((tag: string, message: System.Object) => void) | ((tag: string, message: System.Object, context: UnityEngine.Object) => void);
    LogFormat: ((logType: UnityEngine.LogType, format: string, ...args: System.Object[]) => void);
    LogException: ((exception: System.Exception) => void);
  }
  export interface ILogHandler {
    LogFormat: ((logType: UnityEngine.LogType, context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    LogException: ((exception: System.Exception, context: UnityEngine.Object) => void);
  }
  export declare class Logger {
    constructor(logHandler: UnityEngine.ILogHandler);
    logHandler: UnityEngine.ILogHandler;
    logEnabled: boolean;
    filterLogType: UnityEngine.LogType;
    IsLogTypeAllowed: ((logType: UnityEngine.LogType) => boolean);
    Log: ((logType: UnityEngine.LogType, message: System.Object) => void) | ((logType: UnityEngine.LogType, message: System.Object, context: UnityEngine.Object) => void) | ((logType: UnityEngine.LogType, tag: string, message: System.Object) => void) | ((logType: UnityEngine.LogType, tag: string, message: System.Object, context: UnityEngine.Object) => void) | ((message: System.Object) => void) | ((tag: string, message: System.Object) => void) | ((tag: string, message: System.Object, context: UnityEngine.Object) => void);
    LogWarning: ((tag: string, message: System.Object) => void) | ((tag: string, message: System.Object, context: UnityEngine.Object) => void);
    LogError: ((tag: string, message: System.Object) => void) | ((tag: string, message: System.Object, context: UnityEngine.Object) => void);
    LogFormat: ((logType: UnityEngine.LogType, format: string, ...args: System.Object[]) => void) | ((logType: UnityEngine.LogType, context: UnityEngine.Object, format: string, ...args: System.Object[]) => void);
    LogException: ((exception: System.Exception) => void) | ((exception: System.Exception, context: UnityEngine.Object) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Color {
    constructor(r: number, g: number, b: number, a: number);
    constructor(r: number, g: number, b: number);
    static red: UnityEngine.Color;
    static green: UnityEngine.Color;
    static blue: UnityEngine.Color;
    static white: UnityEngine.Color;
    static black: UnityEngine.Color;
    static yellow: UnityEngine.Color;
    static cyan: UnityEngine.Color;
    static magenta: UnityEngine.Color;
    static gray: UnityEngine.Color;
    static grey: UnityEngine.Color;
    static clear: UnityEngine.Color;
    grayscale: number;
    linear: UnityEngine.Color;
    gamma: UnityEngine.Color;
    maxColorComponent: number;
    r: number;
    g: number;
    b: number;
    a: number;
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Color) => boolean);
    static Lerp: ((a: UnityEngine.Color, b: UnityEngine.Color, t: number) => UnityEngine.Color);
    static LerpUnclamped: ((a: UnityEngine.Color, b: UnityEngine.Color, t: number) => UnityEngine.Color);
    static HSVToRGB: ((H: number, S: number, V: number) => UnityEngine.Color) | ((H: number, S: number, V: number, hdr: boolean) => UnityEngine.Color);
    GetType: (() => System.Type);
  }
  export declare class Color32 {
    constructor(r: System.Byte, g: System.Byte, b: System.Byte, a: System.Byte);
    r: System.Byte;
    g: System.Byte;
    b: System.Byte;
    a: System.Byte;
    static Lerp: ((a: UnityEngine.Color32, b: UnityEngine.Color32, t: number) => UnityEngine.Color32);
    static LerpUnclamped: ((a: UnityEngine.Color32, b: UnityEngine.Color32, t: number) => UnityEngine.Color32);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export declare class ColorUtility {
    constructor();
    static ToHtmlStringRGB: ((color: UnityEngine.Color) => string);
    static ToHtmlStringRGBA: ((color: UnityEngine.Color) => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GradientColorKey {
    constructor(col: UnityEngine.Color, time: number);
    color: UnityEngine.Color;
    time: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class GradientAlphaKey {
    constructor(alpha: number, time: number);
    alpha: number;
    time: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum GradientMode {
    Blend = 0,
    Fixed = 1,
  }
  export declare class Gradient {
    constructor();
    colorKeys: UnityEngine.GradientColorKey[];
    alphaKeys: UnityEngine.GradientAlphaKey[];
    mode: UnityEngine.GradientMode;
    Evaluate: ((time: number) => UnityEngine.Color);
    SetKeys: ((colorKeys: UnityEngine.GradientColorKey[], alphaKeys: UnityEngine.GradientAlphaKey[]) => void);
    Equals: ((o: System.Object) => boolean) | ((other: UnityEngine.Gradient) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class FrustumPlanes {
    left: number;
    right: number;
    bottom: number;
    top: number;
    zNear: number;
    zFar: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Matrix4x4 {
    constructor(column0: UnityEngine.Vector4, column1: UnityEngine.Vector4, column2: UnityEngine.Vector4, column3: UnityEngine.Vector4);
    rotation: UnityEngine.Quaternion;
    lossyScale: UnityEngine.Vector3;
    isIdentity: boolean;
    determinant: number;
    decomposeProjection: UnityEngine.FrustumPlanes;
    inverse: UnityEngine.Matrix4x4;
    transpose: UnityEngine.Matrix4x4;
    static zero: UnityEngine.Matrix4x4;
    static identity: UnityEngine.Matrix4x4;
    m00: number;
    m10: number;
    m20: number;
    m30: number;
    m01: number;
    m11: number;
    m21: number;
    m31: number;
    m02: number;
    m12: number;
    m22: number;
    m32: number;
    m03: number;
    m13: number;
    m23: number;
    m33: number;
    ValidTRS: (() => boolean);
    static Determinant: ((m: UnityEngine.Matrix4x4) => number);
    static TRS: ((pos: UnityEngine.Vector3, q: UnityEngine.Quaternion, s: UnityEngine.Vector3) => UnityEngine.Matrix4x4);
    SetTRS: ((pos: UnityEngine.Vector3, q: UnityEngine.Quaternion, s: UnityEngine.Vector3) => void);
    static Inverse: ((m: UnityEngine.Matrix4x4) => UnityEngine.Matrix4x4);
    static Transpose: ((m: UnityEngine.Matrix4x4) => UnityEngine.Matrix4x4);
    static Ortho: ((left: number, right: number, bottom: number, top: number, zNear: number, zFar: number) => UnityEngine.Matrix4x4);
    static Perspective: ((fov: number, aspect: number, zNear: number, zFar: number) => UnityEngine.Matrix4x4);
    static LookAt: ((from: UnityEngine.Vector3, to: UnityEngine.Vector3, up: UnityEngine.Vector3) => UnityEngine.Matrix4x4);
    static Frustum: ((left: number, right: number, bottom: number, top: number, zNear: number, zFar: number) => UnityEngine.Matrix4x4) | ((fp: UnityEngine.FrustumPlanes) => UnityEngine.Matrix4x4);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Matrix4x4) => boolean);
    GetColumn: ((index: number) => UnityEngine.Vector4);
    GetRow: ((index: number) => UnityEngine.Vector4);
    SetColumn: ((index: number, column: UnityEngine.Vector4) => void);
    SetRow: ((index: number, row: UnityEngine.Vector4) => void);
    MultiplyPoint: ((point: UnityEngine.Vector3) => UnityEngine.Vector3);
    MultiplyPoint3x4: ((point: UnityEngine.Vector3) => UnityEngine.Vector3);
    MultiplyVector: ((vector: UnityEngine.Vector3) => UnityEngine.Vector3);
    TransformPlane: ((plane: UnityEngine.Plane) => UnityEngine.Plane);
    static Scale: ((vector: UnityEngine.Vector3) => UnityEngine.Matrix4x4);
    static Translate: ((vector: UnityEngine.Vector3) => UnityEngine.Matrix4x4);
    static Rotate: ((q: UnityEngine.Quaternion) => UnityEngine.Matrix4x4);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    GetType: (() => System.Type);
  }
  export declare class Vector3 {
    constructor(x: number, y: number, z: number);
    constructor(x: number, y: number);
    normalized: UnityEngine.Vector3;
    magnitude: number;
    sqrMagnitude: number;
    static zero: UnityEngine.Vector3;
    static one: UnityEngine.Vector3;
    static forward: UnityEngine.Vector3;
    static back: UnityEngine.Vector3;
    static up: UnityEngine.Vector3;
    static down: UnityEngine.Vector3;
    static left: UnityEngine.Vector3;
    static right: UnityEngine.Vector3;
    static positiveInfinity: UnityEngine.Vector3;
    static negativeInfinity: UnityEngine.Vector3;
    static fwd: UnityEngine.Vector3;
    static kEpsilon: number;
    static kEpsilonNormalSqrt: number;
    x: number;
    y: number;
    z: number;
    static Slerp: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number) => UnityEngine.Vector3);
    static SlerpUnclamped: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number) => UnityEngine.Vector3);
    static RotateTowards: ((current: UnityEngine.Vector3, target: UnityEngine.Vector3, maxRadiansDelta: number, maxMagnitudeDelta: number) => UnityEngine.Vector3);
    static Lerp: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number) => UnityEngine.Vector3);
    static LerpUnclamped: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number) => UnityEngine.Vector3);
    static MoveTowards: ((current: UnityEngine.Vector3, target: UnityEngine.Vector3, maxDistanceDelta: number) => UnityEngine.Vector3);
    Set: ((newX: number, newY: number, newZ: number) => void);
    static Scale: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3) => UnityEngine.Vector3) | ((scale: UnityEngine.Vector3) => void);
    static Cross: ((lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3) => UnityEngine.Vector3);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Vector3) => boolean);
    static Reflect: ((inDirection: UnityEngine.Vector3, inNormal: UnityEngine.Vector3) => UnityEngine.Vector3);
    static Normalize: ((value: UnityEngine.Vector3) => UnityEngine.Vector3) | (() => void);
    static Dot: ((lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3) => number);
    static Project: ((vector: UnityEngine.Vector3, onNormal: UnityEngine.Vector3) => UnityEngine.Vector3);
    static ProjectOnPlane: ((vector: UnityEngine.Vector3, planeNormal: UnityEngine.Vector3) => UnityEngine.Vector3);
    static Angle: ((from: UnityEngine.Vector3, to: UnityEngine.Vector3) => number);
    static SignedAngle: ((from: UnityEngine.Vector3, to: UnityEngine.Vector3, axis: UnityEngine.Vector3) => number);
    static Distance: ((a: UnityEngine.Vector3, b: UnityEngine.Vector3) => number);
    static ClampMagnitude: ((vector: UnityEngine.Vector3, maxLength: number) => UnityEngine.Vector3);
    static Magnitude: ((vector: UnityEngine.Vector3) => number);
    static SqrMagnitude: ((vector: UnityEngine.Vector3) => number);
    static Min: ((lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3) => UnityEngine.Vector3);
    static Max: ((lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3) => UnityEngine.Vector3);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    static AngleBetween: ((from: UnityEngine.Vector3, to: UnityEngine.Vector3) => number);
    static Exclude: ((excludeThis: UnityEngine.Vector3, fromThat: UnityEngine.Vector3) => UnityEngine.Vector3);
    GetType: (() => System.Type);
  }
  export declare class Quaternion {
    constructor(x: number, y: number, z: number, w: number);
    static identity: UnityEngine.Quaternion;
    eulerAngles: UnityEngine.Vector3;
    normalized: UnityEngine.Quaternion;
    x: number;
    y: number;
    z: number;
    w: number;
    static kEpsilon: number;
    static FromToRotation: ((fromDirection: UnityEngine.Vector3, toDirection: UnityEngine.Vector3) => UnityEngine.Quaternion);
    static Inverse: ((rotation: UnityEngine.Quaternion) => UnityEngine.Quaternion);
    static Slerp: ((a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number) => UnityEngine.Quaternion);
    static SlerpUnclamped: ((a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number) => UnityEngine.Quaternion);
    static Lerp: ((a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number) => UnityEngine.Quaternion);
    static LerpUnclamped: ((a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number) => UnityEngine.Quaternion);
    static AngleAxis: ((angle: number, axis: UnityEngine.Vector3) => UnityEngine.Quaternion);
    static LookRotation: ((forward: UnityEngine.Vector3, upwards: UnityEngine.Vector3) => UnityEngine.Quaternion) | ((forward: UnityEngine.Vector3) => UnityEngine.Quaternion);
    Set: ((newX: number, newY: number, newZ: number, newW: number) => void);
    static Dot: ((a: UnityEngine.Quaternion, b: UnityEngine.Quaternion) => number);
    SetLookRotation: ((view: UnityEngine.Vector3) => void) | ((view: UnityEngine.Vector3, up: UnityEngine.Vector3) => void);
    static Angle: ((a: UnityEngine.Quaternion, b: UnityEngine.Quaternion) => number);
    static Euler: ((x: number, y: number, z: number) => UnityEngine.Quaternion) | ((euler: UnityEngine.Vector3) => UnityEngine.Quaternion);
    SetFromToRotation: ((fromDirection: UnityEngine.Vector3, toDirection: UnityEngine.Vector3) => void);
    static RotateTowards: ((from: UnityEngine.Quaternion, to: UnityEngine.Quaternion, maxDegreesDelta: number) => UnityEngine.Quaternion);
    static Normalize: ((q: UnityEngine.Quaternion) => UnityEngine.Quaternion) | (() => void);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Quaternion) => boolean);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    static EulerRotation: ((x: number, y: number, z: number) => UnityEngine.Quaternion) | ((euler: UnityEngine.Vector3) => UnityEngine.Quaternion);
    SetEulerRotation: ((x: number, y: number, z: number) => void) | ((euler: UnityEngine.Vector3) => void);
    ToEuler: (() => UnityEngine.Vector3);
    static EulerAngles: ((x: number, y: number, z: number) => UnityEngine.Quaternion) | ((euler: UnityEngine.Vector3) => UnityEngine.Quaternion);
    SetEulerAngles: ((x: number, y: number, z: number) => void) | ((euler: UnityEngine.Vector3) => void);
    static ToEulerAngles: ((rotation: UnityEngine.Quaternion) => UnityEngine.Vector3) | (() => UnityEngine.Vector3);
    SetAxisAngle: ((axis: UnityEngine.Vector3, angle: number) => void);
    static AxisAngle: ((axis: UnityEngine.Vector3, angle: number) => UnityEngine.Quaternion);
    GetType: (() => System.Type);
  }
  export declare class Mathf {
    static PI: number;
    static Infinity: number;
    static NegativeInfinity: number;
    static Deg2Rad: number;
    static Rad2Deg: number;
    static Epsilon: number;
    static ClosestPowerOfTwo: ((value: number) => number);
    static IsPowerOfTwo: ((value: number) => boolean);
    static NextPowerOfTwo: ((value: number) => number);
    static GammaToLinearSpace: ((value: number) => number);
    static LinearToGammaSpace: ((value: number) => number);
    static CorrelatedColorTemperatureToRGB: ((kelvin: number) => UnityEngine.Color);
    static FloatToHalf: ((val: number) => System.UInt16);
    static HalfToFloat: ((val: System.UInt16) => number);
    static PerlinNoise: ((x: number, y: number) => number);
    static Sin: ((f: number) => number);
    static Cos: ((f: number) => number);
    static Tan: ((f: number) => number);
    static Asin: ((f: number) => number);
    static Acos: ((f: number) => number);
    static Atan: ((f: number) => number);
    static Atan2: ((y: number, x: number) => number);
    static Sqrt: ((f: number) => number);
    static Abs: ((f: number) => number) | ((value: number) => number);
    static Min: ((a: number, b: number) => number) | ((...values: number[]) => number) | ((a: number, b: number) => number) | ((...values: number[]) => number);
    static Max: ((a: number, b: number) => number) | ((...values: number[]) => number) | ((a: number, b: number) => number) | ((...values: number[]) => number);
    static Pow: ((f: number, p: number) => number);
    static Exp: ((power: number) => number);
    static Log: ((f: number, p: number) => number) | ((f: number) => number);
    static Log10: ((f: number) => number);
    static Ceil: ((f: number) => number);
    static Floor: ((f: number) => number);
    static Round: ((f: number) => number);
    static CeilToInt: ((f: number) => number);
    static FloorToInt: ((f: number) => number);
    static RoundToInt: ((f: number) => number);
    static Sign: ((f: number) => number);
    static Clamp: ((value: number, min: number, max: number) => number) | ((value: number, min: number, max: number) => number);
    static Clamp01: ((value: number) => number);
    static Lerp: ((a: number, b: number, t: number) => number);
    static LerpUnclamped: ((a: number, b: number, t: number) => number);
    static LerpAngle: ((a: number, b: number, t: number) => number);
    static MoveTowards: ((current: number, target: number, maxDelta: number) => number);
    static MoveTowardsAngle: ((current: number, target: number, maxDelta: number) => number);
    static SmoothStep: ((from: number, to: number, t: number) => number);
    static Gamma: ((value: number, absmax: number, gamma: number) => number);
    static Approximately: ((a: number, b: number) => boolean);
    static Repeat: ((t: number, length: number) => number);
    static PingPong: ((t: number, length: number) => number);
    static InverseLerp: ((a: number, b: number, value: number) => number);
    static DeltaAngle: ((current: number, target: number) => number);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Vector2 {
    constructor(x: number, y: number);
    normalized: UnityEngine.Vector2;
    magnitude: number;
    sqrMagnitude: number;
    static zero: UnityEngine.Vector2;
    static one: UnityEngine.Vector2;
    static up: UnityEngine.Vector2;
    static down: UnityEngine.Vector2;
    static left: UnityEngine.Vector2;
    static right: UnityEngine.Vector2;
    static positiveInfinity: UnityEngine.Vector2;
    static negativeInfinity: UnityEngine.Vector2;
    x: number;
    y: number;
    static kEpsilon: number;
    static kEpsilonNormalSqrt: number;
    Set: ((newX: number, newY: number) => void);
    static Lerp: ((a: UnityEngine.Vector2, b: UnityEngine.Vector2, t: number) => UnityEngine.Vector2);
    static LerpUnclamped: ((a: UnityEngine.Vector2, b: UnityEngine.Vector2, t: number) => UnityEngine.Vector2);
    static MoveTowards: ((current: UnityEngine.Vector2, target: UnityEngine.Vector2, maxDistanceDelta: number) => UnityEngine.Vector2);
    static Scale: ((a: UnityEngine.Vector2, b: UnityEngine.Vector2) => UnityEngine.Vector2) | ((scale: UnityEngine.Vector2) => void);
    Normalize: (() => void);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Vector2) => boolean);
    static Reflect: ((inDirection: UnityEngine.Vector2, inNormal: UnityEngine.Vector2) => UnityEngine.Vector2);
    static Perpendicular: ((inDirection: UnityEngine.Vector2) => UnityEngine.Vector2);
    static Dot: ((lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2) => number);
    static Angle: ((from: UnityEngine.Vector2, to: UnityEngine.Vector2) => number);
    static SignedAngle: ((from: UnityEngine.Vector2, to: UnityEngine.Vector2) => number);
    static Distance: ((a: UnityEngine.Vector2, b: UnityEngine.Vector2) => number);
    static ClampMagnitude: ((vector: UnityEngine.Vector2, maxLength: number) => UnityEngine.Vector2);
    static SqrMagnitude: ((a: UnityEngine.Vector2) => number) | (() => number);
    static Min: ((lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2) => UnityEngine.Vector2);
    static Max: ((lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2) => UnityEngine.Vector2);
    GetType: (() => System.Type);
  }
  export declare class Vector2Int {
    constructor(x: number, y: number);
    x: number;
    y: number;
    magnitude: number;
    sqrMagnitude: number;
    static zero: UnityEngine.Vector2Int;
    static one: UnityEngine.Vector2Int;
    static up: UnityEngine.Vector2Int;
    static down: UnityEngine.Vector2Int;
    static left: UnityEngine.Vector2Int;
    static right: UnityEngine.Vector2Int;
    Set: ((x: number, y: number) => void);
    static Distance: ((a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int) => number);
    static Min: ((lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int) => UnityEngine.Vector2Int);
    static Max: ((lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int) => UnityEngine.Vector2Int);
    static Scale: ((a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int) => UnityEngine.Vector2Int) | ((scale: UnityEngine.Vector2Int) => void);
    Clamp: ((min: UnityEngine.Vector2Int, max: UnityEngine.Vector2Int) => void);
    static FloorToInt: ((v: UnityEngine.Vector2) => UnityEngine.Vector2Int);
    static CeilToInt: ((v: UnityEngine.Vector2) => UnityEngine.Vector2Int);
    static RoundToInt: ((v: UnityEngine.Vector2) => UnityEngine.Vector2Int);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Vector2Int) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    GetType: (() => System.Type);
  }
  export declare class Vector3Int {
    constructor(x: number, y: number, z: number);
    x: number;
    y: number;
    z: number;
    magnitude: number;
    sqrMagnitude: number;
    static zero: UnityEngine.Vector3Int;
    static one: UnityEngine.Vector3Int;
    static up: UnityEngine.Vector3Int;
    static down: UnityEngine.Vector3Int;
    static left: UnityEngine.Vector3Int;
    static right: UnityEngine.Vector3Int;
    static forward: UnityEngine.Vector3Int;
    static back: UnityEngine.Vector3Int;
    Set: ((x: number, y: number, z: number) => void);
    static Distance: ((a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int) => number);
    static Min: ((lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int) => UnityEngine.Vector3Int);
    static Max: ((lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int) => UnityEngine.Vector3Int);
    static Scale: ((a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int) => UnityEngine.Vector3Int) | ((scale: UnityEngine.Vector3Int) => void);
    Clamp: ((min: UnityEngine.Vector3Int, max: UnityEngine.Vector3Int) => void);
    static FloorToInt: ((v: UnityEngine.Vector3) => UnityEngine.Vector3Int);
    static CeilToInt: ((v: UnityEngine.Vector3) => UnityEngine.Vector3Int);
    static RoundToInt: ((v: UnityEngine.Vector3) => UnityEngine.Vector3Int);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Vector3Int) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    GetType: (() => System.Type);
  }
  export declare class Vector4 {
    constructor(x: number, y: number, z: number, w: number);
    constructor(x: number, y: number, z: number);
    constructor(x: number, y: number);
    normalized: UnityEngine.Vector4;
    magnitude: number;
    sqrMagnitude: number;
    static zero: UnityEngine.Vector4;
    static one: UnityEngine.Vector4;
    static positiveInfinity: UnityEngine.Vector4;
    static negativeInfinity: UnityEngine.Vector4;
    static kEpsilon: number;
    x: number;
    y: number;
    z: number;
    w: number;
    Set: ((newX: number, newY: number, newZ: number, newW: number) => void);
    static Lerp: ((a: UnityEngine.Vector4, b: UnityEngine.Vector4, t: number) => UnityEngine.Vector4);
    static LerpUnclamped: ((a: UnityEngine.Vector4, b: UnityEngine.Vector4, t: number) => UnityEngine.Vector4);
    static MoveTowards: ((current: UnityEngine.Vector4, target: UnityEngine.Vector4, maxDistanceDelta: number) => UnityEngine.Vector4);
    static Scale: ((a: UnityEngine.Vector4, b: UnityEngine.Vector4) => UnityEngine.Vector4) | ((scale: UnityEngine.Vector4) => void);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Vector4) => boolean);
    static Normalize: ((a: UnityEngine.Vector4) => UnityEngine.Vector4) | (() => void);
    static Dot: ((a: UnityEngine.Vector4, b: UnityEngine.Vector4) => number);
    static Project: ((a: UnityEngine.Vector4, b: UnityEngine.Vector4) => UnityEngine.Vector4);
    static Distance: ((a: UnityEngine.Vector4, b: UnityEngine.Vector4) => number);
    static Magnitude: ((a: UnityEngine.Vector4) => number);
    static Min: ((lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4) => UnityEngine.Vector4);
    static Max: ((lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4) => UnityEngine.Vector4);
    ToString: (() => string) | ((format: string) => string) | ((format: string, formatProvider: System.IFormatProvider) => string);
    static SqrMagnitude: ((a: UnityEngine.Vector4) => number) | (() => number);
    GetType: (() => System.Type);
  }
  export enum RPCMode {
  }
  export enum ConnectionTesterStatus {
  }
  export enum NetworkConnectionError {
  }
  export enum NetworkDisconnection {
  }
  export enum MasterServerEvent {
  }
  export enum NetworkStateSynchronization {
  }
  export enum NetworkPeerType {
  }
  export enum NetworkLogLevel {
  }
  export declare class NetworkPlayer {
    constructor(ip: string, port: number);
    ipAddress: string;
    port: number;
    guid: string;
    externalIP: string;
    externalPort: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class NetworkViewID {
    static unassigned: UnityEngine.NetworkViewID;
    isMine: boolean;
    owner: UnityEngine.NetworkPlayer;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class NetworkView {
    constructor();
    observed: UnityEngine.Component;
    stateSynchronization: UnityEngine.NetworkStateSynchronization;
    viewID: UnityEngine.NetworkViewID;
    group: number;
    isMine: boolean;
    owner: UnityEngine.NetworkPlayer;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    RPC: ((name: string, mode: UnityEngine.RPCMode, ...args: System.Object[]) => void) | ((name: string, target: UnityEngine.NetworkPlayer, ...args: System.Object[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Network {
    constructor();
    static incomingPassword: string;
    static logLevel: UnityEngine.NetworkLogLevel;
    static connections: UnityEngine.NetworkPlayer[];
    static player: UnityEngine.NetworkPlayer;
    static isClient: boolean;
    static isServer: boolean;
    static peerType: UnityEngine.NetworkPeerType;
    static sendRate: number;
    static isMessageQueueRunning: boolean;
    static time: number;
    static minimumAllocatableViewIDs: number;
    static useNat: boolean;
    static natFacilitatorIP: string;
    static natFacilitatorPort: number;
    static connectionTesterIP: string;
    static connectionTesterPort: number;
    static maxConnections: number;
    static proxyIP: string;
    static proxyPort: number;
    static useProxy: boolean;
    static proxyPassword: string;
    static InitializeServer: ((connections: number, listenPort: number, useNat: boolean) => UnityEngine.NetworkConnectionError) | ((connections: number, listenPort: number) => UnityEngine.NetworkConnectionError);
    static InitializeSecurity: (() => void);
    static Connect: ((IP: string, remotePort: number) => UnityEngine.NetworkConnectionError) | ((IP: string, remotePort: number, password: string) => UnityEngine.NetworkConnectionError) | ((IPs: string[], remotePort: number) => UnityEngine.NetworkConnectionError) | ((IPs: string[], remotePort: number, password: string) => UnityEngine.NetworkConnectionError) | ((GUID: string) => UnityEngine.NetworkConnectionError) | ((GUID: string, password: string) => UnityEngine.NetworkConnectionError) | ((hostData: UnityEngine.HostData) => UnityEngine.NetworkConnectionError) | ((hostData: UnityEngine.HostData, password: string) => UnityEngine.NetworkConnectionError);
    static Disconnect: (() => void) | ((timeout: number) => void);
    static CloseConnection: ((target: UnityEngine.NetworkPlayer, sendDisconnectionNotification: boolean) => void);
    static AllocateViewID: (() => UnityEngine.NetworkViewID);
    static Instantiate: ((prefab: UnityEngine.Object, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, group: number) => UnityEngine.Object);
    static Destroy: ((viewID: UnityEngine.NetworkViewID) => void) | ((gameObject: UnityEngine.GameObject) => void);
    static DestroyPlayerObjects: ((playerID: UnityEngine.NetworkPlayer) => void);
    static RemoveRPCs: ((playerID: UnityEngine.NetworkPlayer) => void) | ((playerID: UnityEngine.NetworkPlayer, group: number) => void) | ((viewID: UnityEngine.NetworkViewID) => void);
    static RemoveRPCsInGroup: ((group: number) => void);
    static SetLevelPrefix: ((prefix: number) => void);
    static GetLastPing: ((player: UnityEngine.NetworkPlayer) => number);
    static GetAveragePing: ((player: UnityEngine.NetworkPlayer) => number);
    static SetReceivingEnabled: ((player: UnityEngine.NetworkPlayer, group: number, enabled: boolean) => void);
    static SetSendingEnabled: ((group: number, enabled: boolean) => void) | ((player: UnityEngine.NetworkPlayer, group: number, enabled: boolean) => void);
    static TestConnection: (() => UnityEngine.ConnectionTesterStatus) | ((forceTest: boolean) => UnityEngine.ConnectionTesterStatus);
    static TestConnectionNAT: (() => UnityEngine.ConnectionTesterStatus) | ((forceTest: boolean) => UnityEngine.ConnectionTesterStatus);
    static HavePublicAddress: (() => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class BitStream {
    constructor();
    isReading: boolean;
    isWriting: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class HostData {
    constructor();
    useNat: boolean;
    gameType: string;
    gameName: string;
    connectedPlayers: number;
    playerLimit: number;
    ip: string[];
    port: number;
    passwordProtected: boolean;
    comment: string;
    guid: string;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class MasterServer {
    constructor();
    static ipAddress: string;
    static port: number;
    static updateRate: number;
    static dedicatedServer: boolean;
    static RequestHostList: ((gameTypeName: string) => void);
    static PollHostList: (() => UnityEngine.HostData[]);
    static RegisterHost: ((gameTypeName: string, gameName: string) => void) | ((gameTypeName: string, gameName: string, comment: string) => void);
    static UnregisterHost: (() => void);
    static ClearHostList: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class NetworkMessageInfo {
    timestamp: number;
    sender: UnityEngine.NetworkPlayer;
    networkView: UnityEngine.NetworkView;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Ping {
    constructor(address: string);
    isDone: boolean;
    time: number;
    ip: string;
    DestroyPing: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class PlayerPrefsException {
    constructor(error: string);
    Message: string;
    Data: System.Collections.IDictionary;
    InnerException: System.Exception;
    TargetSite: System.Reflection.MethodBase;
    StackTrace: string;
    HelpLink: string;
    Source: string;
    HResult: number;
    GetBaseException: (() => System.Exception);
    ToString: (() => string);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    GetType: (() => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
  }
  export declare class PlayerPrefs {
    constructor();
    static SetInt: ((key: string, value: number) => void);
    static GetInt: ((key: string, defaultValue: number) => number) | ((key: string) => number);
    static SetFloat: ((key: string, value: number) => void);
    static GetFloat: ((key: string, defaultValue: number) => number) | ((key: string) => number);
    static SetString: ((key: string, value: string) => void);
    static GetString: ((key: string, defaultValue: string) => string) | ((key: string) => string);
    static HasKey: ((key: string) => boolean);
    static DeleteKey: ((key: string) => void);
    static DeleteAll: (() => void);
    static Save: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class PropertyName {
    constructor(name: string);
    constructor(other: UnityEngine.PropertyName);
    constructor(id: number);
    static IsNullOrEmpty: ((prop: UnityEngine.PropertyName) => boolean);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.PropertyName) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Random {
    static state: UnityEngine.Random_State;
    static value: number;
    static insideUnitSphere: UnityEngine.Vector3;
    static insideUnitCircle: UnityEngine.Vector2;
    static onUnitSphere: UnityEngine.Vector3;
    static rotation: UnityEngine.Quaternion;
    static rotationUniform: UnityEngine.Quaternion;
    static seed: number;
    static InitState: ((seed: number) => void);
    static Range: ((minInclusive: number, maxInclusive: number) => number) | ((minInclusive: number, maxExclusive: number) => number);
    static RandomRange: ((min: number, max: number) => number) | ((min: number, max: number) => number);
    static ColorHSV: (() => UnityEngine.Color) | ((hueMin: number, hueMax: number) => UnityEngine.Color) | ((hueMin: number, hueMax: number, saturationMin: number, saturationMax: number) => UnityEngine.Color) | ((hueMin: number, hueMax: number, saturationMin: number, saturationMax: number, valueMin: number, valueMax: number) => UnityEngine.Color) | ((hueMin: number, hueMax: number, saturationMin: number, saturationMax: number, valueMin: number, valueMax: number, alphaMin: number, alphaMax: number) => UnityEngine.Color);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Random_State {
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class ResourceRequest {
    constructor();
    asset: UnityEngine.Object;
    isDone: boolean;
    progress: number;
    priority: number;
    allowSceneActivation: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ResourcesAPI {
    static overrideAPI: UnityEngine.ResourcesAPI;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Resources {
    constructor();
    static FindObjectsOfTypeAll: ((type: System.Type) => UnityEngine.Object[]);
    static Load: ((path: string) => UnityEngine.Object) | ((path: string, systemTypeInstance: System.Type) => UnityEngine.Object);
    static LoadAsync: ((path: string) => UnityEngine.ResourceRequest) | ((path: string, type: System.Type) => UnityEngine.ResourceRequest);
    static LoadAll: ((path: string, systemTypeInstance: System.Type) => UnityEngine.Object[]) | ((path: string) => UnityEngine.Object[]);
    static GetBuiltinResource: ((type: System.Type, path: string) => UnityEngine.Object);
    static UnloadAsset: ((assetToUnload: UnityEngine.Object) => void);
    static UnloadUnusedAssets: (() => UnityEngine.AsyncOperation);
    static InstanceIDToObject: ((instanceID: number) => UnityEngine.Object);
    static InstanceIDToObjectList: ((instanceIDs: any, objects: UnityEngine.Object[]) => void);
    static LoadAssetAtPath: ((assetPath: string, type: System.Type) => UnityEngine.Object);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AsyncOperation {
    constructor();
    isDone: boolean;
    progress: number;
    priority: number;
    allowSceneActivation: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Behaviour {
    constructor();
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Component {
    constructor();
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Coroutine {
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class CustomYieldInstruction {
    keepWaiting: boolean;
    Current: System.Object;
    MoveNext: (() => boolean);
    Reset: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GameObject {
    constructor(name: string);
    constructor();
    constructor(name: string, ...components: System.Type[]);
    transform: UnityEngine.Transform;
    layer: number;
    active: boolean;
    activeSelf: boolean;
    activeInHierarchy: boolean;
    isStatic: boolean;
    tag: string;
    scene: UnityEngine.SceneManagement.Scene;
    sceneCullingMask: System.UInt64;
    gameObject: UnityEngine.GameObject;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static CreatePrimitive: ((type: UnityEngine.PrimitiveType) => UnityEngine.GameObject);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((type: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((type: System.Type) => UnityEngine.Component);
    GetComponentInParent: ((type: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((type: System.Type) => UnityEngine.Component);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    GetComponentsInChildren: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, includeInactive: boolean) => UnityEngine.Component[]);
    GetComponentsInParent: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, includeInactive: boolean) => UnityEngine.Component[]);
    static FindWithTag: ((tag: string) => UnityEngine.GameObject);
    SendMessageUpwards: ((methodName: string, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void);
    SendMessage: ((methodName: string, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void);
    BroadcastMessage: ((methodName: string, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void);
    AddComponent: ((componentType: System.Type) => UnityEngine.Component) | ((className: string) => UnityEngine.Component);
    SetActive: ((value: boolean) => void);
    SetActiveRecursively: ((state: boolean) => void);
    CompareTag: ((tag: string) => boolean);
    static FindGameObjectWithTag: ((tag: string) => UnityEngine.GameObject);
    static FindGameObjectsWithTag: ((tag: string) => UnityEngine.GameObject[]);
    static Find: ((name: string) => UnityEngine.GameObject);
    SampleAnimation: ((clip: UnityEngine.Object, time: number) => void);
    PlayAnimation: ((animation: UnityEngine.Object) => void);
    StopAnimation: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LayerMask {
    value: number;
    static LayerToName: ((layer: number) => string);
    static NameToLayer: ((layerName: string) => number);
    static GetMask: ((...layerNames: string[]) => number);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class LazyLoadReference<T = any> {
    constructor(asset: T);
    constructor(instanceID: number);
    isSet: boolean;
    isBroken: boolean;
    asset: T;
    instanceID: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class MonoBehaviour {
    constructor();
    useGUILayout: boolean;
    runInEditMode: boolean;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    IsInvoking: (() => boolean) | ((methodName: string) => boolean);
    CancelInvoke: (() => void) | ((methodName: string) => void);
    Invoke: ((methodName: string, time: number) => void);
    InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
    StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
    StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
    StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
    StopAllCoroutines: (() => void);
    static print: ((message: System.Object) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RangeInt {
    constructor(start: number, length: number);
    end: number;
    start: number;
    length: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum RuntimeInitializeLoadType {
    AfterSceneLoad = 0,
    BeforeSceneLoad = 1,
    AfterAssembliesLoaded = 2,
    BeforeSplashScreen = 3,
    SubsystemRegistration = 4,
  }
  export declare class ScriptableObject {
    constructor();
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SetDirty: (() => void);
    static CreateInstance: ((className: string) => UnityEngine.ScriptableObject) | ((type: System.Type) => UnityEngine.ScriptableObject);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class StackTraceUtility {
    static ExtractStackTrace: (() => string);
    static ExtractStringFromException: ((exception: System.Object) => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class UnityException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
    Message: string;
    Data: System.Collections.IDictionary;
    InnerException: System.Exception;
    TargetSite: System.Reflection.MethodBase;
    StackTrace: string;
    HelpLink: string;
    Source: string;
    HResult: number;
    GetBaseException: (() => System.Exception);
    ToString: (() => string);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    GetType: (() => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
  }
  export declare class MissingComponentException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
    Message: string;
    Data: System.Collections.IDictionary;
    InnerException: System.Exception;
    TargetSite: System.Reflection.MethodBase;
    StackTrace: string;
    HelpLink: string;
    Source: string;
    HResult: number;
    GetBaseException: (() => System.Exception);
    ToString: (() => string);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    GetType: (() => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
  }
  export declare class UnassignedReferenceException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
    Message: string;
    Data: System.Collections.IDictionary;
    InnerException: System.Exception;
    TargetSite: System.Reflection.MethodBase;
    StackTrace: string;
    HelpLink: string;
    Source: string;
    HResult: number;
    GetBaseException: (() => System.Exception);
    ToString: (() => string);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    GetType: (() => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
  }
  export declare class MissingReferenceException {
    constructor();
    constructor(message: string);
    constructor(message: string, innerException: System.Exception);
    Message: string;
    Data: System.Collections.IDictionary;
    InnerException: System.Exception;
    TargetSite: System.Reflection.MethodBase;
    StackTrace: string;
    HelpLink: string;
    Source: string;
    HResult: number;
    GetBaseException: (() => System.Exception);
    ToString: (() => string);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    GetType: (() => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
  }
  export declare class TextAsset {
    constructor();
    constructor(text: string);
    bytes: System.Byte[];
    text: string;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    ToString: (() => string);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    GetType: (() => System.Type);
  }
  export declare class TrackedReference {
    Equals: ((o: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum HideFlags {
    None = 0,
    HideInHierarchy = 1,
    HideInInspector = 2,
    DontSaveInEditor = 4,
    NotEditable = 8,
    DontSaveInBuild = 16,
    DontUnloadUnusedAsset = 32,
    DontSave = 52,
    HideAndDontSave = 61,
  }
  export declare class Object {
    constructor();
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    static Instantiate: ((original: UnityEngine.Object, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => UnityEngine.Object) | ((original: UnityEngine.Object, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, parent: UnityEngine.Transform) => UnityEngine.Object) | ((original: UnityEngine.Object) => UnityEngine.Object) | ((original: UnityEngine.Object, parent: UnityEngine.Transform) => UnityEngine.Object) | ((original: UnityEngine.Object, parent: UnityEngine.Transform, instantiateInWorldSpace: boolean) => UnityEngine.Object);
    static Destroy: ((obj: UnityEngine.Object, t: number) => void) | ((obj: UnityEngine.Object) => void);
    static DestroyImmediate: ((obj: UnityEngine.Object, allowDestroyingAssets: boolean) => void) | ((obj: UnityEngine.Object) => void);
    static FindObjectsOfType: ((type: System.Type) => UnityEngine.Object[]) | ((type: System.Type, includeInactive: boolean) => UnityEngine.Object[]);
    static DontDestroyOnLoad: ((target: UnityEngine.Object) => void);
    static DestroyObject: ((obj: UnityEngine.Object, t: number) => void) | ((obj: UnityEngine.Object) => void);
    static FindSceneObjectsOfType: ((type: System.Type) => UnityEngine.Object[]);
    static FindObjectsOfTypeIncludingAssets: ((type: System.Type) => UnityEngine.Object[]);
    static FindObjectsOfTypeAll: ((type: System.Type) => UnityEngine.Object[]);
    static FindObjectOfType: ((type: System.Type) => UnityEngine.Object) | ((type: System.Type, includeInactive: boolean) => UnityEngine.Object);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class WaitForEndOfFrame {
    constructor();
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class WaitForFixedUpdate {
    constructor();
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class WaitForSeconds {
    constructor(seconds: number);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class WaitForSecondsRealtime {
    constructor(time: number);
    waitTime: number;
    keepWaiting: boolean;
    Current: System.Object;
    Reset: (() => void);
    MoveNext: (() => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class WaitUntil {
    constructor(predicate: ((arg0: boolean) => boolean));
    keepWaiting: boolean;
    Current: System.Object;
    MoveNext: (() => boolean);
    Reset: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class WaitWhile {
    constructor(predicate: ((arg0: boolean) => boolean));
    keepWaiting: boolean;
    Current: System.Object;
    MoveNext: (() => boolean);
    Reset: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class YieldInstruction {
    constructor();
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Security {
    constructor();
    static LoadAndVerifyAssembly: ((assemblyData: System.Byte[], authorizationKey: string) => System.Reflection.Assembly) | ((assemblyData: System.Byte[]) => System.Reflection.Assembly);
    static PrefetchSocketPolicy: ((ip: string, atPort: number) => boolean) | ((ip: string, atPort: number, timeout: number) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Types {
    static GetType: ((typeName: string, assemblyName: string) => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
  }
  export interface ISerializationCallbackReceiver {
    OnBeforeSerialize: (() => void);
    OnAfterDeserialize: (() => void);
  }
  export declare class ComputeBuffer {
    constructor(count: number, stride: number);
    constructor(count: number, stride: number, type: UnityEngine.ComputeBufferType);
    constructor(count: number, stride: number, type: UnityEngine.ComputeBufferType, usage: UnityEngine.ComputeBufferMode);
    count: number;
    stride: number;
    name: string;
    Dispose: (() => void);
    Release: (() => void);
    IsValid: (() => boolean);
    SetData: ((data: System.Array) => void) | ((data: System.Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number) => void);
    GetData: ((data: System.Array) => void) | ((data: System.Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number) => void);
    SetCounterValue: ((counterValue: System.UInt32) => void);
    static CopyCount: ((src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number) => void);
    GetNativeBufferPtr: (() => System.IntPtr);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ShaderVariantCollection {
    constructor();
    shaderCount: number;
    variantCount: number;
    isWarmedUp: boolean;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Clear: (() => void);
    WarmUp: (() => void);
    Add: ((variant: UnityEngine.ShaderVariantCollection_ShaderVariant) => boolean);
    Remove: ((variant: UnityEngine.ShaderVariantCollection_ShaderVariant) => boolean);
    Contains: ((variant: UnityEngine.ShaderVariantCollection_ShaderVariant) => boolean);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class ShaderVariantCollection_ShaderVariant {
    constructor(shader: UnityEngine.Shader, passType: UnityEngine.Rendering.PassType, ...keywords: string[]);
    shader: UnityEngine.Shader;
    passType: UnityEngine.Rendering.PassType;
    keywords: string[];
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class ComputeShader {
    shaderKeywords: string[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    FindKernel: ((name: string) => number);
    HasKernel: ((name: string) => boolean);
    SetFloat: ((nameID: number, val: number) => void) | ((name: string, val: number) => void);
    SetInt: ((nameID: number, val: number) => void) | ((name: string, val: number) => void);
    SetVector: ((nameID: number, val: UnityEngine.Vector4) => void) | ((name: string, val: UnityEngine.Vector4) => void);
    SetMatrix: ((nameID: number, val: UnityEngine.Matrix4x4) => void) | ((name: string, val: UnityEngine.Matrix4x4) => void);
    SetVectorArray: ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((name: string, values: UnityEngine.Vector4[]) => void);
    SetMatrixArray: ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((name: string, values: UnityEngine.Matrix4x4[]) => void);
    SetTexture: ((kernelIndex: number, nameID: number, texture: UnityEngine.Texture, mipLevel: number) => void) | ((kernelIndex: number, nameID: number, texture: UnityEngine.Texture) => void) | ((kernelIndex: number, name: string, texture: UnityEngine.Texture) => void) | ((kernelIndex: number, name: string, texture: UnityEngine.Texture, mipLevel: number) => void) | ((kernelIndex: number, nameID: number, texture: UnityEngine.RenderTexture, mipLevel: number, element: UnityEngine.Rendering.RenderTextureSubElement) => void) | ((kernelIndex: number, name: string, texture: UnityEngine.RenderTexture, mipLevel: number, element: UnityEngine.Rendering.RenderTextureSubElement) => void);
    SetTextureFromGlobal: ((kernelIndex: number, nameID: number, globalTextureNameID: number) => void) | ((kernelIndex: number, name: string, globalTextureName: string) => void);
    SetBuffer: ((kernelIndex: number, nameID: number, buffer: UnityEngine.ComputeBuffer) => void) | ((kernelIndex: number, nameID: number, buffer: UnityEngine.GraphicsBuffer) => void) | ((kernelIndex: number, name: string, buffer: UnityEngine.ComputeBuffer) => void) | ((kernelIndex: number, name: string, buffer: UnityEngine.GraphicsBuffer) => void);
    Dispatch: ((kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number) => void);
    EnableKeyword: ((keyword: string) => void);
    DisableKeyword: ((keyword: string) => void);
    IsKeywordEnabled: ((keyword: string) => boolean);
    SetFloats: ((name: string, ...values: number[]) => void) | ((nameID: number, ...values: number[]) => void);
    SetInts: ((name: string, ...values: number[]) => void) | ((nameID: number, ...values: number[]) => void);
    SetBool: ((name: string, val: boolean) => void) | ((nameID: number, val: boolean) => void);
    SetConstantBuffer: ((nameID: number, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((name: string, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((nameID: number, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((name: string, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
    DispatchIndirect: ((kernelIndex: number, argsBuffer: UnityEngine.ComputeBuffer, argsOffset: System.UInt32) => void) | ((kernelIndex: number, argsBuffer: UnityEngine.ComputeBuffer) => void) | ((kernelIndex: number, argsBuffer: UnityEngine.GraphicsBuffer, argsOffset: System.UInt32) => void) | ((kernelIndex: number, argsBuffer: UnityEngine.GraphicsBuffer) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum SnapAxis {
    None = 0,
    X = 1,
    Y = 2,
    Z = 4,
    All = 7,
  }
  export declare class Snapping {
    static Snap: ((val: number, snap: number) => number) | ((val: UnityEngine.Vector2, snap: UnityEngine.Vector2) => UnityEngine.Vector2) | ((val: UnityEngine.Vector3, snap: UnityEngine.Vector3, axis?: UnityEngine.SnapAxis) => UnityEngine.Vector3);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class StaticBatchingUtility {
    constructor();
    static Combine: ((staticBatchRoot: UnityEngine.GameObject) => void) | ((gos: UnityEngine.GameObject[], staticBatchRoot: UnityEngine.GameObject) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum BatteryStatus {
    Unknown = 0,
    Charging = 1,
    Discharging = 2,
    NotCharging = 3,
    Full = 4,
  }
  export enum OperatingSystemFamily {
    Other = 0,
    MacOSX = 1,
    Windows = 2,
    Linux = 3,
  }
  export enum DeviceType {
    Unknown = 0,
    Handheld = 1,
    Console = 2,
    Desktop = 3,
  }
  export declare class SystemInfo {
    constructor();
    static batteryLevel: number;
    static batteryStatus: UnityEngine.BatteryStatus;
    static operatingSystem: string;
    static operatingSystemFamily: UnityEngine.OperatingSystemFamily;
    static processorType: string;
    static processorFrequency: number;
    static processorCount: number;
    static systemMemorySize: number;
    static deviceUniqueIdentifier: string;
    static deviceName: string;
    static deviceModel: string;
    static supportsAccelerometer: boolean;
    static supportsGyroscope: boolean;
    static supportsLocationService: boolean;
    static supportsVibration: boolean;
    static supportsAudio: boolean;
    static deviceType: UnityEngine.DeviceType;
    static graphicsMemorySize: number;
    static graphicsDeviceName: string;
    static graphicsDeviceVendor: string;
    static graphicsDeviceID: number;
    static graphicsDeviceVendorID: number;
    static graphicsDeviceType: UnityEngine.Rendering.GraphicsDeviceType;
    static graphicsUVStartsAtTop: boolean;
    static graphicsDeviceVersion: string;
    static graphicsShaderLevel: number;
    static graphicsMultiThreaded: boolean;
    static renderingThreadingMode: UnityEngine.Rendering.RenderingThreadingMode;
    static hasHiddenSurfaceRemovalOnGPU: boolean;
    static hasDynamicUniformArrayIndexingInFragmentShaders: boolean;
    static supportsShadows: boolean;
    static supportsRawShadowDepthSampling: boolean;
    static supportsMotionVectors: boolean;
    static supports3DTextures: boolean;
    static supportsCompressed3DTextures: boolean;
    static supports2DArrayTextures: boolean;
    static supports3DRenderTextures: boolean;
    static supportsCubemapArrayTextures: boolean;
    static copyTextureSupport: UnityEngine.Rendering.CopyTextureSupport;
    static supportsComputeShaders: boolean;
    static supportsConservativeRaster: boolean;
    static supportsMultiview: boolean;
    static supportsGeometryShaders: boolean;
    static supportsTessellationShaders: boolean;
    static supportsRenderTargetArrayIndexFromVertexShader: boolean;
    static supportsInstancing: boolean;
    static supportsHardwareQuadTopology: boolean;
    static supports32bitsIndexBuffer: boolean;
    static supportsSparseTextures: boolean;
    static supportedRenderTargetCount: number;
    static supportsSeparatedRenderTargetsBlend: boolean;
    static supportedRandomWriteTargetCount: number;
    static supportsMultisampledTextures: number;
    static supportsMultisampled2DArrayTextures: boolean;
    static supportsMultisampleAutoResolve: boolean;
    static supportsTextureWrapMirrorOnce: number;
    static usesReversedZBuffer: boolean;
    static npotSupport: UnityEngine.NPOTSupport;
    static maxTextureSize: number;
    static maxCubemapSize: number;
    static maxComputeBufferInputsVertex: number;
    static maxComputeBufferInputsFragment: number;
    static maxComputeBufferInputsGeometry: number;
    static maxComputeBufferInputsDomain: number;
    static maxComputeBufferInputsHull: number;
    static maxComputeBufferInputsCompute: number;
    static maxComputeWorkGroupSize: number;
    static maxComputeWorkGroupSizeX: number;
    static maxComputeWorkGroupSizeY: number;
    static maxComputeWorkGroupSizeZ: number;
    static supportsAsyncCompute: boolean;
    static supportsGpuRecorder: boolean;
    static supportsGraphicsFence: boolean;
    static supportsAsyncGPUReadback: boolean;
    static supportsRayTracing: boolean;
    static supportsSetConstantBuffer: boolean;
    static constantBufferOffsetAlignment: number;
    static minConstantBufferOffsetAlignment: boolean;
    static hasMipMaxLevel: boolean;
    static supportsMipStreaming: boolean;
    static usesLoadStoreActions: boolean;
    static hdrDisplaySupportFlags: UnityEngine.HDRDisplaySupportFlags;
    static supportsRenderTextures: boolean;
    static supportsRenderToCubemap: boolean;
    static supportsImageEffects: boolean;
    static supportsStencil: number;
    static graphicsPixelFillrate: number;
    static supportsVertexPrograms: boolean;
    static supportsGPUFence: boolean;
    static unsupportedIdentifier: string;
    static SupportsRenderTextureFormat: ((format: UnityEngine.RenderTextureFormat) => boolean);
    static SupportsBlendingOnRenderTextureFormat: ((format: UnityEngine.RenderTextureFormat) => boolean);
    static SupportsTextureFormat: ((format: UnityEngine.TextureFormat) => boolean);
    static SupportsVertexAttributeFormat: ((format: UnityEngine.Rendering.VertexAttributeFormat, dimension: number) => boolean);
    static IsFormatSupported: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat, usage: UnityEngine.Experimental.Rendering.FormatUsage) => boolean);
    static GetCompatibleFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat, usage: UnityEngine.Experimental.Rendering.FormatUsage) => UnityEngine.Experimental.Rendering.GraphicsFormat);
    static GetGraphicsFormat: ((format: UnityEngine.Experimental.Rendering.DefaultFormat) => UnityEngine.Experimental.Rendering.GraphicsFormat);
    static GetRenderTextureSupportedMSAASampleCount: ((desc: UnityEngine.RenderTextureDescriptor) => number);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Time {
    constructor();
    static time: number;
    static timeAsDouble: number;
    static timeSinceLevelLoad: number;
    static timeSinceLevelLoadAsDouble: number;
    static deltaTime: number;
    static fixedTime: number;
    static fixedTimeAsDouble: number;
    static unscaledTime: number;
    static unscaledTimeAsDouble: number;
    static fixedUnscaledTime: number;
    static fixedUnscaledTimeAsDouble: number;
    static unscaledDeltaTime: number;
    static fixedUnscaledDeltaTime: number;
    static fixedDeltaTime: number;
    static maximumDeltaTime: number;
    static smoothDeltaTime: number;
    static maximumParticleDeltaTime: number;
    static timeScale: number;
    static frameCount: number;
    static renderedFrameCount: number;
    static realtimeSinceStartup: number;
    static realtimeSinceStartupAsDouble: number;
    static captureDeltaTime: number;
    static captureFramerate: number;
    static inFixedTimeStep: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class TouchScreenKeyboard {
    constructor(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string, characterLimit: number);
    static isSupported: boolean;
    static isInPlaceEditingAllowed: boolean;
    text: string;
    static hideInput: boolean;
    active: boolean;
    done: boolean;
    wasCanceled: boolean;
    status: UnityEngine.TouchScreenKeyboard_Status;
    characterLimit: number;
    canGetSelection: boolean;
    canSetSelection: boolean;
    selection: UnityEngine.RangeInt;
    type: UnityEngine.TouchScreenKeyboardType;
    targetDisplay: number;
    static area: UnityEngine.Rect;
    static visible: boolean;
    static Open: ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string, characterLimit: number) => UnityEngine.TouchScreenKeyboard) | ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string) => UnityEngine.TouchScreenKeyboard) | ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean) => UnityEngine.TouchScreenKeyboard) | ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean) => UnityEngine.TouchScreenKeyboard) | ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean) => UnityEngine.TouchScreenKeyboard) | ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean) => UnityEngine.TouchScreenKeyboard) | ((text: string, keyboardType: UnityEngine.TouchScreenKeyboardType) => UnityEngine.TouchScreenKeyboard) | ((text: string) => UnityEngine.TouchScreenKeyboard);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum TouchScreenKeyboard_Status {
    Visible = 0,
    Done = 1,
    Canceled = 2,
    LostFocus = 3,
  }
  export enum TouchScreenKeyboardType {
    Default = 0,
    ASCIICapable = 1,
    NumbersAndPunctuation = 2,
    URL = 3,
    NumberPad = 4,
    PhonePad = 5,
    NamePhonePad = 6,
    EmailAddress = 7,
    NintendoNetworkAccount = 8,
    Social = 9,
    Search = 10,
    DecimalPad = 11,
    OneTimeCode = 12,
  }
  export declare class UnityEventQueueSystem {
    constructor();
    static GenerateEventIdForPayload: ((eventPayloadName: string) => string);
    static GetGlobalEventQueue: (() => System.IntPtr);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Pose {
    constructor(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion);
    forward: UnityEngine.Vector3;
    right: UnityEngine.Vector3;
    up: UnityEngine.Vector3;
    static identity: UnityEngine.Pose;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    ToString: (() => string) | ((format: string) => string);
    GetTransformedBy: ((lhs: UnityEngine.Pose) => UnityEngine.Pose) | ((lhs: UnityEngine.Transform) => UnityEngine.Pose);
    Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.Pose) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export enum DrivenTransformProperties {
    None = 0,
    All = -1,
    AnchoredPositionX = 2,
    AnchoredPositionY = 4,
    AnchoredPositionZ = 8,
    Rotation = 16,
    ScaleX = 32,
    ScaleY = 64,
    ScaleZ = 128,
    AnchorMinX = 256,
    AnchorMinY = 512,
    AnchorMaxX = 1024,
    AnchorMaxY = 2048,
    SizeDeltaX = 4096,
    SizeDeltaY = 8192,
    PivotX = 16384,
    PivotY = 32768,
    AnchoredPosition = 6,
    AnchoredPosition3D = 14,
    Scale = 224,
    AnchorMin = 768,
    AnchorMax = 3072,
    Anchors = 3840,
    SizeDelta = 12288,
    Pivot = 49152,
  }
  export declare class DrivenRectTransformTracker {
    static StopRecordingUndo: (() => void);
    static StartRecordingUndo: (() => void);
    Add: ((driver: UnityEngine.Object, rectTransform: UnityEngine.RectTransform, drivenProperties: UnityEngine.DrivenTransformProperties) => void);
    Clear: ((revertValues: boolean) => void) | (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RectTransform {
    constructor();
    rect: UnityEngine.Rect;
    anchorMin: UnityEngine.Vector2;
    anchorMax: UnityEngine.Vector2;
    anchoredPosition: UnityEngine.Vector2;
    sizeDelta: UnityEngine.Vector2;
    pivot: UnityEngine.Vector2;
    anchoredPosition3D: UnityEngine.Vector3;
    offsetMin: UnityEngine.Vector2;
    offsetMax: UnityEngine.Vector2;
    position: UnityEngine.Vector3;
    localPosition: UnityEngine.Vector3;
    eulerAngles: UnityEngine.Vector3;
    localEulerAngles: UnityEngine.Vector3;
    right: UnityEngine.Vector3;
    up: UnityEngine.Vector3;
    forward: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    localRotation: UnityEngine.Quaternion;
    localScale: UnityEngine.Vector3;
    parent: UnityEngine.Transform;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    root: UnityEngine.Transform;
    childCount: number;
    lossyScale: UnityEngine.Vector3;
    hasChanged: boolean;
    hierarchyCapacity: number;
    hierarchyCount: number;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    ForceUpdateRectTransforms: (() => void);
    GetLocalCorners: ((fourCornersArray: UnityEngine.Vector3[]) => void);
    GetWorldCorners: ((fourCornersArray: UnityEngine.Vector3[]) => void);
    SetInsetAndSizeFromParentEdge: ((edge: UnityEngine.RectTransform_Edge, inset: number, size: number) => void);
    SetSizeWithCurrentAnchors: ((axis: UnityEngine.RectTransform_Axis, size: number) => void);
    SetParent: ((p: UnityEngine.Transform) => void) | ((parent: UnityEngine.Transform, worldPositionStays: boolean) => void);
    SetPositionAndRotation: ((position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void);
    Translate: ((translation: UnityEngine.Vector3, relativeTo: UnityEngine.Space) => void) | ((translation: UnityEngine.Vector3) => void) | ((x: number, y: number, z: number, relativeTo: UnityEngine.Space) => void) | ((x: number, y: number, z: number) => void) | ((translation: UnityEngine.Vector3, relativeTo: UnityEngine.Transform) => void) | ((x: number, y: number, z: number, relativeTo: UnityEngine.Transform) => void);
    Rotate: ((eulers: UnityEngine.Vector3, relativeTo: UnityEngine.Space) => void) | ((eulers: UnityEngine.Vector3) => void) | ((xAngle: number, yAngle: number, zAngle: number, relativeTo: UnityEngine.Space) => void) | ((xAngle: number, yAngle: number, zAngle: number) => void) | ((axis: UnityEngine.Vector3, angle: number, relativeTo: UnityEngine.Space) => void) | ((axis: UnityEngine.Vector3, angle: number) => void);
    RotateAround: ((point: UnityEngine.Vector3, axis: UnityEngine.Vector3, angle: number) => void) | ((axis: UnityEngine.Vector3, angle: number) => void);
    LookAt: ((target: UnityEngine.Transform, worldUp: UnityEngine.Vector3) => void) | ((target: UnityEngine.Transform) => void) | ((worldPosition: UnityEngine.Vector3, worldUp: UnityEngine.Vector3) => void) | ((worldPosition: UnityEngine.Vector3) => void);
    TransformDirection: ((direction: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    InverseTransformDirection: ((direction: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    TransformVector: ((vector: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    InverseTransformVector: ((vector: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    TransformPoint: ((position: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    InverseTransformPoint: ((position: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    DetachChildren: (() => void);
    SetAsFirstSibling: (() => void);
    SetAsLastSibling: (() => void);
    SetSiblingIndex: ((index: number) => void);
    GetSiblingIndex: (() => number);
    Find: ((n: string) => UnityEngine.Transform);
    IsChildOf: ((parent: UnityEngine.Transform) => boolean);
    FindChild: ((n: string) => UnityEngine.Transform);
    GetEnumerator: (() => System.Collections.IEnumerator);
    RotateAroundLocal: ((axis: UnityEngine.Vector3, angle: number) => void);
    GetChild: ((index: number) => UnityEngine.Transform);
    GetChildCount: (() => number);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum RectTransform_Edge {
    Left = 0,
    Right = 1,
    Top = 2,
    Bottom = 3,
  }
  export enum RectTransform_Axis {
    Horizontal = 0,
    Vertical = 1,
  }
  export declare class RectTransform_ReapplyDrivenProperties {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((driven: UnityEngine.RectTransform) => void);
    BeginInvoke: ((driven: UnityEngine.RectTransform, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Transform {
    position: UnityEngine.Vector3;
    localPosition: UnityEngine.Vector3;
    eulerAngles: UnityEngine.Vector3;
    localEulerAngles: UnityEngine.Vector3;
    right: UnityEngine.Vector3;
    up: UnityEngine.Vector3;
    forward: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    localRotation: UnityEngine.Quaternion;
    localScale: UnityEngine.Vector3;
    parent: UnityEngine.Transform;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    root: UnityEngine.Transform;
    childCount: number;
    lossyScale: UnityEngine.Vector3;
    hasChanged: boolean;
    hierarchyCapacity: number;
    hierarchyCount: number;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SetParent: ((p: UnityEngine.Transform) => void) | ((parent: UnityEngine.Transform, worldPositionStays: boolean) => void);
    SetPositionAndRotation: ((position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => void);
    Translate: ((translation: UnityEngine.Vector3, relativeTo: UnityEngine.Space) => void) | ((translation: UnityEngine.Vector3) => void) | ((x: number, y: number, z: number, relativeTo: UnityEngine.Space) => void) | ((x: number, y: number, z: number) => void) | ((translation: UnityEngine.Vector3, relativeTo: UnityEngine.Transform) => void) | ((x: number, y: number, z: number, relativeTo: UnityEngine.Transform) => void);
    Rotate: ((eulers: UnityEngine.Vector3, relativeTo: UnityEngine.Space) => void) | ((eulers: UnityEngine.Vector3) => void) | ((xAngle: number, yAngle: number, zAngle: number, relativeTo: UnityEngine.Space) => void) | ((xAngle: number, yAngle: number, zAngle: number) => void) | ((axis: UnityEngine.Vector3, angle: number, relativeTo: UnityEngine.Space) => void) | ((axis: UnityEngine.Vector3, angle: number) => void);
    RotateAround: ((point: UnityEngine.Vector3, axis: UnityEngine.Vector3, angle: number) => void) | ((axis: UnityEngine.Vector3, angle: number) => void);
    LookAt: ((target: UnityEngine.Transform, worldUp: UnityEngine.Vector3) => void) | ((target: UnityEngine.Transform) => void) | ((worldPosition: UnityEngine.Vector3, worldUp: UnityEngine.Vector3) => void) | ((worldPosition: UnityEngine.Vector3) => void);
    TransformDirection: ((direction: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    InverseTransformDirection: ((direction: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    TransformVector: ((vector: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    InverseTransformVector: ((vector: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    TransformPoint: ((position: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    InverseTransformPoint: ((position: UnityEngine.Vector3) => UnityEngine.Vector3) | ((x: number, y: number, z: number) => UnityEngine.Vector3);
    DetachChildren: (() => void);
    SetAsFirstSibling: (() => void);
    SetAsLastSibling: (() => void);
    SetSiblingIndex: ((index: number) => void);
    GetSiblingIndex: (() => number);
    Find: ((n: string) => UnityEngine.Transform);
    IsChildOf: ((parent: UnityEngine.Transform) => boolean);
    FindChild: ((n: string) => UnityEngine.Transform);
    GetEnumerator: (() => System.Collections.IEnumerator);
    RotateAroundLocal: ((axis: UnityEngine.Vector3, angle: number) => void);
    GetChild: ((index: number) => UnityEngine.Transform);
    GetChildCount: (() => number);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum SpriteDrawMode {
    Simple = 0,
    Sliced = 1,
    Tiled = 2,
  }
  export enum SpriteTileMode {
    Continuous = 0,
    Adaptive = 1,
  }
  export enum SpriteMaskInteraction {
    None = 0,
    VisibleInsideMask = 1,
    VisibleOutsideMask = 2,
  }
  export declare class SpriteRenderer {
    constructor();
    sprite: UnityEngine.Sprite;
    drawMode: UnityEngine.SpriteDrawMode;
    size: UnityEngine.Vector2;
    adaptiveModeThreshold: number;
    tileMode: UnityEngine.SpriteTileMode;
    color: UnityEngine.Color;
    maskInteraction: UnityEngine.SpriteMaskInteraction;
    flipX: boolean;
    flipY: boolean;
    spriteSortPoint: UnityEngine.SpriteSortPoint;
    lightmapTilingOffset: UnityEngine.Vector4;
    lightProbeAnchor: UnityEngine.Transform;
    castShadows: boolean;
    motionVectors: boolean;
    useLightProbes: boolean;
    bounds: UnityEngine.Bounds;
    enabled: boolean;
    isVisible: boolean;
    shadowCastingMode: UnityEngine.Rendering.ShadowCastingMode;
    receiveShadows: boolean;
    forceRenderingOff: boolean;
    motionVectorGenerationMode: UnityEngine.MotionVectorGenerationMode;
    lightProbeUsage: UnityEngine.Rendering.LightProbeUsage;
    reflectionProbeUsage: UnityEngine.Rendering.ReflectionProbeUsage;
    renderingLayerMask: System.UInt32;
    rendererPriority: number;
    rayTracingMode: UnityEngine.Experimental.Rendering.RayTracingMode;
    sortingLayerName: string;
    sortingLayerID: number;
    sortingOrder: number;
    allowOcclusionWhenDynamic: boolean;
    isPartOfStaticBatch: boolean;
    worldToLocalMatrix: UnityEngine.Matrix4x4;
    localToWorldMatrix: UnityEngine.Matrix4x4;
    lightProbeProxyVolumeOverride: UnityEngine.GameObject;
    probeAnchor: UnityEngine.Transform;
    lightmapIndex: number;
    realtimeLightmapIndex: number;
    lightmapScaleOffset: UnityEngine.Vector4;
    realtimeLightmapScaleOffset: UnityEngine.Vector4;
    materials: UnityEngine.Material[];
    material: UnityEngine.Material;
    sharedMaterial: UnityEngine.Material;
    sharedMaterials: UnityEngine.Material[];
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    HasPropertyBlock: (() => boolean);
    SetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetPropertyBlock: ((properties: UnityEngine.MaterialPropertyBlock) => void) | ((properties: UnityEngine.MaterialPropertyBlock, materialIndex: number) => void);
    GetMaterials: ((m: UnityEngine.Material[]) => void);
    GetSharedMaterials: ((m: UnityEngine.Material[]) => void);
    GetClosestReflectionProbes: ((result: UnityEngine.Rendering.ReflectionProbeBlendInfo[]) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum SpriteMeshType {
    FullRect = 0,
    Tight = 1,
  }
  export enum SpriteAlignment {
    Center = 0,
    TopLeft = 1,
    TopCenter = 2,
    TopRight = 3,
    LeftCenter = 4,
    RightCenter = 5,
    BottomLeft = 6,
    BottomCenter = 7,
    BottomRight = 8,
    Custom = 9,
  }
  export enum SpritePackingMode {
    Tight = 0,
    Rectangle = 1,
  }
  export enum SpritePackingRotation {
    None = 0,
    FlipHorizontal = 1,
    FlipVertical = 2,
    Rotate180 = 3,
    Any = 15,
  }
  export enum SpriteSortPoint {
    Center = 0,
    Pivot = 1,
  }
  export declare class SecondarySpriteTexture {
    name: string;
    texture: UnityEngine.Texture2D;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Sprite {
    bounds: UnityEngine.Bounds;
    rect: UnityEngine.Rect;
    border: UnityEngine.Vector4;
    texture: UnityEngine.Texture2D;
    pixelsPerUnit: number;
    spriteAtlasTextureScale: number;
    associatedAlphaSplitTexture: UnityEngine.Texture2D;
    pivot: UnityEngine.Vector2;
    packed: boolean;
    packingMode: UnityEngine.SpritePackingMode;
    packingRotation: UnityEngine.SpritePackingRotation;
    textureRect: UnityEngine.Rect;
    textureRectOffset: UnityEngine.Vector2;
    vertices: UnityEngine.Vector2[];
    triangles: System.UInt16[];
    uv: UnityEngine.Vector2[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetPhysicsShapeCount: (() => number);
    GetPhysicsShapePointCount: ((shapeIdx: number) => number);
    GetPhysicsShape: ((shapeIdx: number, physicsShape: UnityEngine.Vector2[]) => number);
    OverridePhysicsShape: ((physicsShapes: System.Collections.Generic.IList<UnityEngine.Vector2[]>) => void);
    OverrideGeometry: ((vertices: UnityEngine.Vector2[], triangles: System.UInt16[]) => void);
    static Create: ((texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: System.UInt32, meshType: UnityEngine.SpriteMeshType, border: UnityEngine.Vector4, generateFallbackPhysicsShape: boolean) => UnityEngine.Sprite) | ((texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: System.UInt32, meshType: UnityEngine.SpriteMeshType, border: UnityEngine.Vector4) => UnityEngine.Sprite) | ((texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: System.UInt32, meshType: UnityEngine.SpriteMeshType) => UnityEngine.Sprite) | ((texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: System.UInt32) => UnityEngine.Sprite) | ((texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number) => UnityEngine.Sprite) | ((texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2) => UnityEngine.Sprite);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioSettings {
    constructor();
    static driverCaps: UnityEngine.AudioSpeakerMode;
    static driverCapabilities: UnityEngine.AudioSpeakerMode;
    static speakerMode: UnityEngine.AudioSpeakerMode;
    static dspTime: number;
    static outputSampleRate: number;
    static SetDSPBufferSize: ((bufferLength: number, numBuffers: number) => void);
    static GetSpatializerPluginNames: (() => string[]);
    static GetSpatializerPluginName: (() => string);
    static SetSpatializerPluginName: ((pluginName: string) => void);
    static GetConfiguration: (() => UnityEngine.AudioConfiguration);
    static Reset: ((config: UnityEngine.AudioConfiguration) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AudioSettings_AudioConfigurationChangeHandler {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((deviceWasChanged: boolean) => void);
    BeginInvoke: ((deviceWasChanged: boolean, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AudioSettings_Mobile {
    static muteState: boolean;
    static stopAudioOutputOnMute: boolean;
    static audioOutputStarted: boolean;
    static StartAudioOutput: (() => void);
    static StopAudioOutput: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AudioSource {
    constructor();
    panLevel: number;
    pan: number;
    volume: number;
    pitch: number;
    time: number;
    timeSamples: number;
    clip: UnityEngine.AudioClip;
    outputAudioMixerGroup: UnityEngine.Audio.AudioMixerGroup;
    isPlaying: boolean;
    isVirtual: boolean;
    loop: boolean;
    ignoreListenerVolume: boolean;
    playOnAwake: boolean;
    ignoreListenerPause: boolean;
    velocityUpdateMode: UnityEngine.AudioVelocityUpdateMode;
    panStereo: number;
    spatialBlend: number;
    spatialize: boolean;
    spatializePostEffects: boolean;
    reverbZoneMix: number;
    bypassEffects: boolean;
    bypassListenerEffects: boolean;
    bypassReverbZones: boolean;
    dopplerLevel: number;
    spread: number;
    priority: number;
    mute: boolean;
    minDistance: number;
    maxDistance: number;
    rolloffMode: UnityEngine.AudioRolloffMode;
    minVolume: number;
    maxVolume: number;
    rolloffFactor: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Play: (() => void) | ((delay: System.UInt64) => void);
    PlayDelayed: ((delay: number) => void);
    PlayScheduled: ((time: number) => void);
    PlayOneShot: ((clip: UnityEngine.AudioClip) => void) | ((clip: UnityEngine.AudioClip, volumeScale: number) => void);
    SetScheduledStartTime: ((time: number) => void);
    SetScheduledEndTime: ((time: number) => void);
    Stop: (() => void);
    Pause: (() => void);
    UnPause: (() => void);
    static PlayClipAtPoint: ((clip: UnityEngine.AudioClip, position: UnityEngine.Vector3) => void) | ((clip: UnityEngine.AudioClip, position: UnityEngine.Vector3, volume: number) => void);
    SetCustomCurve: ((type: UnityEngine.AudioSourceCurveType, curve: UnityEngine.AnimationCurve) => void);
    GetCustomCurve: ((type: UnityEngine.AudioSourceCurveType) => UnityEngine.AnimationCurve);
    GetOutputData: ((numSamples: number, channel: number) => number[]) | ((samples: number[], channel: number) => void);
    GetSpectrumData: ((numSamples: number, channel: number, window: UnityEngine.FFTWindow) => number[]) | ((samples: number[], channel: number, window: UnityEngine.FFTWindow) => void);
    SetSpatializerFloat: ((index: number, value: number) => boolean);
    SetAmbisonicDecoderFloat: ((index: number, value: number) => boolean);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioLowPassFilter {
    constructor();
    lowpassResonaceQ: number;
    customCutoffCurve: UnityEngine.AnimationCurve;
    cutoffFrequency: number;
    lowpassResonanceQ: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioHighPassFilter {
    constructor();
    highpassResonaceQ: number;
    cutoffFrequency: number;
    highpassResonanceQ: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioReverbFilter {
    constructor();
    lFReference: number;
    reverbPreset: UnityEngine.AudioReverbPreset;
    dryLevel: number;
    room: number;
    roomHF: number;
    roomRolloffFactor: number;
    decayTime: number;
    decayHFRatio: number;
    reflectionsLevel: number;
    reflectionsDelay: number;
    reverbLevel: number;
    reverbDelay: number;
    diffusion: number;
    density: number;
    hfReference: number;
    roomLF: number;
    lfReference: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum AudioSpeakerMode {
    Raw = 0,
    Mono = 1,
    Stereo = 2,
    Quad = 3,
    Surround = 4,
    Mode5point1 = 5,
    Mode7point1 = 6,
    Prologic = 7,
  }
  export enum AudioDataLoadState {
    Unloaded = 0,
    Loading = 1,
    Loaded = 2,
    Failed = 3,
  }
  export declare class AudioConfiguration {
    speakerMode: UnityEngine.AudioSpeakerMode;
    dspBufferSize: number;
    sampleRate: number;
    numRealVoices: number;
    numVirtualVoices: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum AudioCompressionFormat {
    PCM = 0,
    Vorbis = 1,
    ADPCM = 2,
    MP3 = 3,
    VAG = 4,
    HEVAG = 5,
    XMA = 6,
    AAC = 7,
    GCADPCM = 8,
    ATRAC9 = 9,
  }
  export enum AudioClipLoadType {
    DecompressOnLoad = 0,
    CompressedInMemory = 1,
    Streaming = 2,
  }
  export enum AudioVelocityUpdateMode {
    Auto = 0,
    Fixed = 1,
    Dynamic = 2,
  }
  export enum FFTWindow {
    Rectangular = 0,
    Triangle = 1,
    Hamming = 2,
    Hanning = 3,
    Blackman = 4,
    BlackmanHarris = 5,
  }
  export enum AudioRolloffMode {
    Logarithmic = 0,
    Linear = 1,
    Custom = 2,
  }
  export enum AudioSourceCurveType {
    CustomRolloff = 0,
    SpatialBlend = 1,
    ReverbZoneMix = 2,
    Spread = 3,
  }
  export enum AudioReverbPreset {
    Off = 0,
    Generic = 1,
    PaddedCell = 2,
    Room = 3,
    Bathroom = 4,
    Livingroom = 5,
    Stoneroom = 6,
    Auditorium = 7,
    Concerthall = 8,
    Cave = 9,
    Arena = 10,
    Hangar = 11,
    CarpetedHallway = 12,
    Hallway = 13,
    StoneCorridor = 14,
    Alley = 15,
    Forest = 16,
    City = 17,
    Mountains = 18,
    Quarry = 19,
    Plain = 20,
    ParkingLot = 21,
    SewerPipe = 22,
    Underwater = 23,
    Drugged = 24,
    Dizzy = 25,
    Psychotic = 26,
    User = 27,
  }
  export declare class AudioClip {
    length: number;
    samples: number;
    channels: number;
    frequency: number;
    isReadyToPlay: boolean;
    loadType: UnityEngine.AudioClipLoadType;
    preloadAudioData: boolean;
    ambisonic: boolean;
    loadInBackground: boolean;
    loadState: UnityEngine.AudioDataLoadState;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    LoadAudioData: (() => boolean);
    UnloadAudioData: (() => boolean);
    GetData: ((data: number[], offsetSamples: number) => boolean);
    SetData: ((data: number[], offsetSamples: number) => boolean);
    static Create: ((name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean) => UnityEngine.AudioClip) | ((name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean, pcmreadercallback: UnityEngine.AudioClip_PCMReaderCallback) => UnityEngine.AudioClip) | ((name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean, pcmreadercallback: UnityEngine.AudioClip_PCMReaderCallback, pcmsetpositioncallback: UnityEngine.AudioClip_PCMSetPositionCallback) => UnityEngine.AudioClip) | ((name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean) => UnityEngine.AudioClip) | ((name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: UnityEngine.AudioClip_PCMReaderCallback) => UnityEngine.AudioClip) | ((name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: UnityEngine.AudioClip_PCMReaderCallback, pcmsetpositioncallback: UnityEngine.AudioClip_PCMSetPositionCallback) => UnityEngine.AudioClip);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioClip_PCMReaderCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((data: number[]) => void);
    BeginInvoke: ((data: number[], callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AudioClip_PCMSetPositionCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((position: number) => void);
    BeginInvoke: ((position: number, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AudioBehaviour {
    constructor();
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioListener {
    constructor();
    static volume: number;
    static pause: boolean;
    velocityUpdateMode: UnityEngine.AudioVelocityUpdateMode;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static GetOutputData: ((numSamples: number, channel: number) => number[]) | ((samples: number[], channel: number) => void);
    static GetSpectrumData: ((numSamples: number, channel: number, window: UnityEngine.FFTWindow) => number[]) | ((samples: number[], channel: number, window: UnityEngine.FFTWindow) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioReverbZone {
    constructor();
    minDistance: number;
    maxDistance: number;
    reverbPreset: UnityEngine.AudioReverbPreset;
    room: number;
    roomHF: number;
    roomLF: number;
    decayTime: number;
    decayHFRatio: number;
    reflections: number;
    reflectionsDelay: number;
    reverb: number;
    reverbDelay: number;
    HFReference: number;
    LFReference: number;
    roomRolloffFactor: number;
    diffusion: number;
    density: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioDistortionFilter {
    constructor();
    distortionLevel: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioEchoFilter {
    constructor();
    delay: number;
    decayRatio: number;
    dryMix: number;
    wetMix: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AudioChorusFilter {
    constructor();
    dryMix: number;
    wetMix1: number;
    wetMix2: number;
    wetMix3: number;
    delay: number;
    rate: number;
    depth: number;
    feedback: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Microphone {
    constructor();
    static devices: string[];
    static Start: ((deviceName: string, loop: boolean, lengthSec: number, frequency: number) => UnityEngine.AudioClip);
    static End: ((deviceName: string) => void);
    static IsRecording: ((deviceName: string) => boolean);
    static GetPosition: ((deviceName: string) => number);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AudioRenderer {
    constructor();
    static Start: (() => boolean);
    static Stop: (() => boolean);
    static GetSampleCountForCaptureFrame: (() => number);
    static Render: ((buffer: any) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class MovieTexture {
    audioClip: UnityEngine.AudioClip;
    loop: boolean;
    isPlaying: boolean;
    isReadyToPlay: boolean;
    duration: number;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    isReadable: boolean;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Play: (() => void);
    Stop: (() => void);
    Pause: (() => void);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum WebCamFlags {
    FrontFacing = 1,
    AutoFocusPointSupported = 2,
  }
  export enum WebCamKind {
    WideAngle = 1,
    Telephoto = 2,
    ColorAndDepth = 3,
    UltraWideAngle = 4,
  }
  export declare class WebCamDevice {
    name: string;
    isFrontFacing: boolean;
    kind: UnityEngine.WebCamKind;
    depthCameraName: string;
    isAutoFocusPointSupported: boolean;
    availableResolutions: UnityEngine.Resolution[];
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class WebCamTexture {
    constructor(deviceName: string, requestedWidth: number, requestedHeight: number, requestedFPS: number);
    constructor(deviceName: string, requestedWidth: number, requestedHeight: number);
    constructor(deviceName: string);
    constructor(requestedWidth: number, requestedHeight: number, requestedFPS: number);
    constructor(requestedWidth: number, requestedHeight: number);
    constructor();
    static devices: UnityEngine.WebCamDevice[];
    isPlaying: boolean;
    deviceName: string;
    requestedFPS: number;
    requestedWidth: number;
    requestedHeight: number;
    videoRotationAngle: number;
    videoVerticallyMirrored: boolean;
    didUpdateThisFrame: boolean;
    autoFocusPoint?: System.Nullable<UnityEngine.Vector2>;
    isDepth: boolean;
    mipmapCount: number;
    graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
    width: number;
    height: number;
    dimension: UnityEngine.Rendering.TextureDimension;
    isReadable: boolean;
    wrapMode: UnityEngine.TextureWrapMode;
    wrapModeU: UnityEngine.TextureWrapMode;
    wrapModeV: UnityEngine.TextureWrapMode;
    wrapModeW: UnityEngine.TextureWrapMode;
    filterMode: UnityEngine.FilterMode;
    anisoLevel: number;
    mipMapBias: number;
    texelSize: UnityEngine.Vector2;
    updateCount: System.UInt32;
    imageContentsHash: UnityEngine.Hash128;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Play: (() => void);
    Pause: (() => void);
    Stop: (() => void);
    GetPixel: ((x: number, y: number) => UnityEngine.Color);
    GetPixels: (() => UnityEngine.Color[]) | ((x: number, y: number, blockWidth: number, blockHeight: number) => UnityEngine.Color[]);
    GetPixels32: (() => UnityEngine.Color32[]) | ((colors: UnityEngine.Color32[]) => UnityEngine.Color32[]);
    GetNativeTexturePtr: (() => System.IntPtr);
    GetNativeTextureID: (() => number);
    IncrementUpdateCount: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export interface ICanvasRaycastFilter {
    IsRaycastLocationValid: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
  }
  export declare class CanvasGroup {
    constructor();
    alpha: number;
    interactable: boolean;
    blocksRaycasts: boolean;
    ignoreParentGroups: boolean;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    IsRaycastLocationValid: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CanvasRenderer {
    constructor();
    hasPopInstruction: boolean;
    materialCount: number;
    popMaterialCount: number;
    absoluteDepth: number;
    hasMoved: boolean;
    cullTransparentMesh: boolean;
    hasRectClipping: boolean;
    relativeDepth: number;
    cull: boolean;
    isMask: boolean;
    clippingSoftness: UnityEngine.Vector2;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SetColor: ((color: UnityEngine.Color) => void);
    GetColor: (() => UnityEngine.Color);
    EnableRectClipping: ((rect: UnityEngine.Rect) => void);
    DisableRectClipping: (() => void);
    SetMaterial: ((material: UnityEngine.Material, index: number) => void) | ((material: UnityEngine.Material, texture: UnityEngine.Texture) => void);
    GetMaterial: ((index: number) => UnityEngine.Material) | (() => UnityEngine.Material);
    SetPopMaterial: ((material: UnityEngine.Material, index: number) => void);
    GetPopMaterial: ((index: number) => UnityEngine.Material);
    SetTexture: ((texture: UnityEngine.Texture) => void);
    SetAlphaTexture: ((texture: UnityEngine.Texture) => void);
    SetMesh: ((mesh: UnityEngine.Mesh) => void);
    Clear: (() => void);
    GetAlpha: (() => number);
    SetAlpha: ((alpha: number) => void);
    GetInheritedAlpha: (() => number);
    static SplitUIVertexStreams: ((verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector4[], uv1S: UnityEngine.Vector4[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]) => void) | ((verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector4[], uv1S: UnityEngine.Vector4[], uv2S: UnityEngine.Vector4[], uv3S: UnityEngine.Vector4[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]) => void);
    static CreateUIVertexStream: ((verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector4[], uv1S: UnityEngine.Vector4[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]) => void) | ((verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector4[], uv1S: UnityEngine.Vector4[], uv2S: UnityEngine.Vector4[], uv3S: UnityEngine.Vector4[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[], indices: number[]) => void);
    static AddUIVertexStream: ((verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector4[], uv1S: UnityEngine.Vector4[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[]) => void) | ((verts: UnityEngine.UIVertex[], positions: UnityEngine.Vector3[], colors: UnityEngine.Color32[], uv0S: UnityEngine.Vector4[], uv1S: UnityEngine.Vector4[], uv2S: UnityEngine.Vector4[], uv3S: UnityEngine.Vector4[], normals: UnityEngine.Vector3[], tangents: UnityEngine.Vector4[]) => void);
    SetVertices: ((vertices: UnityEngine.UIVertex[]) => void) | ((vertices: UnityEngine.UIVertex[], size: number) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CanvasRenderer_OnRequestRebuild {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class RectTransformUtility {
    static PixelAdjustPoint: ((point: UnityEngine.Vector2, elementTransform: UnityEngine.Transform, canvas: UnityEngine.Canvas) => UnityEngine.Vector2);
    static PixelAdjustRect: ((rectTransform: UnityEngine.RectTransform, canvas: UnityEngine.Canvas) => UnityEngine.Rect);
    static RectangleContainsScreenPoint: ((rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2) => boolean) | ((rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera) => boolean) | ((rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera, offset: UnityEngine.Vector4) => boolean);
    static ScreenPointToRay: ((cam: UnityEngine.Camera, screenPos: UnityEngine.Vector2) => UnityEngine.Ray);
    static WorldToScreenPoint: ((cam: UnityEngine.Camera, worldPoint: UnityEngine.Vector3) => UnityEngine.Vector2);
    static CalculateRelativeRectTransformBounds: ((root: UnityEngine.Transform, child: UnityEngine.Transform) => UnityEngine.Bounds) | ((trans: UnityEngine.Transform) => UnityEngine.Bounds);
    static FlipLayoutOnAxis: ((rect: UnityEngine.RectTransform, axis: number, keepPositioning: boolean, recursive: boolean) => void);
    static FlipLayoutAxes: ((rect: UnityEngine.RectTransform, keepPositioning: boolean, recursive: boolean) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum RenderMode {
    ScreenSpaceOverlay = 0,
    ScreenSpaceCamera = 1,
    WorldSpace = 2,
  }
  export enum AdditionalCanvasShaderChannels {
    None = 0,
    TexCoord1 = 1,
    TexCoord2 = 2,
    TexCoord3 = 4,
    Normal = 8,
    Tangent = 16,
  }
  export declare class Canvas {
    constructor();
    renderMode: UnityEngine.RenderMode;
    isRootCanvas: boolean;
    pixelRect: UnityEngine.Rect;
    scaleFactor: number;
    referencePixelsPerUnit: number;
    overridePixelPerfect: boolean;
    pixelPerfect: boolean;
    planeDistance: number;
    renderOrder: number;
    overrideSorting: boolean;
    sortingOrder: number;
    targetDisplay: number;
    sortingLayerID: number;
    cachedSortingLayerValue: number;
    additionalShaderChannels: UnityEngine.AdditionalCanvasShaderChannels;
    sortingLayerName: string;
    rootCanvas: UnityEngine.Canvas;
    worldCamera: UnityEngine.Camera;
    normalizedSortingGridSize: number;
    sortingGridNormalizedSize: number;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static GetDefaultCanvasTextMaterial: (() => UnityEngine.Material);
    static GetDefaultCanvasMaterial: (() => UnityEngine.Material);
    static GetETC1SupportedCanvasMaterial: (() => UnityEngine.Material);
    static ForceUpdateCanvases: (() => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Canvas_WillRenderCanvases {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class UISystemProfilerApi {
    static BeginSample: ((type: UnityEngine.UISystemProfilerApi_SampleType) => void);
    static EndSample: ((type: UnityEngine.UISystemProfilerApi_SampleType) => void);
    static AddMarker: ((name: string, obj: UnityEngine.Object) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum UISystemProfilerApi_SampleType {
    Layout = 0,
    Render = 1,
  }
  export enum FontStyle {
    Normal = 0,
    Bold = 1,
    Italic = 2,
    BoldAndItalic = 3,
  }
  export declare class GUIText {
    constructor();
    text: boolean;
    material: UnityEngine.Material;
    font: UnityEngine.Font;
    alignment: UnityEngine.TextAlignment;
    anchor: UnityEngine.TextAnchor;
    lineSpacing: number;
    tabSize: number;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    richText: boolean;
    color: UnityEngine.Color;
    pixelOffset: UnityEngine.Vector2;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class TextGenerationSettings {
    font: UnityEngine.Font;
    color: UnityEngine.Color;
    fontSize: number;
    lineSpacing: number;
    richText: boolean;
    scaleFactor: number;
    fontStyle: UnityEngine.FontStyle;
    textAnchor: UnityEngine.TextAnchor;
    alignByGeometry: boolean;
    resizeTextForBestFit: boolean;
    resizeTextMinSize: number;
    resizeTextMaxSize: number;
    updateBounds: boolean;
    verticalOverflow: UnityEngine.VerticalWrapMode;
    horizontalOverflow: UnityEngine.HorizontalWrapMode;
    generationExtents: UnityEngine.Vector2;
    pivot: UnityEngine.Vector2;
    generateOutOfBounds: boolean;
    Equals: ((other: UnityEngine.TextGenerationSettings) => boolean) | ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class TextGenerator {
    constructor();
    constructor(initialCapacity: number);
    characterCountVisible: number;
    verts: System.Collections.Generic.IList<UnityEngine.UIVertex>;
    characters: System.Collections.Generic.IList<UnityEngine.UICharInfo>;
    lines: System.Collections.Generic.IList<UnityEngine.UILineInfo>;
    rectExtents: UnityEngine.Rect;
    vertexCount: number;
    characterCount: number;
    lineCount: number;
    fontSizeUsedForBestFit: number;
    Invalidate: (() => void);
    GetCharacters: ((characters: UnityEngine.UICharInfo[]) => void);
    GetLines: ((lines: UnityEngine.UILineInfo[]) => void);
    GetVertices: ((vertices: UnityEngine.UIVertex[]) => void);
    GetPreferredWidth: ((str: string, settings: UnityEngine.TextGenerationSettings) => number);
    GetPreferredHeight: ((str: string, settings: UnityEngine.TextGenerationSettings) => number);
    PopulateWithErrors: ((str: string, settings: UnityEngine.TextGenerationSettings, context: UnityEngine.GameObject) => boolean);
    Populate: ((str: string, settings: UnityEngine.TextGenerationSettings) => boolean);
    GetVerticesArray: (() => UnityEngine.UIVertex[]);
    GetCharactersArray: (() => UnityEngine.UICharInfo[]);
    GetLinesArray: (() => UnityEngine.UILineInfo[]);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum TextAlignment {
    Left = 0,
    Center = 1,
    Right = 2,
  }
  export enum TextAnchor {
    UpperLeft = 0,
    UpperCenter = 1,
    UpperRight = 2,
    MiddleLeft = 3,
    MiddleCenter = 4,
    MiddleRight = 5,
    LowerLeft = 6,
    LowerCenter = 7,
    LowerRight = 8,
  }
  export enum HorizontalWrapMode {
    Wrap = 0,
    Overflow = 1,
  }
  export enum VerticalWrapMode {
    Truncate = 0,
    Overflow = 1,
  }
  export declare class TextMesh {
    constructor();
    text: string;
    font: UnityEngine.Font;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    offsetZ: number;
    alignment: UnityEngine.TextAlignment;
    anchor: UnityEngine.TextAnchor;
    characterSize: number;
    lineSpacing: number;
    tabSize: number;
    richText: boolean;
    color: UnityEngine.Color;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class CharacterInfo {
    advance: number;
    glyphWidth: number;
    glyphHeight: number;
    bearing: number;
    minY: number;
    maxY: number;
    minX: number;
    maxX: number;
    uvBottomLeft: UnityEngine.Vector2;
    uvBottomRight: UnityEngine.Vector2;
    uvTopRight: UnityEngine.Vector2;
    uvTopLeft: UnityEngine.Vector2;
    index: number;
    uv: UnityEngine.Rect;
    vert: UnityEngine.Rect;
    width: number;
    size: number;
    style: UnityEngine.FontStyle;
    flipped: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class UICharInfo {
    cursorPos: UnityEngine.Vector2;
    charWidth: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class UILineInfo {
    startCharIdx: number;
    height: number;
    topY: number;
    leading: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class UIVertex {
    position: UnityEngine.Vector3;
    normal: UnityEngine.Vector3;
    tangent: UnityEngine.Vector4;
    color: UnityEngine.Color32;
    uv0: UnityEngine.Vector4;
    uv1: UnityEngine.Vector4;
    uv2: UnityEngine.Vector4;
    uv3: UnityEngine.Vector4;
    static simpleVert: UnityEngine.UIVertex;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Font {
    constructor();
    constructor(name: string);
    material: UnityEngine.Material;
    fontNames: string[];
    dynamic: boolean;
    ascent: number;
    fontSize: number;
    characterInfo: UnityEngine.CharacterInfo[];
    lineHeight: number;
    textureRebuildCallback: UnityEngine.Font_FontTextureRebuildCallback;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static CreateDynamicFontFromOSFont: ((fontname: string, size: number) => UnityEngine.Font) | ((fontnames: string[], size: number) => UnityEngine.Font);
    static GetMaxVertsForString: ((str: string) => number);
    HasCharacter: ((c: System.Char) => boolean);
    static GetOSInstalledFontNames: (() => string[]);
    static GetPathsToOSFonts: (() => string[]);
    RequestCharactersInTexture: ((characters: string, size: number, style: UnityEngine.FontStyle) => void) | ((characters: string, size: number) => void) | ((characters: string) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Font_FontTextureRebuildCallback {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AndroidInput {
    static touchCountSecondary: number;
    static secondaryTouchEnabled: boolean;
    static secondaryTouchWidth: number;
    static secondaryTouchHeight: number;
    static GetSecondaryTouch: ((index: number) => UnityEngine.Touch);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum TouchPhase {
    Began = 0,
    Moved = 1,
    Stationary = 2,
    Ended = 3,
    Canceled = 4,
  }
  export enum IMECompositionMode {
    Auto = 0,
    On = 1,
    Off = 2,
  }
  export enum TouchType {
    Direct = 0,
    Indirect = 1,
    Stylus = 2,
  }
  export declare class Touch {
    fingerId: number;
    position: UnityEngine.Vector2;
    rawPosition: UnityEngine.Vector2;
    deltaPosition: UnityEngine.Vector2;
    deltaTime: number;
    tapCount: number;
    phase: UnityEngine.TouchPhase;
    pressure: number;
    maximumPossiblePressure: number;
    type: UnityEngine.TouchType;
    altitudeAngle: number;
    azimuthAngle: number;
    radius: number;
    radiusVariance: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum DeviceOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    LandscapeRight = 4,
    FaceUp = 5,
    FaceDown = 6,
  }
  export declare class AccelerationEvent {
    acceleration: UnityEngine.Vector3;
    deltaTime: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Gyroscope {
    rotationRate: UnityEngine.Vector3;
    rotationRateUnbiased: UnityEngine.Vector3;
    gravity: UnityEngine.Vector3;
    userAcceleration: UnityEngine.Vector3;
    attitude: UnityEngine.Quaternion;
    enabled: boolean;
    updateInterval: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class LocationInfo {
    latitude: number;
    longitude: number;
    altitude: number;
    horizontalAccuracy: number;
    verticalAccuracy: number;
    timestamp: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum LocationServiceStatus {
    Stopped = 0,
    Initializing = 1,
    Running = 2,
    Failed = 3,
  }
  export declare class LocationService {
    constructor();
    isEnabledByUser: boolean;
    status: UnityEngine.LocationServiceStatus;
    lastData: UnityEngine.LocationInfo;
    Start: ((desiredAccuracyInMeters: number, updateDistanceInMeters: number) => void) | ((desiredAccuracyInMeters: number) => void) | (() => void);
    Stop: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Compass {
    constructor();
    magneticHeading: number;
    trueHeading: number;
    headingAccuracy: number;
    rawVector: UnityEngine.Vector3;
    timestamp: number;
    enabled: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Input {
    constructor();
    static simulateMouseWithTouches: boolean;
    static anyKey: boolean;
    static anyKeyDown: boolean;
    static inputString: string;
    static mousePosition: UnityEngine.Vector3;
    static mouseScrollDelta: UnityEngine.Vector2;
    static imeCompositionMode: UnityEngine.IMECompositionMode;
    static compositionString: string;
    static imeIsSelected: boolean;
    static compositionCursorPos: UnityEngine.Vector2;
    static eatKeyPressOnTextFieldFocus: boolean;
    static mousePresent: boolean;
    static touchCount: number;
    static touchPressureSupported: boolean;
    static stylusTouchSupported: boolean;
    static touchSupported: boolean;
    static multiTouchEnabled: boolean;
    static isGyroAvailable: boolean;
    static deviceOrientation: UnityEngine.DeviceOrientation;
    static acceleration: UnityEngine.Vector3;
    static compensateSensors: boolean;
    static accelerationEventCount: number;
    static backButtonLeavesApp: boolean;
    static location: UnityEngine.LocationService;
    static compass: UnityEngine.Compass;
    static gyro: UnityEngine.Gyroscope;
    static touches: UnityEngine.Touch[];
    static accelerationEvents: UnityEngine.AccelerationEvent[];
    static GetAxis: ((axisName: string) => number);
    static GetAxisRaw: ((axisName: string) => number);
    static GetButton: ((buttonName: string) => boolean);
    static GetButtonDown: ((buttonName: string) => boolean);
    static GetButtonUp: ((buttonName: string) => boolean);
    static GetMouseButton: ((button: number) => boolean);
    static GetMouseButtonDown: ((button: number) => boolean);
    static GetMouseButtonUp: ((button: number) => boolean);
    static ResetInputAxes: (() => void);
    static IsJoystickPreconfigured: ((joystickName: string) => boolean);
    static GetJoystickNames: (() => string[]);
    static GetTouch: ((index: number) => UnityEngine.Touch);
    static GetAccelerationEvent: ((index: number) => UnityEngine.AccelerationEvent);
    static GetKey: ((key: UnityEngine.KeyCode) => boolean) | ((name: string) => boolean);
    static GetKeyUp: ((key: UnityEngine.KeyCode) => boolean) | ((name: string) => boolean);
    static GetKeyDown: ((key: UnityEngine.KeyCode) => boolean) | ((name: string) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AnimationInfo {
    clip: UnityEngine.AnimationClip;
    weight: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Animator {
    constructor();
    isOptimizable: boolean;
    isHuman: boolean;
    hasRootMotion: boolean;
    humanScale: number;
    isInitialized: boolean;
    deltaPosition: UnityEngine.Vector3;
    deltaRotation: UnityEngine.Quaternion;
    velocity: UnityEngine.Vector3;
    angularVelocity: UnityEngine.Vector3;
    rootPosition: UnityEngine.Vector3;
    rootRotation: UnityEngine.Quaternion;
    applyRootMotion: boolean;
    linearVelocityBlending: boolean;
    animatePhysics: boolean;
    updateMode: UnityEngine.AnimatorUpdateMode;
    hasTransformHierarchy: boolean;
    gravityWeight: number;
    bodyPosition: UnityEngine.Vector3;
    bodyRotation: UnityEngine.Quaternion;
    stabilizeFeet: boolean;
    layerCount: number;
    parameters: UnityEngine.AnimatorControllerParameter[];
    parameterCount: number;
    feetPivotActive: number;
    pivotWeight: number;
    pivotPosition: UnityEngine.Vector3;
    isMatchingTarget: boolean;
    speed: number;
    targetPosition: UnityEngine.Vector3;
    targetRotation: UnityEngine.Quaternion;
    cullingMode: UnityEngine.AnimatorCullingMode;
    playbackTime: number;
    recorderStartTime: number;
    recorderStopTime: number;
    recorderMode: UnityEngine.AnimatorRecorderMode;
    runtimeAnimatorController: UnityEngine.RuntimeAnimatorController;
    hasBoundPlayables: boolean;
    avatar: UnityEngine.Avatar;
    playableGraph: UnityEngine.Playables.PlayableGraph;
    layersAffectMassCenter: boolean;
    leftFeetBottomHeight: number;
    rightFeetBottomHeight: number;
    logWarnings: boolean;
    fireEvents: boolean;
    keepAnimatorControllerStateOnDisable: boolean;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetCurrentAnimationClipState: ((layerIndex: number) => UnityEngine.AnimationInfo[]);
    GetNextAnimationClipState: ((layerIndex: number) => UnityEngine.AnimationInfo[]);
    Stop: (() => void);
    GetFloat: ((name: string) => number) | ((id: number) => number);
    SetFloat: ((name: string, value: number) => void) | ((name: string, value: number, dampTime: number, deltaTime: number) => void) | ((id: number, value: number) => void) | ((id: number, value: number, dampTime: number, deltaTime: number) => void);
    GetBool: ((name: string) => boolean) | ((id: number) => boolean);
    SetBool: ((name: string, value: boolean) => void) | ((id: number, value: boolean) => void);
    GetInteger: ((name: string) => number) | ((id: number) => number);
    SetInteger: ((name: string, value: number) => void) | ((id: number, value: number) => void);
    SetTrigger: ((name: string) => void) | ((id: number) => void);
    ResetTrigger: ((name: string) => void) | ((id: number) => void);
    IsParameterControlledByCurve: ((name: string) => boolean) | ((id: number) => boolean);
    GetIKPosition: ((goal: UnityEngine.AvatarIKGoal) => UnityEngine.Vector3);
    SetIKPosition: ((goal: UnityEngine.AvatarIKGoal, goalPosition: UnityEngine.Vector3) => void);
    GetIKRotation: ((goal: UnityEngine.AvatarIKGoal) => UnityEngine.Quaternion);
    SetIKRotation: ((goal: UnityEngine.AvatarIKGoal, goalRotation: UnityEngine.Quaternion) => void);
    GetIKPositionWeight: ((goal: UnityEngine.AvatarIKGoal) => number);
    SetIKPositionWeight: ((goal: UnityEngine.AvatarIKGoal, value: number) => void);
    GetIKRotationWeight: ((goal: UnityEngine.AvatarIKGoal) => number);
    SetIKRotationWeight: ((goal: UnityEngine.AvatarIKGoal, value: number) => void);
    GetIKHintPosition: ((hint: UnityEngine.AvatarIKHint) => UnityEngine.Vector3);
    SetIKHintPosition: ((hint: UnityEngine.AvatarIKHint, hintPosition: UnityEngine.Vector3) => void);
    GetIKHintPositionWeight: ((hint: UnityEngine.AvatarIKHint) => number);
    SetIKHintPositionWeight: ((hint: UnityEngine.AvatarIKHint, value: number) => void);
    SetLookAtPosition: ((lookAtPosition: UnityEngine.Vector3) => void);
    SetLookAtWeight: ((weight: number) => void) | ((weight: number, bodyWeight: number) => void) | ((weight: number, bodyWeight: number, headWeight: number) => void) | ((weight: number, bodyWeight: number, headWeight: number, eyesWeight: number) => void) | ((weight: number, bodyWeight: number, headWeight: number, eyesWeight: number, clampWeight: number) => void);
    SetBoneLocalRotation: ((humanBoneId: UnityEngine.HumanBodyBones, rotation: UnityEngine.Quaternion) => void);
    GetBehaviours: ((fullPathHash: number, layerIndex: number) => UnityEngine.StateMachineBehaviour[]);
    GetLayerName: ((layerIndex: number) => string);
    GetLayerIndex: ((layerName: string) => number);
    GetLayerWeight: ((layerIndex: number) => number);
    SetLayerWeight: ((layerIndex: number, weight: number) => void);
    GetCurrentAnimatorStateInfo: ((layerIndex: number) => UnityEngine.AnimatorStateInfo);
    GetNextAnimatorStateInfo: ((layerIndex: number) => UnityEngine.AnimatorStateInfo);
    GetAnimatorTransitionInfo: ((layerIndex: number) => UnityEngine.AnimatorTransitionInfo);
    GetCurrentAnimatorClipInfoCount: ((layerIndex: number) => number);
    GetNextAnimatorClipInfoCount: ((layerIndex: number) => number);
    GetCurrentAnimatorClipInfo: ((layerIndex: number) => UnityEngine.AnimatorClipInfo[]) | ((layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]) => void);
    GetNextAnimatorClipInfo: ((layerIndex: number) => UnityEngine.AnimatorClipInfo[]) | ((layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]) => void);
    IsInTransition: ((layerIndex: number) => boolean);
    GetParameter: ((index: number) => UnityEngine.AnimatorControllerParameter);
    MatchTarget: ((matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number) => void) | ((matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number) => void) | ((matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number, completeMatch: boolean) => void);
    InterruptMatchTarget: (() => void) | ((completeMatch: boolean) => void);
    ForceStateNormalizedTime: ((normalizedTime: number) => void);
    CrossFadeInFixedTime: ((stateName: string, fixedTransitionDuration: number) => void) | ((stateName: string, fixedTransitionDuration: number, layer: number) => void) | ((stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number) => void) | ((stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number) => void) | ((stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number) => void) | ((stateHashName: number, fixedTransitionDuration: number, layer: number) => void) | ((stateHashName: number, fixedTransitionDuration: number) => void) | ((stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number) => void);
    WriteDefaultValues: (() => void);
    CrossFade: ((stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number) => void) | ((stateName: string, normalizedTransitionDuration: number, layer: number) => void) | ((stateName: string, normalizedTransitionDuration: number) => void) | ((stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number) => void) | ((stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number) => void) | ((stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number) => void) | ((stateHashName: number, normalizedTransitionDuration: number, layer: number) => void) | ((stateHashName: number, normalizedTransitionDuration: number) => void);
    PlayInFixedTime: ((stateName: string, layer: number) => void) | ((stateName: string) => void) | ((stateName: string, layer: number, fixedTime: number) => void) | ((stateNameHash: number, layer: number, fixedTime: number) => void) | ((stateNameHash: number, layer: number) => void) | ((stateNameHash: number) => void);
    Play: ((stateName: string, layer: number) => void) | ((stateName: string) => void) | ((stateName: string, layer: number, normalizedTime: number) => void) | ((stateNameHash: number, layer: number, normalizedTime: number) => void) | ((stateNameHash: number, layer: number) => void) | ((stateNameHash: number) => void);
    SetTarget: ((targetIndex: UnityEngine.AvatarTarget, targetNormalizedTime: number) => void);
    IsControlled: ((transform: UnityEngine.Transform) => boolean);
    GetBoneTransform: ((humanBoneId: UnityEngine.HumanBodyBones) => UnityEngine.Transform);
    StartPlayback: (() => void);
    StopPlayback: (() => void);
    StartRecording: ((frameCount: number) => void);
    StopRecording: (() => void);
    HasState: ((layerIndex: number, stateID: number) => boolean);
    static StringToHash: ((name: string) => number);
    Update: ((deltaTime: number) => void);
    Rebind: (() => void);
    ApplyBuiltinRootMotion: (() => void);
    GetVector: ((name: string) => UnityEngine.Vector3) | ((id: number) => UnityEngine.Vector3);
    SetVector: ((name: string, value: UnityEngine.Vector3) => void) | ((id: number, value: UnityEngine.Vector3) => void);
    GetQuaternion: ((name: string) => UnityEngine.Quaternion) | ((id: number) => UnityEngine.Quaternion);
    SetQuaternion: ((name: string, value: UnityEngine.Quaternion) => void) | ((id: number, value: UnityEngine.Quaternion) => void);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export interface IAnimationClipSource {
    GetAnimationClips: ((results: UnityEngine.AnimationClip[]) => void);
  }
  export declare class StateMachineBehaviour {
    name: string;
    hideFlags: UnityEngine.HideFlags;
    OnStateEnter: ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number) => void) | ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    OnStateUpdate: ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number) => void) | ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    OnStateExit: ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number) => void) | ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    OnStateMove: ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number) => void) | ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    OnStateIK: ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number) => void) | ((animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    OnStateMachineEnter: ((animator: UnityEngine.Animator, stateMachinePathHash: number) => void) | ((animator: UnityEngine.Animator, stateMachinePathHash: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    OnStateMachineExit: ((animator: UnityEngine.Animator, stateMachinePathHash: number) => void) | ((animator: UnityEngine.Animator, stateMachinePathHash: number, controller: UnityEngine.Animations.AnimatorControllerPlayable) => void);
    SetDirty: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum PlayMode {
    StopSameLayer = 0,
    StopAll = 4,
  }
  export enum QueueMode {
    CompleteOthers = 0,
    PlayNow = 2,
  }
  export enum AnimationBlendMode {
    Blend = 0,
    Additive = 1,
  }
  export enum AnimationPlayMode {
    Stop = 0,
    Queue = 1,
    Mix = 2,
  }
  export enum AnimationCullingType {
    AlwaysAnimate = 0,
    BasedOnRenderers = 1,
    BasedOnClipBounds = 2,
    BasedOnUserBounds = 3,
  }
  export declare class Animation {
    constructor();
    clip: UnityEngine.AnimationClip;
    playAutomatically: boolean;
    wrapMode: UnityEngine.WrapMode;
    isPlaying: boolean;
    animatePhysics: boolean;
    animateOnlyIfVisible: boolean;
    cullingType: UnityEngine.AnimationCullingType;
    localBounds: UnityEngine.Bounds;
    enabled: boolean;
    isActiveAndEnabled: boolean;
    transform: UnityEngine.Transform;
    gameObject: UnityEngine.GameObject;
    tag: string;
    rigidbody: UnityEngine.Component;
    rigidbody2D: UnityEngine.Component;
    camera: UnityEngine.Component;
    light: UnityEngine.Component;
    animation: UnityEngine.Component;
    constantForce: UnityEngine.Component;
    renderer: UnityEngine.Component;
    audio: UnityEngine.Component;
    networkView: UnityEngine.Component;
    collider: UnityEngine.Component;
    collider2D: UnityEngine.Component;
    hingeJoint: UnityEngine.Component;
    particleSystem: UnityEngine.Component;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    Stop: (() => void) | ((name: string) => void);
    Rewind: (() => void) | ((name: string) => void);
    Sample: (() => void);
    IsPlaying: ((name: string) => boolean);
    Play: (() => boolean) | ((mode: UnityEngine.PlayMode) => boolean) | ((animation: string) => boolean) | ((animation: string, mode: UnityEngine.PlayMode) => boolean) | ((mode: UnityEngine.AnimationPlayMode) => boolean) | ((animation: string, mode: UnityEngine.AnimationPlayMode) => boolean);
    CrossFade: ((animation: string) => void) | ((animation: string, fadeLength: number) => void) | ((animation: string, fadeLength: number, mode: UnityEngine.PlayMode) => void);
    Blend: ((animation: string) => void) | ((animation: string, targetWeight: number) => void) | ((animation: string, targetWeight: number, fadeLength: number) => void);
    CrossFadeQueued: ((animation: string) => UnityEngine.AnimationState) | ((animation: string, fadeLength: number) => UnityEngine.AnimationState) | ((animation: string, fadeLength: number, queue: UnityEngine.QueueMode) => UnityEngine.AnimationState) | ((animation: string, fadeLength: number, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode) => UnityEngine.AnimationState);
    PlayQueued: ((animation: string) => UnityEngine.AnimationState) | ((animation: string, queue: UnityEngine.QueueMode) => UnityEngine.AnimationState) | ((animation: string, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode) => UnityEngine.AnimationState);
    AddClip: ((clip: UnityEngine.AnimationClip, newName: string) => void) | ((clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number) => void) | ((clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number, addLoopFrame: boolean) => void);
    RemoveClip: ((clip: UnityEngine.AnimationClip) => void) | ((clipName: string) => void);
    GetClipCount: (() => number);
    SyncLayer: ((layer: number) => void);
    GetEnumerator: (() => System.Collections.IEnumerator);
    GetClip: ((name: string) => UnityEngine.AnimationClip);
    GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
    GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
    GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
    GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
    GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
    CompareTag: ((tag: string) => boolean);
    SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AnimationState {
    constructor();
    enabled: boolean;
    weight: number;
    wrapMode: UnityEngine.WrapMode;
    time: number;
    normalizedTime: number;
    speed: number;
    normalizedSpeed: number;
    length: number;
    layer: number;
    clip: UnityEngine.AnimationClip;
    name: string;
    blendMode: UnityEngine.AnimationBlendMode;
    AddMixingTransform: ((mix: UnityEngine.Transform) => void) | ((mix: UnityEngine.Transform, recursive: boolean) => void);
    RemoveMixingTransform: ((mix: UnityEngine.Transform) => void);
    Equals: ((o: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AnimationEvent {
    constructor();
    data: string;
    stringParameter: string;
    floatParameter: number;
    intParameter: number;
    objectReferenceParameter: UnityEngine.Object;
    functionName: string;
    time: number;
    messageOptions: UnityEngine.SendMessageOptions;
    isFiredByLegacy: boolean;
    isFiredByAnimator: boolean;
    animationState: UnityEngine.AnimationState;
    animatorStateInfo: UnityEngine.AnimatorStateInfo;
    animatorClipInfo: UnityEngine.AnimatorClipInfo;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AnimationClip {
    constructor();
    length: number;
    frameRate: number;
    wrapMode: UnityEngine.WrapMode;
    localBounds: UnityEngine.Bounds;
    legacy: boolean;
    humanMotion: boolean;
    empty: boolean;
    hasGenericRootTransform: boolean;
    hasMotionFloatCurves: boolean;
    hasMotionCurves: boolean;
    hasRootCurves: boolean;
    events: UnityEngine.AnimationEvent[];
    averageDuration: number;
    averageAngularSpeed: number;
    averageSpeed: UnityEngine.Vector3;
    apparentSpeed: number;
    isLooping: boolean;
    isHumanMotion: boolean;
    isAnimatorMotion: boolean;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    SampleAnimation: ((go: UnityEngine.GameObject, time: number) => void);
    SetCurve: ((relativePath: string, type: System.Type, propertyName: string, curve: UnityEngine.AnimationCurve) => void);
    EnsureQuaternionContinuity: (() => void);
    ClearCurves: (() => void);
    AddEvent: ((evt: UnityEngine.AnimationEvent) => void);
    ValidateIfRetargetable: ((val: boolean) => boolean);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export enum AvatarTarget {
    Root = 0,
    Body = 1,
    LeftFoot = 2,
    RightFoot = 3,
    LeftHand = 4,
    RightHand = 5,
  }
  export enum AvatarIKGoal {
    LeftFoot = 0,
    RightFoot = 1,
    LeftHand = 2,
    RightHand = 3,
  }
  export enum AvatarIKHint {
    LeftKnee = 0,
    RightKnee = 1,
    LeftElbow = 2,
    RightElbow = 3,
  }
  export enum AnimatorControllerParameterType {
    Float = 1,
    Int = 3,
    Bool = 4,
    Trigger = 9,
  }
  export enum AnimatorRecorderMode {
    Offline = 0,
    Playback = 1,
    Record = 2,
  }
  export enum DurationUnit {
    Fixed = 0,
    Normalized = 1,
  }
  export enum AnimatorCullingMode {
    AlwaysAnimate = 0,
    CullUpdateTransforms = 1,
    CullCompletely = 2,
    BasedOnRenderers = 1,
  }
  export enum AnimatorUpdateMode {
    Normal = 0,
    AnimatePhysics = 1,
    UnscaledTime = 2,
  }
  export declare class AnimatorClipInfo {
    clip: UnityEngine.AnimationClip;
    weight: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AnimatorStateInfo {
    fullPathHash: number;
    nameHash: number;
    shortNameHash: number;
    normalizedTime: number;
    length: number;
    speed: number;
    speedMultiplier: number;
    tagHash: number;
    loop: boolean;
    IsName: ((name: string) => boolean);
    IsTag: ((tag: string) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AnimatorTransitionInfo {
    fullPathHash: number;
    nameHash: number;
    userNameHash: number;
    durationUnit: UnityEngine.DurationUnit;
    duration: number;
    normalizedTime: number;
    anyState: boolean;
    IsName: ((name: string) => boolean);
    IsUserName: ((name: string) => boolean);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class MatchTargetWeightMask {
    constructor(positionXYZWeight: UnityEngine.Vector3, rotationWeight: number);
    positionXYZWeight: UnityEngine.Vector3;
    rotationWeight: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AnimatorControllerParameter {
    constructor();
    name: string;
    nameHash: number;
    type: UnityEngine.AnimatorControllerParameterType;
    defaultFloat: number;
    defaultInt: number;
    defaultBool: boolean;
    Equals: ((o: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AnimationClipPair {
    constructor();
    originalClip: UnityEngine.AnimationClip;
    overrideClip: UnityEngine.AnimationClip;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AnimatorOverrideController {
    constructor();
    constructor(controller: UnityEngine.RuntimeAnimatorController);
    runtimeAnimatorController: UnityEngine.RuntimeAnimatorController;
    overridesCount: number;
    clips: UnityEngine.AnimationClipPair[];
    animationClips: UnityEngine.AnimationClip[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetOverrides: ((overrides: System.Collections.Generic.KeyValuePair<UnityEngine.AnimationClip, UnityEngine.AnimationClip>[]) => void);
    ApplyOverrides: ((overrides: System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<UnityEngine.AnimationClip, UnityEngine.AnimationClip>>) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AnimatorUtility {
    constructor();
    static OptimizeTransformHierarchy: ((go: UnityEngine.GameObject, exposedTransforms: string[]) => void);
    static DeoptimizeTransformHierarchy: ((go: UnityEngine.GameObject) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum BodyDof {
    SpineFrontBack = 0,
    SpineLeftRight = 1,
    SpineRollLeftRight = 2,
    ChestFrontBack = 3,
    ChestLeftRight = 4,
    ChestRollLeftRight = 5,
    UpperChestFrontBack = 6,
    UpperChestLeftRight = 7,
    UpperChestRollLeftRight = 8,
    LastBodyDof = 9,
  }
  export enum HeadDof {
    NeckFrontBack = 0,
    NeckLeftRight = 1,
    NeckRollLeftRight = 2,
    HeadFrontBack = 3,
    HeadLeftRight = 4,
    HeadRollLeftRight = 5,
    LeftEyeDownUp = 6,
    LeftEyeInOut = 7,
    RightEyeDownUp = 8,
    RightEyeInOut = 9,
    JawDownUp = 10,
    JawLeftRight = 11,
    LastHeadDof = 12,
  }
  export enum LegDof {
    UpperLegFrontBack = 0,
    UpperLegInOut = 1,
    UpperLegRollInOut = 2,
    LegCloseOpen = 3,
    LegRollInOut = 4,
    FootCloseOpen = 5,
    FootInOut = 6,
    ToesUpDown = 7,
    LastLegDof = 8,
  }
  export enum ArmDof {
    ShoulderDownUp = 0,
    ShoulderFrontBack = 1,
    ArmDownUp = 2,
    ArmFrontBack = 3,
    ArmRollInOut = 4,
    ForeArmCloseOpen = 5,
    ForeArmRollInOut = 6,
    HandDownUp = 7,
    HandInOut = 8,
    LastArmDof = 9,
  }
  export enum FingerDof {
    ProximalDownUp = 0,
    ProximalInOut = 1,
    IntermediateCloseOpen = 2,
    DistalCloseOpen = 3,
    LastFingerDof = 4,
  }
  export enum HumanPartDof {
    Body = 0,
    Head = 1,
    LeftLeg = 2,
    RightLeg = 3,
    LeftArm = 4,
    RightArm = 5,
    LeftThumb = 6,
    LeftIndex = 7,
    LeftMiddle = 8,
    LeftRing = 9,
    LeftLittle = 10,
    RightThumb = 11,
    RightIndex = 12,
    RightMiddle = 13,
    RightRing = 14,
    RightLittle = 15,
    LastHumanPartDof = 16,
  }
  export enum HumanBodyBones {
    Hips = 0,
    LeftUpperLeg = 1,
    RightUpperLeg = 2,
    LeftLowerLeg = 3,
    RightLowerLeg = 4,
    LeftFoot = 5,
    RightFoot = 6,
    Spine = 7,
    Chest = 8,
    UpperChest = 54,
    Neck = 9,
    Head = 10,
    LeftShoulder = 11,
    RightShoulder = 12,
    LeftUpperArm = 13,
    RightUpperArm = 14,
    LeftLowerArm = 15,
    RightLowerArm = 16,
    LeftHand = 17,
    RightHand = 18,
    LeftToes = 19,
    RightToes = 20,
    LeftEye = 21,
    RightEye = 22,
    Jaw = 23,
    LeftThumbProximal = 24,
    LeftThumbIntermediate = 25,
    LeftThumbDistal = 26,
    LeftIndexProximal = 27,
    LeftIndexIntermediate = 28,
    LeftIndexDistal = 29,
    LeftMiddleProximal = 30,
    LeftMiddleIntermediate = 31,
    LeftMiddleDistal = 32,
    LeftRingProximal = 33,
    LeftRingIntermediate = 34,
    LeftRingDistal = 35,
    LeftLittleProximal = 36,
    LeftLittleIntermediate = 37,
    LeftLittleDistal = 38,
    RightThumbProximal = 39,
    RightThumbIntermediate = 40,
    RightThumbDistal = 41,
    RightIndexProximal = 42,
    RightIndexIntermediate = 43,
    RightIndexDistal = 44,
    RightMiddleProximal = 45,
    RightMiddleIntermediate = 46,
    RightMiddleDistal = 47,
    RightRingProximal = 48,
    RightRingIntermediate = 49,
    RightRingDistal = 50,
    RightLittleProximal = 51,
    RightLittleIntermediate = 52,
    RightLittleDistal = 53,
    LastBone = 55,
  }
  export declare class Avatar {
    isValid: boolean;
    isHuman: boolean;
    humanDescription: UnityEngine.HumanDescription;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class SkeletonBone {
    transformModified: number;
    name: string;
    position: UnityEngine.Vector3;
    rotation: UnityEngine.Quaternion;
    scale: UnityEngine.Vector3;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class HumanLimit {
    useDefaultValues: boolean;
    min: UnityEngine.Vector3;
    max: UnityEngine.Vector3;
    center: UnityEngine.Vector3;
    axisLength: number;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class HumanBone {
    boneName: string;
    humanName: string;
    limit: UnityEngine.HumanLimit;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class HumanDescription {
    upperArmTwist: number;
    lowerArmTwist: number;
    upperLegTwist: number;
    lowerLegTwist: number;
    armStretch: number;
    legStretch: number;
    feetSpacing: number;
    hasTranslationDoF: boolean;
    human: UnityEngine.HumanBone[];
    skeleton: UnityEngine.SkeletonBone[];
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AvatarBuilder {
    constructor();
    static BuildHumanAvatar: ((go: UnityEngine.GameObject, humanDescription: UnityEngine.HumanDescription) => UnityEngine.Avatar);
    static BuildGenericAvatar: ((go: UnityEngine.GameObject, rootMotionTransformName: string) => UnityEngine.Avatar);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum AvatarMaskBodyPart {
    Root = 0,
    Body = 1,
    Head = 2,
    LeftLeg = 3,
    RightLeg = 4,
    LeftArm = 5,
    RightArm = 6,
    LeftFingers = 7,
    RightFingers = 8,
    LeftFootIK = 9,
    RightFootIK = 10,
    LeftHandIK = 11,
    RightHandIK = 12,
    LastBodyPart = 13,
  }
  export declare class AvatarMask {
    constructor();
    humanoidBodyPartCount: number;
    transformCount: number;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetHumanoidBodyPartActive: ((index: UnityEngine.AvatarMaskBodyPart) => boolean);
    SetHumanoidBodyPartActive: ((index: UnityEngine.AvatarMaskBodyPart, value: boolean) => void);
    AddTransformPath: ((transform: UnityEngine.Transform) => void) | ((transform: UnityEngine.Transform, recursive: boolean) => void);
    RemoveTransformPath: ((transform: UnityEngine.Transform) => void) | ((transform: UnityEngine.Transform, recursive: boolean) => void);
    GetTransformPath: ((index: number) => string);
    SetTransformPath: ((index: number, path: string) => void);
    GetTransformActive: ((index: number) => boolean);
    SetTransformActive: ((index: number, value: boolean) => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class HumanPose {
    bodyPosition: UnityEngine.Vector3;
    bodyRotation: UnityEngine.Quaternion;
    muscles: number[];
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class HumanPoseHandler {
    constructor(avatar: UnityEngine.Avatar, root: UnityEngine.Transform);
    constructor(avatar: UnityEngine.Avatar, jointPaths: string[]);
    Dispose: (() => void);
    GetInternalAvatarPose: ((avatarPose: Unity.Collections.NativeArray<number>) => void);
    SetInternalAvatarPose: ((avatarPose: Unity.Collections.NativeArray<number>) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class HumanTrait {
    constructor();
    static MuscleCount: number;
    static MuscleName: string[];
    static BoneCount: number;
    static BoneName: string[];
    static RequiredBoneCount: number;
    static MuscleFromBone: ((i: number, dofIndex: number) => number);
    static BoneFromMuscle: ((i: number) => number);
    static RequiredBone: ((i: number) => boolean);
    static GetMuscleDefaultMin: ((i: number) => number);
    static GetMuscleDefaultMax: ((i: number) => number);
    static GetBoneDefaultHierarchyMass: ((i: number) => number);
    static GetParentBone: ((i: number) => number);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class Motion {
    averageDuration: number;
    averageAngularSpeed: number;
    averageSpeed: UnityEngine.Vector3;
    apparentSpeed: number;
    isLooping: boolean;
    legacy: boolean;
    isHumanMotion: boolean;
    isAnimatorMotion: boolean;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    ValidateIfRetargetable: ((val: boolean) => boolean);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RuntimeAnimatorController {
    animationClips: UnityEngine.AnimationClip[];
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class Event {
    constructor();
    constructor(displayIndex: number);
    constructor(other: UnityEngine.Event);
    rawType: UnityEngine.EventType;
    mousePosition: UnityEngine.Vector2;
    delta: UnityEngine.Vector2;
    pointerType: UnityEngine.PointerType;
    button: number;
    modifiers: UnityEngine.EventModifiers;
    pressure: number;
    clickCount: number;
    character: System.Char;
    keyCode: UnityEngine.KeyCode;
    displayIndex: number;
    type: UnityEngine.EventType;
    commandName: string;
    mouseRay: UnityEngine.Ray;
    shift: boolean;
    control: boolean;
    alt: boolean;
    command: boolean;
    capsLock: boolean;
    numeric: boolean;
    functionKey: boolean;
    static current: UnityEngine.Event;
    isKey: boolean;
    isMouse: boolean;
    isScrollWheel: boolean;
    GetTypeForControl: ((controlID: number) => UnityEngine.EventType);
    static PopEvent: ((outEvent: UnityEngine.Event) => boolean);
    static GetEventCount: (() => number);
    static KeyboardEvent: ((key: string) => UnityEngine.Event);
    GetHashCode: (() => number);
    Equals: ((obj: System.Object) => boolean);
    ToString: (() => string);
    Use: (() => void);
    GetType: (() => System.Type);
  }
  export enum EventType {
    MouseDown = 0,
    MouseUp = 1,
    MouseMove = 2,
    MouseDrag = 3,
    KeyDown = 4,
    KeyUp = 5,
    ScrollWheel = 6,
    Repaint = 7,
    Layout = 8,
    DragUpdated = 9,
    DragPerform = 10,
    DragExited = 15,
    Ignore = 11,
    Used = 12,
    ValidateCommand = 13,
    ExecuteCommand = 14,
    ContextClick = 16,
    MouseEnterWindow = 20,
    MouseLeaveWindow = 21,
    TouchDown = 30,
    TouchUp = 31,
    TouchMove = 32,
    TouchEnter = 33,
    TouchLeave = 34,
    TouchStationary = 35,
    mouseDown = 0,
    mouseUp = 1,
    mouseMove = 2,
    mouseDrag = 3,
    keyDown = 4,
    keyUp = 5,
    scrollWheel = 6,
    repaint = 7,
    layout = 8,
    dragUpdated = 9,
    dragPerform = 10,
    ignore = 11,
    used = 12,
  }
  export enum EventModifiers {
    None = 0,
    Shift = 1,
    Control = 2,
    Alt = 4,
    Command = 8,
    Numeric = 16,
    CapsLock = 32,
    FunctionKey = 64,
  }
  export enum PointerType {
    Mouse = 0,
    Touch = 1,
    Pen = 2,
  }
  export declare class GUI {
    constructor();
    static color: UnityEngine.Color;
    static backgroundColor: UnityEngine.Color;
    static contentColor: UnityEngine.Color;
    static changed: boolean;
    static enabled: boolean;
    static depth: number;
    static skin: UnityEngine.GUISkin;
    static matrix: UnityEngine.Matrix4x4;
    static tooltip: string;
    static SetNextControlName: ((name: string) => void);
    static GetNameOfFocusedControl: (() => string);
    static FocusControl: ((name: string) => void);
    static DragWindow: ((position: UnityEngine.Rect) => void) | (() => void);
    static BringWindowToFront: ((windowID: number) => void);
    static BringWindowToBack: ((windowID: number) => void);
    static FocusWindow: ((windowID: number) => void);
    static UnfocusWindow: (() => void);
    static Label: ((position: UnityEngine.Rect, text: string) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent) => void) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => void);
    static DrawTexture: ((position: UnityEngine.Rect, image: UnityEngine.Texture) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidth: number, borderRadius: number) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidths: UnityEngine.Vector4, borderRadius: number) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidths: UnityEngine.Vector4, borderRadiuses: UnityEngine.Vector4) => void);
    static DrawTextureWithTexCoords: ((position: UnityEngine.Rect, image: UnityEngine.Texture, texCoords: UnityEngine.Rect) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, texCoords: UnityEngine.Rect, alphaBlend: boolean) => void);
    static Box: ((position: UnityEngine.Rect, text: string) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent) => void) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => void);
    static Button: ((position: UnityEngine.Rect, text: string) => boolean) | ((position: UnityEngine.Rect, image: UnityEngine.Texture) => boolean) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent) => boolean) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => boolean);
    static RepeatButton: ((position: UnityEngine.Rect, text: string) => boolean) | ((position: UnityEngine.Rect, image: UnityEngine.Texture) => boolean) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent) => boolean) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => boolean);
    static TextField: ((position: UnityEngine.Rect, text: string) => string) | ((position: UnityEngine.Rect, text: string, maxLength: number) => string) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => string) | ((position: UnityEngine.Rect, text: string, maxLength: number, style: UnityEngine.GUIStyle) => string);
    static PasswordField: ((position: UnityEngine.Rect, password: string, maskChar: System.Char) => string) | ((position: UnityEngine.Rect, password: string, maskChar: System.Char, maxLength: number) => string) | ((position: UnityEngine.Rect, password: string, maskChar: System.Char, style: UnityEngine.GUIStyle) => string) | ((position: UnityEngine.Rect, password: string, maskChar: System.Char, maxLength: number, style: UnityEngine.GUIStyle) => string);
    static TextArea: ((position: UnityEngine.Rect, text: string) => string) | ((position: UnityEngine.Rect, text: string, maxLength: number) => string) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => string) | ((position: UnityEngine.Rect, text: string, maxLength: number, style: UnityEngine.GUIStyle) => string);
    static Toggle: ((position: UnityEngine.Rect, value: boolean, text: string) => boolean) | ((position: UnityEngine.Rect, value: boolean, image: UnityEngine.Texture) => boolean) | ((position: UnityEngine.Rect, value: boolean, content: UnityEngine.GUIContent) => boolean) | ((position: UnityEngine.Rect, value: boolean, text: string, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, value: boolean, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => boolean) | ((position: UnityEngine.Rect, id: number, value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => boolean);
    static Toolbar: ((position: UnityEngine.Rect, selected: number, texts: string[]) => number) | ((position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[]) => number) | ((position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[]) => number) | ((position: UnityEngine.Rect, selected: number, texts: string[], style: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI_ToolbarButtonSize) => number);
    static SelectionGrid: ((position: UnityEngine.Rect, selected: number, texts: string[], xCount: number) => number) | ((position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], xCount: number) => number) | ((position: UnityEngine.Rect, selected: number, content: UnityEngine.GUIContent[], xCount: number) => number) | ((position: UnityEngine.Rect, selected: number, texts: string[], xCount: number, style: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], xCount: number, style: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle) => number);
    static HorizontalSlider: ((position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number) => number) | ((position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, thumbExtent: UnityEngine.GUIStyle) => number);
    static VerticalSlider: ((position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number) => number) | ((position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle) => number) | ((position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, thumbExtent: UnityEngine.GUIStyle) => number);
    static Slider: ((position: UnityEngine.Rect, value: number, size: number, start: number, end: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, horiz: boolean, id: number, thumbExtent?: UnityEngine.GUIStyle) => number);
    static HorizontalScrollbar: ((position: UnityEngine.Rect, value: number, size: number, leftValue: number, rightValue: number) => number) | ((position: UnityEngine.Rect, value: number, size: number, leftValue: number, rightValue: number, style: UnityEngine.GUIStyle) => number);
    static VerticalScrollbar: ((position: UnityEngine.Rect, value: number, size: number, topValue: number, bottomValue: number) => number) | ((position: UnityEngine.Rect, value: number, size: number, topValue: number, bottomValue: number, style: UnityEngine.GUIStyle) => number);
    static BeginClip: ((position: UnityEngine.Rect, scrollOffset: UnityEngine.Vector2, renderOffset: UnityEngine.Vector2, resetOffset: boolean) => void) | ((position: UnityEngine.Rect) => void);
    static BeginGroup: ((position: UnityEngine.Rect) => void) | ((position: UnityEngine.Rect, text: string) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent) => void) | ((position: UnityEngine.Rect, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => void);
    static EndGroup: (() => void);
    static EndClip: (() => void);
    static BeginScrollView: ((position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect) => UnityEngine.Vector2) | ((position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean) => UnityEngine.Vector2) | ((position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle) => UnityEngine.Vector2) | ((position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle) => UnityEngine.Vector2);
    static EndScrollView: (() => void) | ((handleScrollWheel: boolean) => void);
    static ScrollTo: ((position: UnityEngine.Rect) => void);
    static ScrollTowards: ((position: UnityEngine.Rect, maxDelta: number) => boolean);
    static Window: ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, text: string) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, image: UnityEngine.Texture) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, content: UnityEngine.GUIContent) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, text: string, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, title: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => UnityEngine.Rect);
    static ModalWindow: ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, text: string) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, image: UnityEngine.Texture) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, content: UnityEngine.GUIContent) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, text: string, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => UnityEngine.Rect);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum GUI_ToolbarButtonSize {
    Fixed = 0,
    FitToContents = 1,
  }
  export declare class GUI_WindowFunction {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: ((id: number) => void);
    BeginInvoke: ((id: number, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUI_Scope {
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUI_GroupScope {
    constructor(position: UnityEngine.Rect);
    constructor(position: UnityEngine.Rect, text: string);
    constructor(position: UnityEngine.Rect, image: UnityEngine.Texture);
    constructor(position: UnityEngine.Rect, content: UnityEngine.GUIContent);
    constructor(position: UnityEngine.Rect, style: UnityEngine.GUIStyle);
    constructor(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle);
    constructor(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle);
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUI_ScrollViewScope {
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect);
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean);
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle);
    constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle);
    scrollPosition: UnityEngine.Vector2;
    handleScrollWheel: boolean;
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUI_ClipScope {
    constructor(position: UnityEngine.Rect);
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUIContent {
    constructor();
    constructor(text: string);
    constructor(image: UnityEngine.Texture);
    constructor(text: string, image: UnityEngine.Texture);
    constructor(text: string, tooltip: string);
    constructor(image: UnityEngine.Texture, tooltip: string);
    constructor(text: string, image: UnityEngine.Texture, tooltip: string);
    constructor(src: UnityEngine.GUIContent);
    text: string;
    image: UnityEngine.Texture;
    tooltip: string;
    static none: UnityEngine.GUIContent;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUIElement {
    constructor();
    HitTest: ((screenPosition: UnityEngine.Vector3) => boolean) | ((screenPosition: UnityEngine.Vector3, camera: UnityEngine.Camera) => boolean);
    GetScreenRect: ((camera: UnityEngine.Camera) => UnityEngine.Rect) | (() => UnityEngine.Rect);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum ScaleMode {
    StretchToFill = 0,
    ScaleAndCrop = 1,
    ScaleToFit = 2,
  }
  export enum FocusType {
    Native = 0,
    Keyboard = 1,
    Passive = 2,
  }
  export declare class GUILayer {
    constructor();
    HitTest: ((screenPosition: UnityEngine.Vector3) => UnityEngine.GUIElement);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayout {
    constructor();
    static Label: ((image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) => void) | ((text: string, ...options: UnityEngine.GUILayoutOption[]) => void) | ((content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) => void) | ((image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void);
    static Box: ((image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) => void) | ((text: string, ...options: UnityEngine.GUILayoutOption[]) => void) | ((content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) => void) | ((image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void);
    static Button: ((image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((text: string, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean);
    static RepeatButton: ((image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((text: string, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean);
    static TextField: ((text: string, ...options: UnityEngine.GUILayoutOption[]) => string) | ((text: string, maxLength: number, ...options: UnityEngine.GUILayoutOption[]) => string) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => string) | ((text: string, maxLength: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => string);
    static PasswordField: ((password: string, maskChar: System.Char, ...options: UnityEngine.GUILayoutOption[]) => string) | ((password: string, maskChar: System.Char, maxLength: number, ...options: UnityEngine.GUILayoutOption[]) => string) | ((password: string, maskChar: System.Char, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => string) | ((password: string, maskChar: System.Char, maxLength: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => string);
    static TextArea: ((text: string, ...options: UnityEngine.GUILayoutOption[]) => string) | ((text: string, maxLength: number, ...options: UnityEngine.GUILayoutOption[]) => string) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => string) | ((text: string, maxLength: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => string);
    static Toggle: ((value: boolean, image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((value: boolean, text: string, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((value: boolean, content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((value: boolean, image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((value: boolean, text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean) | ((value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => boolean);
    static Toolbar: ((selected: number, texts: string[], ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, images: UnityEngine.Texture[], ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, contents: UnityEngine.GUIContent[], ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, texts: string[], style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, texts: string[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI_ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI_ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI_ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, contents: UnityEngine.GUIContent[], enabled: boolean[], style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, contents: UnityEngine.GUIContent[], enabled: boolean[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI_ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) => number);
    static SelectionGrid: ((selected: number, texts: string[], xCount: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, images: UnityEngine.Texture[], xCount: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, content: UnityEngine.GUIContent[], xCount: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, texts: string[], xCount: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, images: UnityEngine.Texture[], xCount: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number) | ((selected: number, contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number);
    static HorizontalSlider: ((value: number, leftValue: number, rightValue: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number);
    static VerticalSlider: ((value: number, leftValue: number, rightValue: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number);
    static HorizontalScrollbar: ((value: number, size: number, leftValue: number, rightValue: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((value: number, size: number, leftValue: number, rightValue: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number);
    static VerticalScrollbar: ((value: number, size: number, topValue: number, bottomValue: number, ...options: UnityEngine.GUILayoutOption[]) => number) | ((value: number, size: number, topValue: number, bottomValue: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => number);
    static Space: ((pixels: number) => void);
    static FlexibleSpace: (() => void);
    static BeginHorizontal: ((...options: UnityEngine.GUILayoutOption[]) => void) | ((style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void);
    static EndHorizontal: (() => void);
    static BeginVertical: ((...options: UnityEngine.GUILayoutOption[]) => void) | ((style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => void);
    static EndVertical: (() => void);
    static BeginArea: ((screenRect: UnityEngine.Rect) => void) | ((screenRect: UnityEngine.Rect, text: string) => void) | ((screenRect: UnityEngine.Rect, image: UnityEngine.Texture) => void) | ((screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent) => void) | ((screenRect: UnityEngine.Rect, style: UnityEngine.GUIStyle) => void) | ((screenRect: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle) => void) | ((screenRect: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle) => void) | ((screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => void);
    static EndArea: (() => void);
    static BeginScrollView: ((scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Vector2) | ((scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Vector2) | ((scrollPosition: UnityEngine.Vector2, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Vector2) | ((scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle) => UnityEngine.Vector2) | ((scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Vector2) | ((scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Vector2) | ((scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Vector2);
    static EndScrollView: (() => void);
    static Window: ((id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, text: string, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI_WindowFunction, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect);
    static Width: ((width: number) => UnityEngine.GUILayoutOption);
    static MinWidth: ((minWidth: number) => UnityEngine.GUILayoutOption);
    static MaxWidth: ((maxWidth: number) => UnityEngine.GUILayoutOption);
    static Height: ((height: number) => UnityEngine.GUILayoutOption);
    static MinHeight: ((minHeight: number) => UnityEngine.GUILayoutOption);
    static MaxHeight: ((maxHeight: number) => UnityEngine.GUILayoutOption);
    static ExpandWidth: ((expand: boolean) => UnityEngine.GUILayoutOption);
    static ExpandHeight: ((expand: boolean) => UnityEngine.GUILayoutOption);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayout_HorizontalScope {
    constructor(...options: UnityEngine.GUILayoutOption[]);
    constructor(style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayout_VerticalScope {
    constructor(...options: UnityEngine.GUILayoutOption[]);
    constructor(style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(text: string, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayout_AreaScope {
    constructor(screenRect: UnityEngine.Rect);
    constructor(screenRect: UnityEngine.Rect, text: string);
    constructor(screenRect: UnityEngine.Rect, image: UnityEngine.Texture);
    constructor(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent);
    constructor(screenRect: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle);
    constructor(screenRect: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle);
    constructor(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle);
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayout_ScrollViewScope {
    constructor(scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]);
    scrollPosition: UnityEngine.Vector2;
    handleScrollWheel: boolean;
    Dispose: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayoutOption {
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUILayoutUtility {
    constructor();
    static BeginGroup: ((GroupName: string) => void);
    static EndGroup: ((groupName: string) => void);
    static GetRect: ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((width: number, height: number) => UnityEngine.Rect) | ((width: number, height: number, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((width: number, height: number, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((width: number, height: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((minWidth: number, maxWidth: number, minHeight: number, maxHeight: number) => UnityEngine.Rect) | ((minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect);
    static GetLastRect: (() => UnityEngine.Rect);
    static GetAspectRect: ((aspect: number) => UnityEngine.Rect) | ((aspect: number, style: UnityEngine.GUIStyle) => UnityEngine.Rect) | ((aspect: number, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect) | ((aspect: number, style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) => UnityEngine.Rect);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUISettings {
    constructor();
    doubleClickSelectsWord: boolean;
    tripleClickSelectsLine: boolean;
    cursorColor: UnityEngine.Color;
    cursorFlashSpeed: number;
    selectionColor: UnityEngine.Color;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUISkin {
    constructor();
    font: UnityEngine.Font;
    box: UnityEngine.GUIStyle;
    label: UnityEngine.GUIStyle;
    textField: UnityEngine.GUIStyle;
    textArea: UnityEngine.GUIStyle;
    button: UnityEngine.GUIStyle;
    toggle: UnityEngine.GUIStyle;
    window: UnityEngine.GUIStyle;
    horizontalSlider: UnityEngine.GUIStyle;
    horizontalSliderThumb: UnityEngine.GUIStyle;
    verticalSlider: UnityEngine.GUIStyle;
    verticalSliderThumb: UnityEngine.GUIStyle;
    horizontalScrollbar: UnityEngine.GUIStyle;
    horizontalScrollbarThumb: UnityEngine.GUIStyle;
    horizontalScrollbarLeftButton: UnityEngine.GUIStyle;
    horizontalScrollbarRightButton: UnityEngine.GUIStyle;
    verticalScrollbar: UnityEngine.GUIStyle;
    verticalScrollbarThumb: UnityEngine.GUIStyle;
    verticalScrollbarUpButton: UnityEngine.GUIStyle;
    verticalScrollbarDownButton: UnityEngine.GUIStyle;
    scrollView: UnityEngine.GUIStyle;
    customStyles: UnityEngine.GUIStyle[];
    settings: UnityEngine.GUISettings;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetStyle: ((styleName: string) => UnityEngine.GUIStyle);
    FindStyle: ((styleName: string) => UnityEngine.GUIStyle);
    GetEnumerator: (() => System.Collections.IEnumerator);
    SetDirty: (() => void);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class GUIStyleState {
    constructor();
    background: UnityEngine.Texture2D;
    textColor: UnityEngine.Color;
    scaledBackgrounds: UnityEngine.Texture2D[];
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUIStyle {
    constructor();
    constructor(other: UnityEngine.GUIStyle);
    font: UnityEngine.Font;
    imagePosition: UnityEngine.ImagePosition;
    alignment: UnityEngine.TextAnchor;
    wordWrap: boolean;
    clipping: UnityEngine.TextClipping;
    contentOffset: UnityEngine.Vector2;
    fixedWidth: number;
    fixedHeight: number;
    stretchWidth: boolean;
    stretchHeight: boolean;
    fontSize: number;
    fontStyle: UnityEngine.FontStyle;
    richText: boolean;
    clipOffset: UnityEngine.Vector2;
    name: string;
    normal: UnityEngine.GUIStyleState;
    hover: UnityEngine.GUIStyleState;
    active: UnityEngine.GUIStyleState;
    onNormal: UnityEngine.GUIStyleState;
    onHover: UnityEngine.GUIStyleState;
    onActive: UnityEngine.GUIStyleState;
    focused: UnityEngine.GUIStyleState;
    onFocused: UnityEngine.GUIStyleState;
    border: UnityEngine.RectOffset;
    margin: UnityEngine.RectOffset;
    padding: UnityEngine.RectOffset;
    overflow: UnityEngine.RectOffset;
    lineHeight: number;
    static none: UnityEngine.GUIStyle;
    isHeightDependantOnWidth: boolean;
    Draw: ((position: UnityEngine.Rect, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean) => void) | ((position: UnityEngine.Rect, text: string, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean) => void) | ((position: UnityEngine.Rect, image: UnityEngine.Texture, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, on: boolean) => void) | ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, on: boolean, hover: boolean) => void);
    DrawCursor: ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, character: number) => void);
    DrawWithTextSelection: ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, firstSelectedCharacter: number, lastSelectedCharacter: number) => void);
    GetCursorPixelPosition: ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, cursorStringIndex: number) => UnityEngine.Vector2);
    GetCursorStringIndex: ((position: UnityEngine.Rect, content: UnityEngine.GUIContent, cursorPixelPosition: UnityEngine.Vector2) => number);
    CalcSize: ((content: UnityEngine.GUIContent) => UnityEngine.Vector2);
    CalcScreenSize: ((contentSize: UnityEngine.Vector2) => UnityEngine.Vector2);
    CalcHeight: ((content: UnityEngine.GUIContent, width: number) => number);
    ToString: (() => string);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
  }
  export enum ImagePosition {
    ImageLeft = 0,
    ImageAbove = 1,
    ImageOnly = 2,
    TextOnly = 3,
  }
  export enum TextClipping {
    Overflow = 0,
    Clip = 1,
  }
  export declare class GUITexture {
    constructor();
    color: UnityEngine.Color;
    texture: UnityEngine.Texture;
    pixelInset: UnityEngine.Rect;
    border: UnityEngine.RectOffset;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class GUIUtility {
    constructor();
    static hasModalWindow: boolean;
    static systemCopyBuffer: string;
    static hotControl: number;
    static keyboardControl: number;
    static GetControlID: ((hint: number, focusType: UnityEngine.FocusType, rect: UnityEngine.Rect) => number) | ((focus: UnityEngine.FocusType) => number) | ((contents: UnityEngine.GUIContent, focus: UnityEngine.FocusType) => number) | ((focus: UnityEngine.FocusType, position: UnityEngine.Rect) => number) | ((contents: UnityEngine.GUIContent, focus: UnityEngine.FocusType, position: UnityEngine.Rect) => number) | ((hint: number, focus: UnityEngine.FocusType) => number);
    static GetStateObject: ((t: System.Type, controlID: number) => System.Object);
    static QueryStateObject: ((t: System.Type, controlID: number) => System.Object);
    static ExitGUI: (() => void);
    static GUIToScreenPoint: ((guiPoint: UnityEngine.Vector2) => UnityEngine.Vector2);
    static GUIToScreenRect: ((guiRect: UnityEngine.Rect) => UnityEngine.Rect);
    static ScreenToGUIPoint: ((screenPoint: UnityEngine.Vector2) => UnityEngine.Vector2);
    static ScreenToGUIRect: ((screenRect: UnityEngine.Rect) => UnityEngine.Rect);
    static RotateAroundPivot: ((angle: number, pivotPoint: UnityEngine.Vector2) => void);
    static ScaleAroundPivot: ((scale: UnityEngine.Vector2, pivotPoint: UnityEngine.Vector2) => void);
    static AlignRectToDevice: ((rect: UnityEngine.Rect) => UnityEngine.Rect);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class ExitGUIException {
    constructor();
    Message: string;
    Data: System.Collections.IDictionary;
    InnerException: System.Exception;
    TargetSite: System.Reflection.MethodBase;
    StackTrace: string;
    HelpLink: string;
    Source: string;
    HResult: number;
    GetBaseException: (() => System.Exception);
    ToString: (() => string);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    GetType: (() => System.Type) | (() => System.Type);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
  }
  export declare class TextEditor {
    constructor();
    content: UnityEngine.GUIContent;
    text: string;
    position: UnityEngine.Rect;
    cursorIndex: number;
    selectIndex: number;
    doubleClickSnapping: UnityEngine.TextEditor_DblClickSnapping;
    altCursorPosition: number;
    hasSelection: boolean;
    SelectedText: string;
    keyboardOnScreen: UnityEngine.TouchScreenKeyboard;
    controlID: number;
    style: UnityEngine.GUIStyle;
    multiline: boolean;
    hasHorizontalCursorPos: boolean;
    isPasswordField: boolean;
    scrollOffset: UnityEngine.Vector2;
    graphicalCursorPos: UnityEngine.Vector2;
    graphicalSelectCursorPos: UnityEngine.Vector2;
    OnFocus: (() => void);
    OnLostFocus: (() => void);
    HandleKeyEvent: ((e: UnityEngine.Event) => boolean);
    DeleteLineBack: (() => boolean);
    DeleteWordBack: (() => boolean);
    DeleteWordForward: (() => boolean);
    Delete: (() => boolean);
    CanPaste: (() => boolean);
    Backspace: (() => boolean);
    SelectAll: (() => void);
    SelectNone: (() => void);
    DeleteSelection: (() => boolean);
    ReplaceSelection: ((replace: string) => void);
    Insert: ((c: System.Char) => void);
    MoveSelectionToAltCursor: (() => void);
    MoveRight: (() => void);
    MoveLeft: (() => void);
    MoveUp: (() => void);
    MoveDown: (() => void);
    MoveLineStart: (() => void);
    MoveLineEnd: (() => void);
    MoveGraphicalLineStart: (() => void);
    MoveGraphicalLineEnd: (() => void);
    MoveTextStart: (() => void);
    MoveTextEnd: (() => void);
    MoveParagraphForward: (() => void);
    MoveParagraphBackward: (() => void);
    MoveCursorToPosition: ((cursorPosition: UnityEngine.Vector2) => void);
    MoveAltCursorToPosition: ((cursorPosition: UnityEngine.Vector2) => void);
    IsOverSelection: ((cursorPosition: UnityEngine.Vector2) => boolean);
    SelectToPosition: ((cursorPosition: UnityEngine.Vector2) => void);
    SelectLeft: (() => void);
    SelectRight: (() => void);
    SelectUp: (() => void);
    SelectDown: (() => void);
    SelectTextEnd: (() => void);
    SelectTextStart: (() => void);
    MouseDragSelectsWholeWords: ((on: boolean) => void);
    DblClickSnap: ((snapping: UnityEngine.TextEditor_DblClickSnapping) => void);
    MoveWordRight: (() => void);
    MoveToStartOfNextWord: (() => void);
    MoveToEndOfPreviousWord: (() => void);
    SelectToStartOfNextWord: (() => void);
    SelectToEndOfPreviousWord: (() => void);
    FindStartOfNextWord: ((p: number) => number);
    MoveWordLeft: (() => void);
    SelectWordRight: (() => void);
    SelectWordLeft: (() => void);
    ExpandSelectGraphicalLineStart: (() => void);
    ExpandSelectGraphicalLineEnd: (() => void);
    SelectGraphicalLineStart: (() => void);
    SelectGraphicalLineEnd: (() => void);
    SelectParagraphForward: (() => void);
    SelectParagraphBackward: (() => void);
    SelectCurrentWord: (() => void);
    SelectCurrentParagraph: (() => void);
    UpdateScrollOffsetIfNeeded: ((evt: UnityEngine.Event) => void);
    DrawCursor: ((newText: string) => void);
    SaveBackup: (() => void);
    Undo: (() => void);
    Cut: (() => boolean);
    Copy: (() => void);
    Paste: (() => boolean);
    DetectFocusChange: (() => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum TextEditor_DblClickSnapping {
    WORDS = 0,
    PARAGRAPHS = 1,
  }
  export enum AssetBundleLoadResult {
    Success = 0,
    Cancelled = 1,
    NotMatchingCrc = 2,
    FailedCache = 3,
    NotValidAssetBundle = 4,
    NoSerializedData = 5,
    NotCompatible = 6,
    AlreadyLoaded = 7,
    FailedRead = 8,
    FailedDecompression = 9,
    FailedWrite = 10,
    FailedDeleteRecompressionTarget = 11,
    RecompressionTargetIsLoaded = 12,
    RecompressionTargetExistsButNotArchive = 13,
  }
  export declare class AssetBundle {
    mainAsset: UnityEngine.Object;
    isStreamedSceneAssetBundle: boolean;
    name: string;
    hideFlags: UnityEngine.HideFlags;
    static UnloadAllAssetBundles: ((unloadAllObjects: boolean) => void);
    static GetAllLoadedAssetBundles: (() => any);
    static LoadFromFileAsync: ((path: string) => UnityEngine.AssetBundleCreateRequest) | ((path: string, crc: System.UInt32) => UnityEngine.AssetBundleCreateRequest) | ((path: string, crc: System.UInt32, offset: System.UInt64) => UnityEngine.AssetBundleCreateRequest);
    static LoadFromFile: ((path: string) => UnityEngine.AssetBundle) | ((path: string, crc: System.UInt32) => UnityEngine.AssetBundle) | ((path: string, crc: System.UInt32, offset: System.UInt64) => UnityEngine.AssetBundle);
    static LoadFromMemoryAsync: ((binary: System.Byte[]) => UnityEngine.AssetBundleCreateRequest) | ((binary: System.Byte[], crc: System.UInt32) => UnityEngine.AssetBundleCreateRequest);
    static LoadFromMemory: ((binary: System.Byte[]) => UnityEngine.AssetBundle) | ((binary: System.Byte[], crc: System.UInt32) => UnityEngine.AssetBundle);
    static LoadFromStreamAsync: ((stream: System.IO.Stream, crc: System.UInt32, managedReadBufferSize: System.UInt32) => UnityEngine.AssetBundleCreateRequest) | ((stream: System.IO.Stream, crc: System.UInt32) => UnityEngine.AssetBundleCreateRequest) | ((stream: System.IO.Stream) => UnityEngine.AssetBundleCreateRequest);
    static LoadFromStream: ((stream: System.IO.Stream, crc: System.UInt32, managedReadBufferSize: System.UInt32) => UnityEngine.AssetBundle) | ((stream: System.IO.Stream, crc: System.UInt32) => UnityEngine.AssetBundle) | ((stream: System.IO.Stream) => UnityEngine.AssetBundle);
    Contains: ((name: string) => boolean);
    Load: ((name: string) => UnityEngine.Object);
    LoadAll: (() => UnityEngine.Object[]);
    LoadAsset: ((name: string) => UnityEngine.Object) | ((name: string, type: System.Type) => UnityEngine.Object);
    LoadAssetAsync: ((name: string) => UnityEngine.AssetBundleRequest) | ((name: string, type: System.Type) => UnityEngine.AssetBundleRequest);
    LoadAssetWithSubAssets: ((name: string) => UnityEngine.Object[]) | ((name: string, type: System.Type) => UnityEngine.Object[]);
    LoadAssetWithSubAssetsAsync: ((name: string) => UnityEngine.AssetBundleRequest) | ((name: string, type: System.Type) => UnityEngine.AssetBundleRequest);
    LoadAllAssets: (() => UnityEngine.Object[]) | ((type: System.Type) => UnityEngine.Object[]);
    LoadAllAssetsAsync: (() => UnityEngine.AssetBundleRequest) | ((type: System.Type) => UnityEngine.AssetBundleRequest);
    AllAssetNames: (() => string[]);
    Unload: ((unloadAllLoadedObjects: boolean) => void);
    GetAllAssetNames: (() => string[]);
    GetAllScenePaths: (() => string[]);
    static RecompressAssetBundleAsync: ((inputPath: string, outputPath: string, method: UnityEngine.BuildCompression, expectedCRC?: System.UInt32, priority?: UnityEngine.ThreadPriority) => UnityEngine.AssetBundleRecompressOperation);
    static CreateFromFile: ((path: string) => UnityEngine.AssetBundle);
    static CreateFromMemory: ((binary: System.Byte[]) => UnityEngine.AssetBundleCreateRequest);
    static CreateFromMemoryImmediate: ((binary: System.Byte[]) => UnityEngine.AssetBundle);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AssetBundleCreateRequest {
    constructor();
    assetBundle: UnityEngine.AssetBundle;
    isDone: boolean;
    progress: number;
    priority: number;
    allowSceneActivation: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AssetBundleManifest {
    name: string;
    hideFlags: UnityEngine.HideFlags;
    GetAllAssetBundles: (() => string[]);
    GetAllAssetBundlesWithVariant: (() => string[]);
    GetAssetBundleHash: ((assetBundleName: string) => UnityEngine.Hash128);
    GetDirectDependencies: ((assetBundleName: string) => string[]);
    GetAllDependencies: ((assetBundleName: string) => string[]);
    GetInstanceID: (() => number);
    GetHashCode: (() => number);
    Equals: ((other: System.Object) => boolean);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class AssetBundleRecompressOperation {
    constructor();
    humanReadableResult: string;
    inputPath: string;
    outputPath: string;
    result: UnityEngine.AssetBundleLoadResult;
    success: boolean;
    isDone: boolean;
    progress: number;
    priority: number;
    allowSceneActivation: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class AssetBundleRequest {
    constructor();
    asset: UnityEngine.Object;
    allAssets: UnityEngine.Object[];
    isDone: boolean;
    progress: number;
    priority: number;
    allowSceneActivation: boolean;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export enum CompressionType {
    None = 0,
    Lzma = 1,
    Lz4 = 2,
    Lz4HC = 3,
  }
  export enum CompressionLevel {
    None = 0,
    Fastest = 1,
    Fast = 2,
    Normal = 3,
    High = 4,
    Maximum = 5,
  }
  export declare class BuildCompression {
    compression: UnityEngine.CompressionType;
    level: UnityEngine.CompressionLevel;
    blockSize: System.UInt32;
    static Uncompressed: UnityEngine.BuildCompression;
    static LZ4: UnityEngine.BuildCompression;
    static LZMA: UnityEngine.BuildCompression;
    static UncompressedRuntime: UnityEngine.BuildCompression;
    static LZ4Runtime: UnityEngine.BuildCompression;
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    ToString: (() => string);
    GetType: (() => System.Type);
  }
  export declare class RemoteSettings {
    static CallOnUpdate: (() => void);
    static ForceUpdate: (() => void);
    static WasLastUpdatedFromServer: (() => boolean);
    static GetInt: ((key: string) => number) | ((key: string, defaultValue: number) => number);
    static GetLong: ((key: string) => System.Int64) | ((key: string, defaultValue: System.Int64) => System.Int64);
    static GetFloat: ((key: string) => number) | ((key: string, defaultValue: number) => number);
    static GetString: ((key: string) => string) | ((key: string, defaultValue: string) => string);
    static GetBool: ((key: string) => boolean) | ((key: string, defaultValue: boolean) => boolean);
    static HasKey: ((key: string) => boolean);
    static GetCount: (() => number);
    static GetKeys: (() => string[]);
    static GetObject: ((type: System.Type, key?: string) => System.Object) | ((key: string, defaultValue: System.Object) => System.Object);
    static GetDictionary: ((key?: string) => any);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class RemoteSettings_UpdatedEventHandler {
    constructor(object: System.Object, method: System.IntPtr);
    Method: System.Reflection.MethodInfo;
    Target: System.Object;
    Invoke: (() => void);
    BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
    EndInvoke: ((result: System.IAsyncResult) => void);
    GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetInvocationList: (() => System.Delegate[]);
    DynamicInvoke: ((...args: System.Object[]) => System.Object);
    Clone: (() => System.Object);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export declare class RemoteConfigSettings {
    constructor(configKey: string);
    Dispose: (() => void);
    static QueueConfig: ((name: string, param: System.Object, ver?: number, prefix?: string) => boolean);
    static SendDeviceInfoInConfigRequest: (() => boolean);
    static AddSessionTag: ((tag: string) => void);
    ForceUpdate: (() => void);
    WasLastUpdatedFromServer: (() => boolean);
    GetInt: ((key: string) => number) | ((key: string, defaultValue: number) => number);
    GetLong: ((key: string) => System.Int64) | ((key: string, defaultValue: System.Int64) => System.Int64);
    GetFloat: ((key: string) => number) | ((key: string, defaultValue: number) => number);
    GetString: ((key: string) => string) | ((key: string, defaultValue: string) => string);
    GetBool: ((key: string) => boolean) | ((key: string, defaultValue: boolean) => boolean);
    HasKey: ((key: string) => boolean);
    GetCount: (() => number);
    GetKeys: (() => string[]);
    GetObject: ((type: System.Type, key?: string) => System.Object) | ((key: string, defaultValue: System.Object) => System.Object);
    GetDictionary: ((key?: string) => System.Collections.Generic.IDictionary<string, System.Object>);
    Equals: ((obj: System.Object) => boolean);
    GetHashCode: (() => number);
    GetType: (() => System.Type);
    ToString: (() => string);
  }
  export namespace AI {
    export enum NavMeshPathStatus {
      PathComplete = 0,
      PathPartial = 1,
      PathInvalid = 2,
    }
    export declare class NavMeshPath {
      constructor();
      corners: UnityEngine.Vector3[];
      status: UnityEngine.AI.NavMeshPathStatus;
      GetCornersNonAlloc: ((results: UnityEngine.Vector3[]) => number);
      ClearCorners: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class NavMeshBuilder {
      static CollectSources: ((includedWorldBounds: UnityEngine.Bounds, includedLayerMask: number, geometry: UnityEngine.AI.NavMeshCollectGeometry, defaultArea: number, markups: UnityEngine.AI.NavMeshBuildMarkup[], results: UnityEngine.AI.NavMeshBuildSource[]) => void) | ((root: UnityEngine.Transform, includedLayerMask: number, geometry: UnityEngine.AI.NavMeshCollectGeometry, defaultArea: number, markups: UnityEngine.AI.NavMeshBuildMarkup[], results: UnityEngine.AI.NavMeshBuildSource[]) => void);
      static BuildNavMeshData: ((buildSettings: UnityEngine.AI.NavMeshBuildSettings, sources: UnityEngine.AI.NavMeshBuildSource[], localBounds: UnityEngine.Bounds, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => UnityEngine.AI.NavMeshData);
      static UpdateNavMeshData: ((data: UnityEngine.AI.NavMeshData, buildSettings: UnityEngine.AI.NavMeshBuildSettings, sources: UnityEngine.AI.NavMeshBuildSource[], localBounds: UnityEngine.Bounds) => boolean);
      static UpdateNavMeshDataAsync: ((data: UnityEngine.AI.NavMeshData, buildSettings: UnityEngine.AI.NavMeshBuildSettings, sources: UnityEngine.AI.NavMeshBuildSource[], localBounds: UnityEngine.Bounds) => UnityEngine.AsyncOperation);
      static Cancel: ((data: UnityEngine.AI.NavMeshData) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum ObstacleAvoidanceType {
      NoObstacleAvoidance = 0,
      LowQualityObstacleAvoidance = 1,
      MedQualityObstacleAvoidance = 2,
      GoodQualityObstacleAvoidance = 3,
      HighQualityObstacleAvoidance = 4,
    }
    export declare class NavMeshAgent {
      constructor();
      destination: UnityEngine.Vector3;
      stoppingDistance: number;
      velocity: UnityEngine.Vector3;
      nextPosition: UnityEngine.Vector3;
      steeringTarget: UnityEngine.Vector3;
      desiredVelocity: UnityEngine.Vector3;
      remainingDistance: number;
      baseOffset: number;
      isOnOffMeshLink: boolean;
      currentOffMeshLinkData: UnityEngine.AI.OffMeshLinkData;
      nextOffMeshLinkData: UnityEngine.AI.OffMeshLinkData;
      autoTraverseOffMeshLink: boolean;
      autoBraking: boolean;
      autoRepath: boolean;
      hasPath: boolean;
      pathPending: boolean;
      isPathStale: boolean;
      pathStatus: UnityEngine.AI.NavMeshPathStatus;
      pathEndPosition: UnityEngine.Vector3;
      isStopped: boolean;
      path: UnityEngine.AI.NavMeshPath;
      navMeshOwner: UnityEngine.Object;
      agentTypeID: number;
      walkableMask: number;
      areaMask: number;
      speed: number;
      angularSpeed: number;
      acceleration: number;
      updatePosition: boolean;
      updateRotation: boolean;
      updateUpAxis: boolean;
      radius: number;
      height: number;
      obstacleAvoidanceType: UnityEngine.AI.ObstacleAvoidanceType;
      avoidancePriority: number;
      isOnNavMesh: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetDestination: ((target: UnityEngine.Vector3) => boolean);
      ActivateCurrentOffMeshLink: ((activated: boolean) => void);
      CompleteOffMeshLink: (() => void);
      Warp: ((newPosition: UnityEngine.Vector3) => boolean);
      Move: ((offset: UnityEngine.Vector3) => void);
      Stop: (() => void) | ((stopUpdates: boolean) => void);
      Resume: (() => void);
      ResetPath: (() => void);
      SetPath: ((path: UnityEngine.AI.NavMeshPath) => boolean);
      CalculatePath: ((targetPosition: UnityEngine.Vector3, path: UnityEngine.AI.NavMeshPath) => boolean);
      SetLayerCost: ((layer: number, cost: number) => void);
      GetLayerCost: ((layer: number) => number);
      SetAreaCost: ((areaIndex: number, areaCost: number) => void);
      GetAreaCost: ((areaIndex: number) => number);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum NavMeshObstacleShape {
      Capsule = 0,
      Box = 1,
    }
    export declare class NavMeshObstacle {
      constructor();
      height: number;
      radius: number;
      velocity: UnityEngine.Vector3;
      carving: boolean;
      carveOnlyStationary: boolean;
      carvingMoveThreshold: number;
      carvingTimeToStationary: number;
      shape: UnityEngine.AI.NavMeshObstacleShape;
      center: UnityEngine.Vector3;
      size: UnityEngine.Vector3;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum OffMeshLinkType {
      LinkTypeManual = 0,
      LinkTypeDropDown = 1,
      LinkTypeJumpAcross = 2,
    }
    export declare class OffMeshLinkData {
      valid: boolean;
      activated: boolean;
      linkType: UnityEngine.AI.OffMeshLinkType;
      startPos: UnityEngine.Vector3;
      endPos: UnityEngine.Vector3;
      offMeshLink: UnityEngine.AI.OffMeshLink;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class OffMeshLink {
      constructor();
      activated: boolean;
      occupied: boolean;
      costOverride: number;
      biDirectional: boolean;
      navMeshLayer: number;
      area: number;
      autoUpdatePositions: boolean;
      startTransform: UnityEngine.Transform;
      endTransform: UnityEngine.Transform;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      UpdatePositions: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshHit {
      position: UnityEngine.Vector3;
      normal: UnityEngine.Vector3;
      distance: number;
      mask: number;
      hit: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshTriangulation {
      layers: number[];
      vertices: UnityEngine.Vector3[];
      indices: number[];
      areas: number[];
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshData {
      constructor();
      constructor(agentTypeID: number);
      sourceBounds: UnityEngine.Bounds;
      position: UnityEngine.Vector3;
      rotation: UnityEngine.Quaternion;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshDataInstance {
      valid: boolean;
      owner: UnityEngine.Object;
      Remove: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshLinkData {
      startPosition: UnityEngine.Vector3;
      endPosition: UnityEngine.Vector3;
      costModifier: number;
      bidirectional: boolean;
      width: number;
      area: number;
      agentTypeID: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshLinkInstance {
      valid: boolean;
      owner: UnityEngine.Object;
      Remove: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshQueryFilter {
      areaMask: number;
      agentTypeID: number;
      GetAreaCost: ((areaIndex: number) => number);
      SetAreaCost: ((areaIndex: number, cost: number) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMesh {
      static avoidancePredictionTime: number;
      static pathfindingIterationsPerFrame: number;
      static AllAreas: number;
      static onPreUpdate: UnityEngine.AI.NavMesh_OnNavMeshPreUpdate;
      static CalculatePath: ((sourcePosition: UnityEngine.Vector3, targetPosition: UnityEngine.Vector3, areaMask: number, path: UnityEngine.AI.NavMeshPath) => boolean) | ((sourcePosition: UnityEngine.Vector3, targetPosition: UnityEngine.Vector3, filter: UnityEngine.AI.NavMeshQueryFilter, path: UnityEngine.AI.NavMeshPath) => boolean);
      static SetLayerCost: ((layer: number, cost: number) => void);
      static GetLayerCost: ((layer: number) => number);
      static GetNavMeshLayerFromName: ((layerName: string) => number);
      static SetAreaCost: ((areaIndex: number, cost: number) => void);
      static GetAreaCost: ((areaIndex: number) => number);
      static GetAreaFromName: ((areaName: string) => number);
      static CalculateTriangulation: (() => UnityEngine.AI.NavMeshTriangulation);
      static AddOffMeshLinks: (() => void);
      static RestoreNavMesh: (() => void);
      static AddNavMeshData: ((navMeshData: UnityEngine.AI.NavMeshData) => UnityEngine.AI.NavMeshDataInstance) | ((navMeshData: UnityEngine.AI.NavMeshData, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => UnityEngine.AI.NavMeshDataInstance);
      static RemoveNavMeshData: ((handle: UnityEngine.AI.NavMeshDataInstance) => void);
      static AddLink: ((link: UnityEngine.AI.NavMeshLinkData) => UnityEngine.AI.NavMeshLinkInstance) | ((link: UnityEngine.AI.NavMeshLinkData, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion) => UnityEngine.AI.NavMeshLinkInstance);
      static RemoveLink: ((handle: UnityEngine.AI.NavMeshLinkInstance) => void);
      static CreateSettings: (() => UnityEngine.AI.NavMeshBuildSettings);
      static RemoveSettings: ((agentTypeID: number) => void);
      static GetSettingsByID: ((agentTypeID: number) => UnityEngine.AI.NavMeshBuildSettings);
      static GetSettingsCount: (() => number);
      static GetSettingsByIndex: ((index: number) => UnityEngine.AI.NavMeshBuildSettings);
      static GetSettingsNameFromID: ((agentTypeID: number) => string);
      static RemoveAllNavMeshData: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class NavMesh_OnNavMeshPreUpdate {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum NavMeshBuildDebugFlags {
      None = 0,
      InputGeometry = 1,
      Voxels = 2,
      Regions = 4,
      RawContours = 8,
      SimplifiedContours = 16,
      PolygonMeshes = 32,
      PolygonMeshesDetail = 64,
      All = 127,
    }
    export enum NavMeshBuildSourceShape {
      Mesh = 0,
      Terrain = 1,
      Box = 2,
      Sphere = 3,
      Capsule = 4,
      ModifierBox = 5,
    }
    export enum NavMeshCollectGeometry {
      RenderMeshes = 0,
      PhysicsColliders = 1,
    }
    export declare class NavMeshBuildSource {
      transform: UnityEngine.Matrix4x4;
      size: UnityEngine.Vector3;
      shape: UnityEngine.AI.NavMeshBuildSourceShape;
      area: number;
      sourceObject: UnityEngine.Object;
      component: UnityEngine.Component;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshBuildMarkup {
      overrideArea: boolean;
      area: number;
      ignoreFromBuild: boolean;
      root: UnityEngine.Transform;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshBuildSettings {
      agentTypeID: number;
      agentRadius: number;
      agentHeight: number;
      agentSlope: number;
      agentClimb: number;
      minRegionArea: number;
      overrideVoxelSize: boolean;
      voxelSize: number;
      overrideTileSize: boolean;
      tileSize: number;
      maxJobWorkers: System.UInt32;
      preserveTilesOutsideBounds: boolean;
      debug: UnityEngine.AI.NavMeshBuildDebugSettings;
      ValidationReport: ((buildBounds: UnityEngine.Bounds) => string[]);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class NavMeshBuildDebugSettings {
      flags: UnityEngine.AI.NavMeshBuildDebugFlags;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace Analytics {
    export declare class ContinuousEvent {
      constructor();
      static ConfigureCustomEvent: ((customEventName: string, metricName: string, interval: number, period: number, enabled?: boolean) => UnityEngine.Analytics.AnalyticsResult);
      static ConfigureEvent: ((eventName: string, metricName: string, interval: number, period: number, enabled?: boolean, ver?: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum AnalyticsSessionState {
      kSessionStopped = 0,
      kSessionStarted = 1,
      kSessionPaused = 2,
      kSessionResumed = 3,
    }
    export declare class AnalyticsSessionInfo {
      static sessionState: UnityEngine.Analytics.AnalyticsSessionState;
      static sessionId: System.Int64;
      static sessionCount: System.Int64;
      static sessionElapsedTime: System.Int64;
      static sessionFirstRun: boolean;
      static userId: string;
      static customUserId: string;
      static customDeviceId: string;
      static identityToken: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AnalyticsSessionInfo_SessionStateChanged {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((sessionState: UnityEngine.Analytics.AnalyticsSessionState, sessionId: System.Int64, sessionElapsedTime: System.Int64, sessionChanged: boolean) => void);
      BeginInvoke: ((sessionState: UnityEngine.Analytics.AnalyticsSessionState, sessionId: System.Int64, sessionElapsedTime: System.Int64, sessionChanged: boolean, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AnalyticsSessionInfo_IdentityTokenChanged {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((token: string) => void);
      BeginInvoke: ((token: string, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Analytics {
      static initializeOnStartup: boolean;
      static playerOptedOut: boolean;
      static eventUrl: string;
      static configUrl: string;
      static limitUserTracking: boolean;
      static deviceStatsEnabled: boolean;
      static enabled: boolean;
      static ResumeInitialization: (() => UnityEngine.Analytics.AnalyticsResult);
      static FlushEvents: (() => UnityEngine.Analytics.AnalyticsResult);
      static SetUserId: ((userId: string) => UnityEngine.Analytics.AnalyticsResult);
      static SetUserGender: ((gender: UnityEngine.Analytics.Gender) => UnityEngine.Analytics.AnalyticsResult);
      static SetUserBirthYear: ((birthYear: number) => UnityEngine.Analytics.AnalyticsResult);
      static Transaction: ((productId: string, amount: System.Decimal, currency: string) => UnityEngine.Analytics.AnalyticsResult) | ((productId: string, amount: System.Decimal, currency: string, receiptPurchaseData: string, signature: string) => UnityEngine.Analytics.AnalyticsResult) | ((productId: string, amount: System.Decimal, currency: string, receiptPurchaseData: string, signature: string, usingIAPService: boolean) => UnityEngine.Analytics.AnalyticsResult);
      static CustomEvent: ((customEventName: string) => UnityEngine.Analytics.AnalyticsResult) | ((customEventName: string, position: UnityEngine.Vector3) => UnityEngine.Analytics.AnalyticsResult) | ((customEventName: string, eventData: any) => UnityEngine.Analytics.AnalyticsResult);
      static EnableCustomEvent: ((customEventName: string, enabled: boolean) => UnityEngine.Analytics.AnalyticsResult);
      static IsCustomEventEnabled: ((customEventName: string) => UnityEngine.Analytics.AnalyticsResult);
      static RegisterEvent: ((eventName: string, maxEventPerHour: number, maxItems: number, vendorKey?: string, prefix?: string) => UnityEngine.Analytics.AnalyticsResult) | ((eventName: string, maxEventPerHour: number, maxItems: number, vendorKey: string, ver: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      static SendEvent: ((eventName: string, parameters: System.Object, ver?: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      static SetEventEndPoint: ((eventName: string, endPoint: string, ver?: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      static SetEventPriority: ((eventName: string, eventPriority: UnityEngine.Analytics.AnalyticsEventPriority, ver?: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      static EnableEvent: ((eventName: string, enabled: boolean, ver?: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      static IsEventEnabled: ((eventName: string, ver?: number, prefix?: string) => UnityEngine.Analytics.AnalyticsResult);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum Gender {
      Male = 0,
      Female = 1,
      Unknown = 2,
    }
    export enum AnalyticsResult {
      Ok = 0,
      NotInitialized = 1,
      AnalyticsDisabled = 2,
      TooManyItems = 3,
      SizeLimitReached = 4,
      TooManyRequests = 5,
      InvalidData = 6,
      UnsupportedPlatform = 7,
    }
    export enum AnalyticsEventPriority {
      FlushQueueFlag = 1,
      CacheImmediatelyFlag = 2,
      AllowInStopModeFlag = 4,
      SendImmediateFlag = 8,
      NoCachingFlag = 16,
      NoRetryFlag = 32,
      NormalPriorityEvent = 0,
      NormalPriorityEvent_WithCaching = 2,
      NormalPriorityEvent_NoRetryNoCaching = 48,
      HighPriorityEvent = 1,
      HighPriorityEvent_InStopMode = 5,
      HighestPriorityEvent = 9,
      HighestPriorityEvent_NoRetryNoCaching = 49,
    }
  }
  export namespace Animations {
    export declare class AnimationPlayableBinding {
      static Create: ((name: string, key: UnityEngine.Object) => UnityEngine.Playables.PlayableBinding);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IAnimationJob {
      ProcessAnimation: ((stream: UnityEngine.Animations.AnimationStream) => void);
      ProcessRootMotion: ((stream: UnityEngine.Animations.AnimationStream) => void);
    }
    export interface IAnimationJobPlayable {
    }
    export interface IAnimationWindowPreview {
      StartPreview: (() => void);
      StopPreview: (() => void);
      UpdatePreviewGraph: ((graph: UnityEngine.Playables.PlayableGraph) => void);
      BuildPreviewGraph: ((graph: UnityEngine.Playables.PlayableGraph, inputPlayable: UnityEngine.Playables.Playable) => UnityEngine.Playables.Playable);
    }
    export declare class AimConstraint {
      weight: number;
      constraintActive: boolean;
      locked: boolean;
      rotationAtRest: UnityEngine.Vector3;
      rotationOffset: UnityEngine.Vector3;
      rotationAxis: UnityEngine.Animations.Axis;
      aimVector: UnityEngine.Vector3;
      upVector: UnityEngine.Vector3;
      worldUpVector: UnityEngine.Vector3;
      worldUpObject: UnityEngine.Transform;
      worldUpType: UnityEngine.Animations.AimConstraint_WorldUpType;
      sourceCount: number;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum AimConstraint_WorldUpType {
      SceneUp = 0,
      ObjectUp = 1,
      ObjectRotationUp = 2,
      Vector = 3,
      None = 4,
    }
    export declare class AnimationClipPlayable {
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, clip: UnityEngine.AnimationClip) => UnityEngine.Animations.AnimationClipPlayable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      Equals: ((other: UnityEngine.Animations.AnimationClipPlayable) => boolean) | ((obj: System.Object) => boolean);
      GetAnimationClip: (() => UnityEngine.AnimationClip);
      GetApplyFootIK: (() => boolean);
      SetApplyFootIK: ((value: boolean) => void);
      GetApplyPlayableIK: (() => boolean);
      SetApplyPlayableIK: ((value: boolean) => void);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationHumanStream {
      isValid: boolean;
      humanScale: number;
      leftFootHeight: number;
      rightFootHeight: number;
      bodyLocalPosition: UnityEngine.Vector3;
      bodyLocalRotation: UnityEngine.Quaternion;
      bodyPosition: UnityEngine.Vector3;
      bodyRotation: UnityEngine.Quaternion;
      leftFootVelocity: UnityEngine.Vector3;
      rightFootVelocity: UnityEngine.Vector3;
      GetMuscle: ((muscle: UnityEngine.Animations.MuscleHandle) => number);
      SetMuscle: ((muscle: UnityEngine.Animations.MuscleHandle, value: number) => void);
      ResetToStancePose: (() => void);
      GetGoalPositionFromPose: ((index: UnityEngine.AvatarIKGoal) => UnityEngine.Vector3);
      GetGoalRotationFromPose: ((index: UnityEngine.AvatarIKGoal) => UnityEngine.Quaternion);
      GetGoalLocalPosition: ((index: UnityEngine.AvatarIKGoal) => UnityEngine.Vector3);
      SetGoalLocalPosition: ((index: UnityEngine.AvatarIKGoal, pos: UnityEngine.Vector3) => void);
      GetGoalLocalRotation: ((index: UnityEngine.AvatarIKGoal) => UnityEngine.Quaternion);
      SetGoalLocalRotation: ((index: UnityEngine.AvatarIKGoal, rot: UnityEngine.Quaternion) => void);
      GetGoalPosition: ((index: UnityEngine.AvatarIKGoal) => UnityEngine.Vector3);
      SetGoalPosition: ((index: UnityEngine.AvatarIKGoal, pos: UnityEngine.Vector3) => void);
      GetGoalRotation: ((index: UnityEngine.AvatarIKGoal) => UnityEngine.Quaternion);
      SetGoalRotation: ((index: UnityEngine.AvatarIKGoal, rot: UnityEngine.Quaternion) => void);
      SetGoalWeightPosition: ((index: UnityEngine.AvatarIKGoal, value: number) => void);
      SetGoalWeightRotation: ((index: UnityEngine.AvatarIKGoal, value: number) => void);
      GetGoalWeightPosition: ((index: UnityEngine.AvatarIKGoal) => number);
      GetGoalWeightRotation: ((index: UnityEngine.AvatarIKGoal) => number);
      GetHintPosition: ((index: UnityEngine.AvatarIKHint) => UnityEngine.Vector3);
      SetHintPosition: ((index: UnityEngine.AvatarIKHint, pos: UnityEngine.Vector3) => void);
      SetHintWeightPosition: ((index: UnityEngine.AvatarIKHint, value: number) => void);
      GetHintWeightPosition: ((index: UnityEngine.AvatarIKHint) => number);
      SetLookAtPosition: ((lookAtPosition: UnityEngine.Vector3) => void);
      SetLookAtClampWeight: ((weight: number) => void);
      SetLookAtBodyWeight: ((weight: number) => void);
      SetLookAtHeadWeight: ((weight: number) => void);
      SetLookAtEyesWeight: ((weight: number) => void);
      SolveIK: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationLayerMixerPlayable {
      static Null: UnityEngine.Animations.AnimationLayerMixerPlayable;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, inputCount?: number) => UnityEngine.Animations.AnimationLayerMixerPlayable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      Equals: ((other: UnityEngine.Animations.AnimationLayerMixerPlayable) => boolean) | ((obj: System.Object) => boolean);
      IsLayerAdditive: ((layerIndex: System.UInt32) => boolean);
      SetLayerAdditive: ((layerIndex: System.UInt32, value: boolean) => void);
      SetLayerMaskFromAvatarMask: ((layerIndex: System.UInt32, mask: UnityEngine.AvatarMask) => void);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationMixerPlayable {
      static Null: UnityEngine.Animations.AnimationMixerPlayable;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, inputCount?: number, normalizeWeights?: boolean) => UnityEngine.Animations.AnimationMixerPlayable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      Equals: ((other: UnityEngine.Animations.AnimationMixerPlayable) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationPlayableExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AnimationPlayableOutput {
      static Null: UnityEngine.Animations.AnimationPlayableOutput;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, name: string, target: UnityEngine.Animator) => UnityEngine.Animations.AnimationPlayableOutput);
      GetHandle: (() => UnityEngine.Playables.PlayableOutputHandle);
      GetTarget: (() => UnityEngine.Animator);
      SetTarget: ((value: UnityEngine.Animator) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationScriptPlayable {
      static Null: UnityEngine.Animations.AnimationScriptPlayable;
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      Equals: ((other: UnityEngine.Animations.AnimationScriptPlayable) => boolean) | ((obj: System.Object) => boolean);
      SetProcessInputs: ((value: boolean) => void);
      GetProcessInputs: (() => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationStream {
      isValid: boolean;
      deltaTime: number;
      velocity: UnityEngine.Vector3;
      angularVelocity: UnityEngine.Vector3;
      rootMotionPosition: UnityEngine.Vector3;
      rootMotionRotation: UnityEngine.Quaternion;
      isHumanStream: boolean;
      inputStreamCount: number;
      AsHuman: (() => UnityEngine.Animations.AnimationHumanStream);
      GetInputStream: ((index: number) => UnityEngine.Animations.AnimationStream);
      GetInputWeight: ((index: number) => number);
      CopyAnimationStreamMotion: ((animationStream: UnityEngine.Animations.AnimationStream) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class TransformStreamHandle {
      IsValid: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      Resolve: ((stream: UnityEngine.Animations.AnimationStream) => void);
      IsResolved: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      GetPosition: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Vector3);
      SetPosition: ((stream: UnityEngine.Animations.AnimationStream, position: UnityEngine.Vector3) => void);
      GetRotation: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Quaternion);
      SetRotation: ((stream: UnityEngine.Animations.AnimationStream, rotation: UnityEngine.Quaternion) => void);
      GetLocalPosition: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Vector3);
      SetLocalPosition: ((stream: UnityEngine.Animations.AnimationStream, position: UnityEngine.Vector3) => void);
      GetLocalRotation: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Quaternion);
      SetLocalRotation: ((stream: UnityEngine.Animations.AnimationStream, rotation: UnityEngine.Quaternion) => void);
      GetLocalScale: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Vector3);
      SetLocalScale: ((stream: UnityEngine.Animations.AnimationStream, scale: UnityEngine.Vector3) => void);
      GetPositionReadMask: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      GetRotationReadMask: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      GetScaleReadMask: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      SetLocalTRS: ((stream: UnityEngine.Animations.AnimationStream, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3, useMask: boolean) => void);
      SetGlobalTR: ((stream: UnityEngine.Animations.AnimationStream, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, useMask: boolean) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PropertyStreamHandle {
      IsValid: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      Resolve: ((stream: UnityEngine.Animations.AnimationStream) => void);
      IsResolved: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      GetFloat: ((stream: UnityEngine.Animations.AnimationStream) => number);
      SetFloat: ((stream: UnityEngine.Animations.AnimationStream, value: number) => void);
      GetInt: ((stream: UnityEngine.Animations.AnimationStream) => number);
      SetInt: ((stream: UnityEngine.Animations.AnimationStream, value: number) => void);
      GetBool: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      SetBool: ((stream: UnityEngine.Animations.AnimationStream, value: boolean) => void);
      GetReadMask: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class TransformSceneHandle {
      IsValid: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      GetPosition: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Vector3);
      SetPosition: ((stream: UnityEngine.Animations.AnimationStream, position: UnityEngine.Vector3) => void);
      GetLocalPosition: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Vector3);
      SetLocalPosition: ((stream: UnityEngine.Animations.AnimationStream, position: UnityEngine.Vector3) => void);
      GetRotation: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Quaternion);
      SetRotation: ((stream: UnityEngine.Animations.AnimationStream, rotation: UnityEngine.Quaternion) => void);
      GetLocalRotation: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Quaternion);
      SetLocalRotation: ((stream: UnityEngine.Animations.AnimationStream, rotation: UnityEngine.Quaternion) => void);
      GetLocalScale: ((stream: UnityEngine.Animations.AnimationStream) => UnityEngine.Vector3);
      SetLocalScale: ((stream: UnityEngine.Animations.AnimationStream, scale: UnityEngine.Vector3) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PropertySceneHandle {
      IsValid: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      Resolve: ((stream: UnityEngine.Animations.AnimationStream) => void);
      IsResolved: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      GetFloat: ((stream: UnityEngine.Animations.AnimationStream) => number);
      SetFloat: ((stream: UnityEngine.Animations.AnimationStream, value: number) => void);
      GetInt: ((stream: UnityEngine.Animations.AnimationStream) => number);
      SetInt: ((stream: UnityEngine.Animations.AnimationStream, value: number) => void);
      GetBool: ((stream: UnityEngine.Animations.AnimationStream) => boolean);
      SetBool: ((stream: UnityEngine.Animations.AnimationStream, value: boolean) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationSceneHandleUtility {
      static ReadInts: ((stream: UnityEngine.Animations.AnimationStream, handles: any, buffer: any) => void);
      static ReadFloats: ((stream: UnityEngine.Animations.AnimationStream, handles: any, buffer: any) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AnimationStreamHandleUtility {
      static WriteInts: ((stream: UnityEngine.Animations.AnimationStream, handles: any, buffer: any, useMask: boolean) => void);
      static WriteFloats: ((stream: UnityEngine.Animations.AnimationStream, handles: any, buffer: any, useMask: boolean) => void);
      static ReadInts: ((stream: UnityEngine.Animations.AnimationStream, handles: any, buffer: any) => void);
      static ReadFloats: ((stream: UnityEngine.Animations.AnimationStream, handles: any, buffer: any) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AnimatorControllerPlayable {
      static Null: UnityEngine.Animations.AnimatorControllerPlayable;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, controller: UnityEngine.RuntimeAnimatorController) => UnityEngine.Animations.AnimatorControllerPlayable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      SetHandle: ((handle: UnityEngine.Playables.PlayableHandle) => void);
      Equals: ((other: UnityEngine.Animations.AnimatorControllerPlayable) => boolean) | ((obj: System.Object) => boolean);
      GetFloat: ((name: string) => number) | ((id: number) => number);
      SetFloat: ((name: string, value: number) => void) | ((id: number, value: number) => void);
      GetBool: ((name: string) => boolean) | ((id: number) => boolean);
      SetBool: ((name: string, value: boolean) => void) | ((id: number, value: boolean) => void);
      GetInteger: ((name: string) => number) | ((id: number) => number);
      SetInteger: ((name: string, value: number) => void) | ((id: number, value: number) => void);
      SetTrigger: ((name: string) => void) | ((id: number) => void);
      ResetTrigger: ((name: string) => void) | ((id: number) => void);
      IsParameterControlledByCurve: ((name: string) => boolean) | ((id: number) => boolean);
      GetLayerCount: (() => number);
      GetLayerName: ((layerIndex: number) => string);
      GetLayerIndex: ((layerName: string) => number);
      GetLayerWeight: ((layerIndex: number) => number);
      SetLayerWeight: ((layerIndex: number, weight: number) => void);
      GetCurrentAnimatorStateInfo: ((layerIndex: number) => UnityEngine.AnimatorStateInfo);
      GetNextAnimatorStateInfo: ((layerIndex: number) => UnityEngine.AnimatorStateInfo);
      GetAnimatorTransitionInfo: ((layerIndex: number) => UnityEngine.AnimatorTransitionInfo);
      GetCurrentAnimatorClipInfo: ((layerIndex: number) => UnityEngine.AnimatorClipInfo[]) | ((layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]) => void);
      GetNextAnimatorClipInfo: ((layerIndex: number, clips: UnityEngine.AnimatorClipInfo[]) => void) | ((layerIndex: number) => UnityEngine.AnimatorClipInfo[]);
      GetCurrentAnimatorClipInfoCount: ((layerIndex: number) => number);
      GetNextAnimatorClipInfoCount: ((layerIndex: number) => number);
      IsInTransition: ((layerIndex: number) => boolean);
      GetParameterCount: (() => number);
      GetParameter: ((index: number) => UnityEngine.AnimatorControllerParameter);
      CrossFadeInFixedTime: ((stateName: string, transitionDuration: number) => void) | ((stateName: string, transitionDuration: number, layer: number) => void) | ((stateName: string, transitionDuration: number, layer: number, fixedTime: number) => void) | ((stateNameHash: number, transitionDuration: number) => void) | ((stateNameHash: number, transitionDuration: number, layer: number) => void) | ((stateNameHash: number, transitionDuration: number, layer: number, fixedTime: number) => void);
      CrossFade: ((stateName: string, transitionDuration: number) => void) | ((stateName: string, transitionDuration: number, layer: number) => void) | ((stateName: string, transitionDuration: number, layer: number, normalizedTime: number) => void) | ((stateNameHash: number, transitionDuration: number) => void) | ((stateNameHash: number, transitionDuration: number, layer: number) => void) | ((stateNameHash: number, transitionDuration: number, layer: number, normalizedTime: number) => void);
      PlayInFixedTime: ((stateName: string) => void) | ((stateName: string, layer: number) => void) | ((stateName: string, layer: number, fixedTime: number) => void) | ((stateNameHash: number) => void) | ((stateNameHash: number, layer: number) => void) | ((stateNameHash: number, layer: number, fixedTime: number) => void);
      Play: ((stateName: string) => void) | ((stateName: string, layer: number) => void) | ((stateName: string, layer: number, normalizedTime: number) => void) | ((stateNameHash: number) => void) | ((stateNameHash: number, layer: number) => void) | ((stateNameHash: number, layer: number, normalizedTime: number) => void);
      HasState: ((layerIndex: number, stateID: number) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum CustomStreamPropertyType {
      Float = 5,
      Bool = 6,
      Int = 10,
    }
    export declare class AnimatorJobExtensions {
      static AddJobDependency: ((animator: UnityEngine.Animator, jobHandle: Unity.Jobs.JobHandle) => void);
      static BindStreamTransform: ((animator: UnityEngine.Animator, transform: UnityEngine.Transform) => UnityEngine.Animations.TransformStreamHandle);
      static BindStreamProperty: ((animator: UnityEngine.Animator, transform: UnityEngine.Transform, type: System.Type, property: string) => UnityEngine.Animations.PropertyStreamHandle) | ((animator: UnityEngine.Animator, transform: UnityEngine.Transform, type: System.Type, property: string, isObjectReference: boolean) => UnityEngine.Animations.PropertyStreamHandle);
      static BindCustomStreamProperty: ((animator: UnityEngine.Animator, property: string, type: UnityEngine.Animations.CustomStreamPropertyType) => UnityEngine.Animations.PropertyStreamHandle);
      static BindSceneTransform: ((animator: UnityEngine.Animator, transform: UnityEngine.Transform) => UnityEngine.Animations.TransformSceneHandle);
      static BindSceneProperty: ((animator: UnityEngine.Animator, transform: UnityEngine.Transform, type: System.Type, property: string) => UnityEngine.Animations.PropertySceneHandle) | ((animator: UnityEngine.Animator, transform: UnityEngine.Transform, type: System.Type, property: string, isObjectReference: boolean) => UnityEngine.Animations.PropertySceneHandle);
      static ResolveAllStreamHandles: ((animator: UnityEngine.Animator) => void);
      static ResolveAllSceneHandles: ((animator: UnityEngine.Animator) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum Axis {
      None = 0,
      X = 1,
      Y = 2,
      Z = 4,
    }
    export declare class ConstraintSource {
      sourceTransform: UnityEngine.Transform;
      weight: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface IConstraint {
      weight: number;
      constraintActive: boolean;
      locked: boolean;
      sourceCount: number;
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
    }
    export declare class PositionConstraint {
      weight: number;
      translationAtRest: UnityEngine.Vector3;
      translationOffset: UnityEngine.Vector3;
      translationAxis: UnityEngine.Animations.Axis;
      constraintActive: boolean;
      locked: boolean;
      sourceCount: number;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class RotationConstraint {
      weight: number;
      rotationAtRest: UnityEngine.Vector3;
      rotationOffset: UnityEngine.Vector3;
      rotationAxis: UnityEngine.Animations.Axis;
      constraintActive: boolean;
      locked: boolean;
      sourceCount: number;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScaleConstraint {
      weight: number;
      scaleAtRest: UnityEngine.Vector3;
      scaleOffset: UnityEngine.Vector3;
      scalingAxis: UnityEngine.Animations.Axis;
      constraintActive: boolean;
      locked: boolean;
      sourceCount: number;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class LookAtConstraint {
      weight: number;
      roll: number;
      constraintActive: boolean;
      locked: boolean;
      rotationAtRest: UnityEngine.Vector3;
      rotationOffset: UnityEngine.Vector3;
      worldUpObject: UnityEngine.Transform;
      useUpObject: boolean;
      sourceCount: number;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class MuscleHandle {
      constructor(bodyDof: UnityEngine.BodyDof);
      constructor(headDof: UnityEngine.HeadDof);
      constructor(partDof: UnityEngine.HumanPartDof, legDof: UnityEngine.LegDof);
      constructor(partDof: UnityEngine.HumanPartDof, armDof: UnityEngine.ArmDof);
      constructor(partDof: UnityEngine.HumanPartDof, fingerDof: UnityEngine.FingerDof);
      humanPartDof: UnityEngine.HumanPartDof;
      dof: number;
      name: string;
      static muscleHandleCount: number;
      static GetMuscleHandles: ((muscleHandles: UnityEngine.Animations.MuscleHandle[]) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ParentConstraint {
      weight: number;
      constraintActive: boolean;
      locked: boolean;
      sourceCount: number;
      translationAtRest: UnityEngine.Vector3;
      rotationAtRest: UnityEngine.Vector3;
      translationOffsets: UnityEngine.Vector3[];
      rotationOffsets: UnityEngine.Vector3[];
      translationAxis: UnityEngine.Animations.Axis;
      rotationAxis: UnityEngine.Animations.Axis;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetTranslationOffset: ((index: number) => UnityEngine.Vector3);
      SetTranslationOffset: ((index: number, value: UnityEngine.Vector3) => void);
      GetRotationOffset: ((index: number) => UnityEngine.Vector3);
      SetRotationOffset: ((index: number, value: UnityEngine.Vector3) => void);
      GetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      SetSources: ((sources: UnityEngine.Animations.ConstraintSource[]) => void);
      AddSource: ((source: UnityEngine.Animations.ConstraintSource) => number);
      RemoveSource: ((index: number) => void);
      GetSource: ((index: number) => UnityEngine.Animations.ConstraintSource);
      SetSource: ((index: number, source: UnityEngine.Animations.ConstraintSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace Apple {
    export enum FrameCaptureDestination {
      DevTools = 1,
      GPUTraceDocument = 2,
    }
    export declare class FrameCapture {
      static IsDestinationSupported: ((dest: UnityEngine.Apple.FrameCaptureDestination) => boolean);
      static BeginCaptureToXcode: (() => void);
      static BeginCaptureToFile: ((path: string) => void);
      static EndCapture: (() => void);
      static CaptureNextFrameToXcode: (() => void);
      static CaptureNextFrameToFile: ((path: string) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export namespace ReplayKit {
      export declare class ReplayKit {
        static APIAvailable: boolean;
        static broadcastingAPIAvailable: boolean;
        static recordingAvailable: boolean;
        static isRecording: boolean;
        static isBroadcasting: boolean;
        static isBroadcastingPaused: boolean;
        static isPreviewControllerActive: boolean;
        static cameraEnabled: boolean;
        static microphoneEnabled: boolean;
        static broadcastURL: string;
        static lastError: string;
        static StartRecording: ((enableMicrophone: boolean, enableCamera: boolean) => boolean) | ((enableMicrophone: boolean) => boolean) | (() => boolean);
        static StartBroadcasting: ((callback: UnityEngine.Apple.ReplayKit.ReplayKit_BroadcastStatusCallback, enableMicrophone: boolean, enableCamera: boolean) => void) | ((callback: UnityEngine.Apple.ReplayKit.ReplayKit_BroadcastStatusCallback, enableMicrophone: boolean) => void) | ((callback: UnityEngine.Apple.ReplayKit.ReplayKit_BroadcastStatusCallback) => void);
        static StopRecording: (() => boolean);
        static StopBroadcasting: (() => void);
        static PauseBroadcasting: (() => void);
        static ResumeBroadcasting: (() => void);
        static Preview: (() => boolean);
        static Discard: (() => boolean);
        static ShowCameraPreviewAt: ((posX: number, posY: number) => boolean) | ((posX: number, posY: number, width: number, height: number) => boolean);
        static HideCameraPreview: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class ReplayKit_BroadcastStatusCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((hasStarted: boolean, errorMessage: string) => void);
        BeginInvoke: ((hasStarted: boolean, errorMessage: string, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace TV {
      export declare class Remote {
        constructor();
        static allowExitToHome: boolean;
        static allowRemoteRotation: boolean;
        static reportAbsoluteDpadValues: boolean;
        static touchesEnabled: boolean;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
  }
  export namespace Assertions {
    export declare class Assert {
      static raiseExceptions: boolean;
      static Equals: ((obj1: System.Object, obj2: System.Object) => boolean) | ((obj: System.Object) => boolean);
      static ReferenceEquals: ((obj1: System.Object, obj2: System.Object) => boolean);
      static IsTrue: ((condition: boolean) => void) | ((condition: boolean, message: string) => void);
      static IsFalse: ((condition: boolean) => void) | ((condition: boolean, message: string) => void);
      static AreApproximatelyEqual: ((expected: number, actual: number) => void) | ((expected: number, actual: number, message: string) => void) | ((expected: number, actual: number, tolerance: number) => void) | ((expected: number, actual: number, tolerance: number, message: string) => void);
      static AreNotApproximatelyEqual: ((expected: number, actual: number) => void) | ((expected: number, actual: number, message: string) => void) | ((expected: number, actual: number, tolerance: number) => void) | ((expected: number, actual: number, tolerance: number, message: string) => void);
      static AreEqual: ((expected: UnityEngine.Object, actual: UnityEngine.Object, message: string) => void) | ((expected: System.SByte, actual: System.SByte) => void) | ((expected: System.SByte, actual: System.SByte, message: string) => void) | ((expected: System.Byte, actual: System.Byte) => void) | ((expected: System.Byte, actual: System.Byte, message: string) => void) | ((expected: System.Char, actual: System.Char) => void) | ((expected: System.Char, actual: System.Char, message: string) => void) | ((expected: System.Int16, actual: System.Int16) => void) | ((expected: System.Int16, actual: System.Int16, message: string) => void) | ((expected: System.UInt16, actual: System.UInt16) => void) | ((expected: System.UInt16, actual: System.UInt16, message: string) => void) | ((expected: number, actual: number) => void) | ((expected: number, actual: number, message: string) => void) | ((expected: System.UInt32, actual: System.UInt32) => void) | ((expected: System.UInt32, actual: System.UInt32, message: string) => void) | ((expected: System.Int64, actual: System.Int64) => void) | ((expected: System.Int64, actual: System.Int64, message: string) => void) | ((expected: System.UInt64, actual: System.UInt64) => void) | ((expected: System.UInt64, actual: System.UInt64, message: string) => void);
      static AreNotEqual: ((expected: UnityEngine.Object, actual: UnityEngine.Object, message: string) => void) | ((expected: System.SByte, actual: System.SByte) => void) | ((expected: System.SByte, actual: System.SByte, message: string) => void) | ((expected: System.Byte, actual: System.Byte) => void) | ((expected: System.Byte, actual: System.Byte, message: string) => void) | ((expected: System.Char, actual: System.Char) => void) | ((expected: System.Char, actual: System.Char, message: string) => void) | ((expected: System.Int16, actual: System.Int16) => void) | ((expected: System.Int16, actual: System.Int16, message: string) => void) | ((expected: System.UInt16, actual: System.UInt16) => void) | ((expected: System.UInt16, actual: System.UInt16, message: string) => void) | ((expected: number, actual: number) => void) | ((expected: number, actual: number, message: string) => void) | ((expected: System.UInt32, actual: System.UInt32) => void) | ((expected: System.UInt32, actual: System.UInt32, message: string) => void) | ((expected: System.Int64, actual: System.Int64) => void) | ((expected: System.Int64, actual: System.Int64, message: string) => void) | ((expected: System.UInt64, actual: System.UInt64) => void) | ((expected: System.UInt64, actual: System.UInt64, message: string) => void);
      static IsNull: ((value: UnityEngine.Object, message: string) => void);
      static IsNotNull: ((value: UnityEngine.Object, message: string) => void);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AssertionException {
      constructor(message: string, userMessage: string);
      Message: string;
      Data: System.Collections.IDictionary;
      InnerException: System.Exception;
      TargetSite: System.Reflection.MethodBase;
      StackTrace: string;
      HelpLink: string;
      Source: string;
      HResult: number;
      GetBaseException: (() => System.Exception);
      ToString: (() => string);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      GetType: (() => System.Type) | (() => System.Type);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
    }
    export namespace Comparers {
      export declare class FloatComparer {
        constructor();
        constructor(relative: boolean);
        constructor(error: number);
        constructor(error: number, relative: boolean);
        static s_ComparerWithDefaultTolerance: UnityEngine.Assertions.Comparers.FloatComparer;
        static kEpsilon: number;
        Equals: ((a: number, b: number) => boolean) | ((obj: System.Object) => boolean);
        GetHashCode: ((obj: number) => number) | (() => number);
        static AreEqual: ((expected: number, actual: number, error: number) => boolean);
        static AreEqualRelative: ((expected: number, actual: number, error: number) => boolean);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace Must {
      export declare class MustExtensions {
        static MustBeTrue: ((value: boolean) => void) | ((value: boolean, message: string) => void);
        static MustBeFalse: ((value: boolean) => void) | ((value: boolean, message: string) => void);
        static MustBeApproximatelyEqual: ((actual: number, expected: number) => void) | ((actual: number, expected: number, message: string) => void) | ((actual: number, expected: number, tolerance: number) => void) | ((actual: number, expected: number, tolerance: number, message: string) => void);
        static MustNotBeApproximatelyEqual: ((actual: number, expected: number) => void) | ((actual: number, expected: number, message: string) => void) | ((actual: number, expected: number, tolerance: number) => void) | ((actual: number, expected: number, tolerance: number, message: string) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
  }
  export namespace Audio {
    export declare class AudioClipPlayable {
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, clip: UnityEngine.AudioClip, looping: boolean) => UnityEngine.Audio.AudioClipPlayable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      Equals: ((other: UnityEngine.Audio.AudioClipPlayable) => boolean) | ((obj: System.Object) => boolean);
      GetClip: (() => UnityEngine.AudioClip);
      SetClip: ((value: UnityEngine.AudioClip) => void);
      GetLooped: (() => boolean);
      SetLooped: ((value: boolean) => void);
      IsPlaying: (() => boolean);
      IsChannelPlaying: (() => boolean);
      GetStartDelay: (() => number);
      GetPauseDelay: (() => number);
      Seek: ((startTime: number, startDelay: number) => void) | ((startTime: number, startDelay: number, duration: number) => void);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum AudioMixerUpdateMode {
      Normal = 0,
      UnscaledTime = 1,
    }
    export declare class AudioMixer {
      outputAudioMixerGroup: UnityEngine.Audio.AudioMixerGroup;
      updateMode: UnityEngine.Audio.AudioMixerUpdateMode;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      FindSnapshot: ((name: string) => UnityEngine.Audio.AudioMixerSnapshot);
      FindMatchingGroups: ((subPath: string) => UnityEngine.Audio.AudioMixerGroup[]);
      TransitionToSnapshots: ((snapshots: UnityEngine.Audio.AudioMixerSnapshot[], weights: number[], timeToReach: number) => void);
      SetFloat: ((name: string, value: number) => boolean);
      ClearFloat: ((name: string) => boolean);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AudioMixerGroup {
      audioMixer: UnityEngine.Audio.AudioMixer;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AudioMixerPlayable {
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, inputCount?: number, normalizeInputVolumes?: boolean) => UnityEngine.Audio.AudioMixerPlayable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      Equals: ((other: UnityEngine.Audio.AudioMixerPlayable) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AudioMixerSnapshot {
      audioMixer: UnityEngine.Audio.AudioMixer;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      TransitionTo: ((timeToReach: number) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AudioPlayableBinding {
      static Create: ((name: string, key: UnityEngine.Object) => UnityEngine.Playables.PlayableBinding);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AudioPlayableOutput {
      static Null: UnityEngine.Audio.AudioPlayableOutput;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, name: string, target: UnityEngine.AudioSource) => UnityEngine.Audio.AudioPlayableOutput);
      GetHandle: (() => UnityEngine.Playables.PlayableOutputHandle);
      GetTarget: (() => UnityEngine.AudioSource);
      SetTarget: ((value: UnityEngine.AudioSource) => void);
      GetEvaluateOnSeek: (() => boolean);
      SetEvaluateOnSeek: ((value: boolean) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace Diagnostics {
    export enum ForcedCrashCategory {
      AccessViolation = 0,
      FatalError = 1,
      Abort = 2,
      PureVirtualFunction = 3,
      MonoAbort = 4,
    }
    export declare class Utils {
      static ForceCrash: ((crashCategory: UnityEngine.Diagnostics.ForcedCrashCategory) => void);
      static NativeAssert: ((message: string) => void);
      static NativeError: ((message: string) => void);
      static NativeWarning: ((message: string) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PlayerConnection {
      static connected: boolean;
      static SendFile: ((remoteFilePath: string, data: System.Byte[]) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace Events {
    export enum PersistentListenerMode {
      EventDefined = 0,
      Void = 1,
      Object = 2,
      Int = 3,
      Float = 4,
      String = 5,
      Bool = 6,
    }
    export enum UnityEventCallState {
      Off = 0,
      EditorAndRuntime = 1,
      RuntimeOnly = 2,
    }
    export declare class UnityEventBase {
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      static GetValidMethodInfo: ((obj: System.Object, functionName: string, argumentTypes: System.Type[]) => System.Reflection.MethodInfo) | ((objectType: System.Type, functionName: string, argumentTypes: System.Type[]) => System.Reflection.MethodInfo);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class UnityAction<T0 = any, T1 = any, T2 = any, T3 = any> {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((arg0: T0, arg1: T1, arg2: T2, arg3: T3) => void);
      BeginInvoke: ((arg0: T0, arg1: T1, arg2: T2, arg3: T3, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UnityEvent<T0 = any, T1 = any, T2 = any, T3 = any> {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<T0, T1, T2, T3>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<T0, T1, T2, T3>) => void);
      Invoke: ((arg0: T0, arg1: T1, arg2: T2, arg3: T3) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
  }
  export namespace EventSystems {
    export declare class AxisEventData {
      constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
      moveVector: UnityEngine.Vector2;
      moveDir: UnityEngine.EventSystems.MoveDirection;
      currentInputModule: UnityEngine.EventSystems.BaseInputModule;
      selectedObject: UnityEngine.GameObject;
      used: boolean;
      Reset: (() => void);
      Use: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AbstractEventData {
      used: boolean;
      Reset: (() => void);
      Use: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BaseEventData {
      constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
      currentInputModule: UnityEngine.EventSystems.BaseInputModule;
      selectedObject: UnityEngine.GameObject;
      used: boolean;
      Reset: (() => void);
      Use: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerEventData {
      constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
      pointerEnter: UnityEngine.GameObject;
      lastPress: UnityEngine.GameObject;
      rawPointerPress: UnityEngine.GameObject;
      pointerDrag: UnityEngine.GameObject;
      pointerClick: UnityEngine.GameObject;
      pointerCurrentRaycast: UnityEngine.EventSystems.RaycastResult;
      pointerPressRaycast: UnityEngine.EventSystems.RaycastResult;
      eligibleForClick: boolean;
      pointerId: number;
      position: UnityEngine.Vector2;
      delta: UnityEngine.Vector2;
      pressPosition: UnityEngine.Vector2;
      worldPosition: UnityEngine.Vector3;
      worldNormal: UnityEngine.Vector3;
      clickTime: number;
      clickCount: number;
      scrollDelta: UnityEngine.Vector2;
      useDragThreshold: boolean;
      dragging: boolean;
      button: UnityEngine.EventSystems.PointerEventData_InputButton;
      enterEventCamera: UnityEngine.Camera;
      pressEventCamera: UnityEngine.Camera;
      pointerPress: UnityEngine.GameObject;
      currentInputModule: UnityEngine.EventSystems.BaseInputModule;
      selectedObject: UnityEngine.GameObject;
      used: boolean;
      hovered: UnityEngine.GameObject[];
      IsPointerMoving: (() => boolean);
      IsScrolling: (() => boolean);
      ToString: (() => string);
      Reset: (() => void);
      Use: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum EventHandle {
      Unused = 0,
      Used = 1,
    }
    export interface IEventSystemHandler {
    }
    export interface IPointerEnterHandler {
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IPointerExitHandler {
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IPointerDownHandler {
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IPointerUpHandler {
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IPointerClickHandler {
      OnPointerClick: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IBeginDragHandler {
      OnBeginDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IInitializePotentialDragHandler {
      OnInitializePotentialDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IDragHandler {
      OnDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IEndDragHandler {
      OnEndDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IDropHandler {
      OnDrop: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IScrollHandler {
      OnScroll: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
    }
    export interface IUpdateSelectedHandler {
      OnUpdateSelected: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
    }
    export interface ISelectHandler {
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
    }
    export interface IDeselectHandler {
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
    }
    export interface IMoveHandler {
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
    }
    export interface ISubmitHandler {
      OnSubmit: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
    }
    export interface ICancelHandler {
      OnCancel: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
    }
    export declare class EventSystem {
      static current: UnityEngine.EventSystems.EventSystem;
      sendNavigationEvents: boolean;
      pixelDragThreshold: number;
      currentInputModule: UnityEngine.EventSystems.BaseInputModule;
      firstSelectedGameObject: UnityEngine.GameObject;
      currentSelectedGameObject: UnityEngine.GameObject;
      lastSelectedGameObject: UnityEngine.GameObject;
      isFocused: boolean;
      alreadySelecting: boolean;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      UpdateModules: (() => void);
      SetSelectedGameObject: ((selected: UnityEngine.GameObject, pointer: UnityEngine.EventSystems.BaseEventData) => void) | ((selected: UnityEngine.GameObject) => void);
      RaycastAll: ((eventData: UnityEngine.EventSystems.PointerEventData, raycastResults: UnityEngine.EventSystems.RaycastResult[]) => void);
      IsPointerOverGameObject: (() => boolean) | ((pointerId: number) => boolean);
      ToString: (() => string);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class EventTrigger {
      delegates: UnityEngine.EventSystems.EventTrigger_Entry[];
      triggers: UnityEngine.EventSystems.EventTrigger_Entry[];
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnDrop: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerClick: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnScroll: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      OnUpdateSelected: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnInitializePotentialDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnBeginDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnEndDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSubmit: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnCancel: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum EventTriggerType {
      PointerEnter = 0,
      PointerExit = 1,
      PointerDown = 2,
      PointerUp = 3,
      PointerClick = 4,
      Drag = 5,
      Drop = 6,
      Scroll = 7,
      UpdateSelected = 8,
      Select = 9,
      Deselect = 10,
      Move = 11,
      InitializePotentialDrag = 12,
      BeginDrag = 13,
      EndDrag = 14,
      Submit = 15,
      Cancel = 16,
    }
    export declare class ExecuteEvents {
      static pointerEnterHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IPointerEnterHandler]
      static pointerExitHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IPointerExitHandler]
      static pointerDownHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IPointerDownHandler]
      static pointerUpHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IPointerUpHandler]
      static pointerClickHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IPointerClickHandler]
      static initializePotentialDrag: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IInitializePotentialDragHandler]
      static beginDragHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IBeginDragHandler]
      static dragHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IDragHandler]
      static endDragHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IEndDragHandler]
      static dropHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IDropHandler]
      static scrollHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IScrollHandler]
      static updateSelectedHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IUpdateSelectedHandler]
      static selectHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.ISelectHandler]
      static deselectHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IDeselectHandler]
      static moveHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.IMoveHandler]
      static submitHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.ISubmitHandler]
      static cancelHandler: any; // UnityEngine.EventSystems.ExecuteEvents+EventFunction`1[UnityEngine.EventSystems.ICancelHandler]
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BaseInput {
      constructor();
      compositionString: string;
      imeCompositionMode: UnityEngine.IMECompositionMode;
      compositionCursorPos: UnityEngine.Vector2;
      mousePresent: boolean;
      mousePosition: UnityEngine.Vector2;
      mouseScrollDelta: UnityEngine.Vector2;
      touchSupported: boolean;
      touchCount: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetMouseButtonDown: ((button: number) => boolean);
      GetMouseButtonUp: ((button: number) => boolean);
      GetMouseButton: ((button: number) => boolean);
      GetTouch: ((index: number) => UnityEngine.Touch);
      GetAxisRaw: ((axisName: string) => number);
      GetButtonDown: ((buttonName: string) => boolean);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class BaseInputModule {
      input: UnityEngine.EventSystems.BaseInput;
      inputOverride: UnityEngine.EventSystems.BaseInput;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Process: (() => void);
      IsPointerOverGameObject: ((pointerId: number) => boolean);
      ShouldActivateModule: (() => boolean);
      DeactivateModule: (() => void);
      ActivateModule: (() => void);
      UpdateModule: (() => void);
      IsModuleSupported: (() => boolean);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PointerInputModule {
      input: UnityEngine.EventSystems.BaseInput;
      inputOverride: UnityEngine.EventSystems.BaseInput;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      static kMouseLeftId: number;
      static kMouseRightId: number;
      static kMouseMiddleId: number;
      static kFakeTouchesId: number;
      IsPointerOverGameObject: ((pointerId: number) => boolean);
      ToString: (() => string);
      Process: (() => void);
      ShouldActivateModule: (() => boolean);
      DeactivateModule: (() => void);
      ActivateModule: (() => void);
      UpdateModule: (() => void);
      IsModuleSupported: (() => boolean);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class StandaloneInputModule {
      inputMode: UnityEngine.EventSystems.StandaloneInputModule_InputMode;
      allowActivationOnMobileDevice: boolean;
      forceModuleActive: boolean;
      inputActionsPerSecond: number;
      repeatDelay: number;
      horizontalAxis: string;
      verticalAxis: string;
      submitButton: string;
      cancelButton: string;
      input: UnityEngine.EventSystems.BaseInput;
      inputOverride: UnityEngine.EventSystems.BaseInput;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      UpdateModule: (() => void);
      IsModuleSupported: (() => boolean);
      ShouldActivateModule: (() => boolean);
      ActivateModule: (() => void);
      DeactivateModule: (() => void);
      Process: (() => void);
      IsPointerOverGameObject: ((pointerId: number) => boolean);
      ToString: (() => string);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class TouchInputModule {
      allowActivationOnStandalone: boolean;
      forceModuleActive: boolean;
      input: UnityEngine.EventSystems.BaseInput;
      inputOverride: UnityEngine.EventSystems.BaseInput;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      UpdateModule: (() => void);
      IsModuleSupported: (() => boolean);
      ShouldActivateModule: (() => boolean);
      Process: (() => void);
      DeactivateModule: (() => void);
      ToString: (() => string);
      IsPointerOverGameObject: ((pointerId: number) => boolean);
      ActivateModule: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export enum MoveDirection {
      Left = 0,
      Up = 1,
      Right = 2,
      Down = 3,
      None = 4,
    }
    export declare class RaycastResult {
      gameObject: UnityEngine.GameObject;
      isValid: boolean;
      module: UnityEngine.EventSystems.BaseRaycaster;
      distance: number;
      index: number;
      depth: number;
      sortingLayer: number;
      sortingOrder: number;
      worldPosition: UnityEngine.Vector3;
      worldNormal: UnityEngine.Vector3;
      screenPosition: UnityEngine.Vector2;
      displayIndex: number;
      Clear: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class BaseRaycaster {
      eventCamera: UnityEngine.Camera;
      priority: number;
      sortOrderPriority: number;
      renderOrderPriority: number;
      rootRaycaster: UnityEngine.EventSystems.BaseRaycaster;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Raycast: ((eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]) => void);
      ToString: (() => string);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class Physics2DRaycaster {
      eventCamera: UnityEngine.Camera;
      depth: number;
      finalEventMask: number;
      eventMask: UnityEngine.LayerMask;
      maxRayIntersections: number;
      priority: number;
      sortOrderPriority: number;
      renderOrderPriority: number;
      rootRaycaster: UnityEngine.EventSystems.BaseRaycaster;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Raycast: ((eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]) => void);
      ToString: (() => string);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class PhysicsRaycaster {
      eventCamera: UnityEngine.Camera;
      depth: number;
      finalEventMask: number;
      eventMask: UnityEngine.LayerMask;
      maxRayIntersections: number;
      priority: number;
      sortOrderPriority: number;
      renderOrderPriority: number;
      rootRaycaster: UnityEngine.EventSystems.BaseRaycaster;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Raycast: ((eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]) => void);
      ToString: (() => string);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class UIBehaviour {
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum PointerEventData_InputButton {
      Left = 0,
      Right = 1,
      Middle = 2,
    }
    export enum PointerEventData_FramePressState {
      Pressed = 0,
      Released = 1,
      PressedAndReleased = 2,
      NotChanged = 3,
    }
    export declare class EventTrigger_TriggerEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>) => void);
      Invoke: ((arg0: UnityEngine.EventSystems.BaseEventData) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class EventTrigger_Entry {
      constructor();
      eventID: UnityEngine.EventSystems.EventTriggerType;
      callback: UnityEngine.EventSystems.EventTrigger_TriggerEvent;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class EventFunction<T1 = any> {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((handler: T1, eventData: UnityEngine.EventSystems.BaseEventData) => void);
      BeginInvoke: ((handler: T1, eventData: UnityEngine.EventSystems.BaseEventData, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerInputModule_MouseButtonEventData {
      constructor();
      buttonState: UnityEngine.EventSystems.PointerEventData_FramePressState;
      buttonData: UnityEngine.EventSystems.PointerEventData;
      PressedThisFrame: (() => boolean);
      ReleasedThisFrame: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum StandaloneInputModule_InputMode {
      Mouse = 0,
      Buttons = 1,
    }
  }
  export namespace Experimental {
    export namespace AI {
      export declare class PolygonId {
        IsNull: (() => boolean);
        GetHashCode: (() => number);
        Equals: ((rhs: UnityEngine.Experimental.AI.PolygonId) => boolean) | ((obj: System.Object) => boolean);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class NavMeshLocation {
        polygon: UnityEngine.Experimental.AI.PolygonId;
        position: UnityEngine.Vector3;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export enum PathQueryStatus {
        Failure = -2147483648,
        Success = 1073741824,
        InProgress = 536870912,
        StatusDetailMask = 16777215,
        WrongMagic = 1,
        WrongVersion = 2,
        OutOfMemory = 4,
        InvalidParam = 8,
        BufferTooSmall = 16,
        OutOfNodes = 32,
        PartialResult = 64,
      }
      export enum NavMeshPolyTypes {
        Ground = 0,
        OffMeshConnection = 1,
      }
      export declare class NavMeshWorld {
        IsValid: (() => boolean);
        static GetDefaultWorld: (() => UnityEngine.Experimental.AI.NavMeshWorld);
        AddDependency: ((job: Unity.Jobs.JobHandle) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class NavMeshQuery {
        constructor(world: UnityEngine.Experimental.AI.NavMeshWorld, allocator: Unity.Collections.Allocator, pathNodePoolSize?: number);
        Dispose: (() => void);
        BeginFindPath: ((start: UnityEngine.Experimental.AI.NavMeshLocation, end: UnityEngine.Experimental.AI.NavMeshLocation, areaMask?: number, costs?: Unity.Collections.NativeArray<number>) => UnityEngine.Experimental.AI.PathQueryStatus);
        GetPathResult: ((path: Unity.Collections.NativeSlice<UnityEngine.Experimental.AI.PolygonId>) => number);
        IsValid: ((polygon: UnityEngine.Experimental.AI.PolygonId) => boolean) | ((location: UnityEngine.Experimental.AI.NavMeshLocation) => boolean);
        GetAgentTypeIdForPolygon: ((polygon: UnityEngine.Experimental.AI.PolygonId) => number);
        CreateLocation: ((position: UnityEngine.Vector3, polygon: UnityEngine.Experimental.AI.PolygonId) => UnityEngine.Experimental.AI.NavMeshLocation);
        MapLocation: ((position: UnityEngine.Vector3, extents: UnityEngine.Vector3, agentTypeID: number, areaMask?: number) => UnityEngine.Experimental.AI.NavMeshLocation);
        MoveLocations: ((locations: Unity.Collections.NativeSlice<UnityEngine.Experimental.AI.NavMeshLocation>, targets: Unity.Collections.NativeSlice<UnityEngine.Vector3>, areaMasks: Unity.Collections.NativeSlice<number>) => void);
        MoveLocationsInSameAreas: ((locations: Unity.Collections.NativeSlice<UnityEngine.Experimental.AI.NavMeshLocation>, targets: Unity.Collections.NativeSlice<UnityEngine.Vector3>, areaMask?: number) => void);
        MoveLocation: ((location: UnityEngine.Experimental.AI.NavMeshLocation, target: UnityEngine.Vector3, areaMask?: number) => UnityEngine.Experimental.AI.NavMeshLocation);
        PolygonLocalToWorldMatrix: ((polygon: UnityEngine.Experimental.AI.PolygonId) => UnityEngine.Matrix4x4);
        PolygonWorldToLocalMatrix: ((polygon: UnityEngine.Experimental.AI.PolygonId) => UnityEngine.Matrix4x4);
        GetPolygonType: ((polygon: UnityEngine.Experimental.AI.PolygonId) => UnityEngine.Experimental.AI.NavMeshPolyTypes);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
    }
    export namespace Animations {
      export enum AnimationStreamSource {
        DefaultValues = 0,
        PreviousInputs = 1,
      }
      export declare class AnimationPlayableOutputExtensions {
        static GetAnimationStreamSource: ((output: UnityEngine.Animations.AnimationPlayableOutput) => UnityEngine.Experimental.Animations.AnimationStreamSource);
        static SetAnimationStreamSource: ((output: UnityEngine.Animations.AnimationPlayableOutput, streamSource: UnityEngine.Experimental.Animations.AnimationStreamSource) => void);
        static GetSortingOrder: ((output: UnityEngine.Animations.AnimationPlayableOutput) => System.UInt16);
        static SetSortingOrder: ((output: UnityEngine.Animations.AnimationPlayableOutput, sortingOrder: System.UInt16) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace AssetBundlePatching {
      export declare class AssetBundleUtility {
        static PatchAssetBundles: ((bundles: UnityEngine.AssetBundle[], filenames: string[]) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace Audio {
      export declare class AudioSampleProvider {
        id: System.UInt32;
        trackIndex: System.UInt16;
        owner: UnityEngine.Object;
        valid: boolean;
        channelCount: System.UInt16;
        sampleRate: System.UInt32;
        maxSampleFrameCount: System.UInt32;
        availableSampleFrameCount: System.UInt32;
        freeSampleFrameCount: System.UInt32;
        freeSampleFrameCountLowThreshold: System.UInt32;
        enableSampleFramesAvailableEvents: boolean;
        enableSilencePadding: boolean;
        static consumeSampleFramesNativeFunction: UnityEngine.Experimental.Audio.AudioSampleProvider_ConsumeSampleFramesNativeFunction;
        Dispose: (() => void);
        ConsumeSampleFrames: ((sampleFrames: Unity.Collections.NativeArray<number>) => System.UInt32);
        SetSampleFramesAvailableNativeHandler: ((handler: UnityEngine.Experimental.Audio.AudioSampleProvider_SampleFramesEventNativeFunction, userData: System.IntPtr) => void);
        ClearSampleFramesAvailableNativeHandler: (() => void);
        SetSampleFramesOverflowNativeHandler: ((handler: UnityEngine.Experimental.Audio.AudioSampleProvider_SampleFramesEventNativeFunction, userData: System.IntPtr) => void);
        ClearSampleFramesOverflowNativeHandler: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class AudioSampleProvider_ConsumeSampleFramesNativeFunction {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((providerId: System.UInt32, interleavedSampleFrames: System.IntPtr, sampleFrameCount: System.UInt32) => System.UInt32);
        BeginInvoke: ((providerId: System.UInt32, interleavedSampleFrames: System.IntPtr, sampleFrameCount: System.UInt32, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => System.UInt32);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class AudioSampleProvider_SampleFramesHandler {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((provider: UnityEngine.Experimental.Audio.AudioSampleProvider, sampleFrameCount: System.UInt32) => void);
        BeginInvoke: ((provider: UnityEngine.Experimental.Audio.AudioSampleProvider, sampleFrameCount: System.UInt32, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class AudioSampleProvider_SampleFramesEventNativeFunction {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((userData: System.IntPtr, providerId: System.UInt32, sampleFrameCount: System.UInt32) => void);
        BeginInvoke: ((userData: System.IntPtr, providerId: System.UInt32, sampleFrameCount: System.UInt32, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace GlobalIllumination {
      export enum LightType {
        Directional = 0,
        Point = 1,
        Spot = 2,
        Rectangle = 3,
        Disc = 4,
        SpotPyramidShape = 5,
        SpotBoxShape = 6,
      }
      export enum LightMode {
        Realtime = 0,
        Mixed = 1,
        Baked = 2,
        Unknown = 3,
      }
      export enum FalloffType {
        InverseSquared = 0,
        InverseSquaredNoRangeAttenuation = 1,
        Linear = 2,
        Legacy = 3,
        Undefined = 4,
      }
      export enum AngularFalloffType {
        LUT = 0,
        AnalyticAndInnerAngle = 1,
      }
      export declare class LinearColor {
        red: number;
        green: number;
        blue: number;
        intensity: number;
        static Convert: ((color: UnityEngine.Color, intensity: number) => UnityEngine.Experimental.GlobalIllumination.LinearColor);
        static Black: (() => UnityEngine.Experimental.GlobalIllumination.LinearColor);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class DirectionalLight {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        orientation: UnityEngine.Quaternion;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        penumbraWidthRadian: number;
        direction: UnityEngine.Vector3;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class PointLight {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        range: number;
        sphereRadius: number;
        falloff: UnityEngine.Experimental.GlobalIllumination.FalloffType;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class SpotLight {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        orientation: UnityEngine.Quaternion;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        range: number;
        sphereRadius: number;
        coneAngle: number;
        innerConeAngle: number;
        falloff: UnityEngine.Experimental.GlobalIllumination.FalloffType;
        angularFalloff: UnityEngine.Experimental.GlobalIllumination.AngularFalloffType;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class RectangleLight {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        orientation: UnityEngine.Quaternion;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        range: number;
        width: number;
        height: number;
        falloff: UnityEngine.Experimental.GlobalIllumination.FalloffType;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class DiscLight {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        orientation: UnityEngine.Quaternion;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        range: number;
        radius: number;
        falloff: UnityEngine.Experimental.GlobalIllumination.FalloffType;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class SpotLightBoxShape {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        orientation: UnityEngine.Quaternion;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        range: number;
        width: number;
        height: number;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class SpotLightPyramidShape {
        instanceID: number;
        shadow: boolean;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        position: UnityEngine.Vector3;
        orientation: UnityEngine.Quaternion;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        range: number;
        angle: number;
        aspectRatio: number;
        falloff: UnityEngine.Experimental.GlobalIllumination.FalloffType;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class Cookie {
        instanceID: number;
        scale: number;
        sizes: UnityEngine.Vector2;
        static Defaults: (() => UnityEngine.Experimental.GlobalIllumination.Cookie);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class LightDataGI {
        instanceID: number;
        cookieID: number;
        cookieScale: number;
        color: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        indirectColor: UnityEngine.Experimental.GlobalIllumination.LinearColor;
        orientation: UnityEngine.Quaternion;
        position: UnityEngine.Vector3;
        range: number;
        coneAngle: number;
        innerConeAngle: number;
        shape0: number;
        shape1: number;
        type: UnityEngine.Experimental.GlobalIllumination.LightType;
        mode: UnityEngine.Experimental.GlobalIllumination.LightMode;
        shadow: System.Byte;
        falloff: UnityEngine.Experimental.GlobalIllumination.FalloffType;
        InitNoBake: ((lightInstanceID: number) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class LightmapperUtils {
        static Extract: ((baketype: UnityEngine.LightmapBakeType) => UnityEngine.Experimental.GlobalIllumination.LightMode);
        static ExtractIndirect: ((l: UnityEngine.Light) => UnityEngine.Experimental.GlobalIllumination.LinearColor);
        static ExtractInnerCone: ((l: UnityEngine.Light) => number);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class Lightmapping {
        static SetDelegate: ((del: UnityEngine.Experimental.GlobalIllumination.Lightmapping_RequestLightsDelegate) => void);
        static GetDelegate: (() => UnityEngine.Experimental.GlobalIllumination.Lightmapping_RequestLightsDelegate);
        static ResetDelegate: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class Lightmapping_RequestLightsDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((requests: UnityEngine.Light[], lightsOutput: Unity.Collections.NativeArray<UnityEngine.Experimental.GlobalIllumination.LightDataGI>) => void);
        BeginInvoke: ((requests: UnityEngine.Light[], lightsOutput: Unity.Collections.NativeArray<UnityEngine.Experimental.GlobalIllumination.LightDataGI>, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class RenderSettings {
        constructor();
        static useRadianceAmbientProbe: boolean;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace Playables {
      export declare class CameraPlayable {
        static Create: ((graph: UnityEngine.Playables.PlayableGraph, camera: UnityEngine.Camera) => UnityEngine.Experimental.Playables.CameraPlayable);
        GetHandle: (() => UnityEngine.Playables.PlayableHandle);
        Equals: ((other: UnityEngine.Experimental.Playables.CameraPlayable) => boolean) | ((obj: System.Object) => boolean);
        GetCamera: (() => UnityEngine.Camera);
        SetCamera: ((value: UnityEngine.Camera) => void);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class MaterialEffectPlayable {
        static Create: ((graph: UnityEngine.Playables.PlayableGraph, material: UnityEngine.Material, pass?: number) => UnityEngine.Experimental.Playables.MaterialEffectPlayable);
        GetHandle: (() => UnityEngine.Playables.PlayableHandle);
        Equals: ((other: UnityEngine.Experimental.Playables.MaterialEffectPlayable) => boolean) | ((obj: System.Object) => boolean);
        GetMaterial: (() => UnityEngine.Material);
        SetMaterial: ((value: UnityEngine.Material) => void);
        GetPass: (() => number);
        SetPass: ((value: number) => void);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class TextureMixerPlayable {
        static Create: ((graph: UnityEngine.Playables.PlayableGraph) => UnityEngine.Experimental.Playables.TextureMixerPlayable);
        GetHandle: (() => UnityEngine.Playables.PlayableHandle);
        Equals: ((other: UnityEngine.Experimental.Playables.TextureMixerPlayable) => boolean) | ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class TexturePlayableBinding {
        static Create: ((name: string, key: UnityEngine.Object) => UnityEngine.Playables.PlayableBinding);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class TexturePlayableOutput {
        static Null: UnityEngine.Experimental.Playables.TexturePlayableOutput;
        static Create: ((graph: UnityEngine.Playables.PlayableGraph, name: string, target: UnityEngine.RenderTexture) => UnityEngine.Experimental.Playables.TexturePlayableOutput);
        GetHandle: (() => UnityEngine.Playables.PlayableOutputHandle);
        GetTarget: (() => UnityEngine.RenderTexture);
        SetTarget: ((value: UnityEngine.RenderTexture) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
    }
    export namespace Rendering {
      export interface IScriptableRuntimeReflectionSystem {
        TickRealtimeProbes: (() => boolean);
      }
      export declare class ScriptableRuntimeReflectionSystem {
        TickRealtimeProbes: (() => boolean);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class ScriptableRuntimeReflectionSystemSettings {
        static system: UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class ExternalGPUProfiler {
        static BeginGPUCapture: (() => void);
        static EndGPUCapture: (() => void);
        static IsAttached: (() => boolean);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum WaitForPresentSyncPoint {
        BeginFrame = 0,
        EndFrame = 1,
      }
      export enum GraphicsJobsSyncPoint {
        EndOfFrame = 0,
        AfterScriptUpdate = 1,
        AfterScriptLateUpdate = 2,
        WaitForPresent = 3,
      }
      export declare class GraphicsDeviceSettings {
        static waitForPresentSyncPoint: UnityEngine.Experimental.Rendering.WaitForPresentSyncPoint;
        static graphicsJobsSyncPoint: UnityEngine.Experimental.Rendering.GraphicsJobsSyncPoint;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum TextureCreationFlags {
        None = 0,
        MipChain = 1,
        Crunch = 64,
      }
      export enum FormatUsage {
        Sample = 0,
        Linear = 1,
        Sparse = 2,
        Render = 4,
        Blend = 5,
        GetPixels = 6,
        SetPixels = 7,
        SetPixels32 = 8,
        ReadPixels = 9,
        LoadStore = 10,
        MSAA2x = 11,
        MSAA4x = 12,
        MSAA8x = 13,
        StencilSampling = 15,
      }
      export enum DefaultFormat {
        LDR = 0,
        HDR = 1,
      }
      export enum GraphicsFormat {
        None = 0,
        R8_SRGB = 1,
        R8G8_SRGB = 2,
        R8G8B8_SRGB = 3,
        R8G8B8A8_SRGB = 4,
        R8_UNorm = 5,
        R8G8_UNorm = 6,
        R8G8B8_UNorm = 7,
        R8G8B8A8_UNorm = 8,
        R8_SNorm = 9,
        R8G8_SNorm = 10,
        R8G8B8_SNorm = 11,
        R8G8B8A8_SNorm = 12,
        R8_UInt = 13,
        R8G8_UInt = 14,
        R8G8B8_UInt = 15,
        R8G8B8A8_UInt = 16,
        R8_SInt = 17,
        R8G8_SInt = 18,
        R8G8B8_SInt = 19,
        R8G8B8A8_SInt = 20,
        R16_UNorm = 21,
        R16G16_UNorm = 22,
        R16G16B16_UNorm = 23,
        R16G16B16A16_UNorm = 24,
        R16_SNorm = 25,
        R16G16_SNorm = 26,
        R16G16B16_SNorm = 27,
        R16G16B16A16_SNorm = 28,
        R16_UInt = 29,
        R16G16_UInt = 30,
        R16G16B16_UInt = 31,
        R16G16B16A16_UInt = 32,
        R16_SInt = 33,
        R16G16_SInt = 34,
        R16G16B16_SInt = 35,
        R16G16B16A16_SInt = 36,
        R32_UInt = 37,
        R32G32_UInt = 38,
        R32G32B32_UInt = 39,
        R32G32B32A32_UInt = 40,
        R32_SInt = 41,
        R32G32_SInt = 42,
        R32G32B32_SInt = 43,
        R32G32B32A32_SInt = 44,
        R16_SFloat = 45,
        R16G16_SFloat = 46,
        R16G16B16_SFloat = 47,
        R16G16B16A16_SFloat = 48,
        R32_SFloat = 49,
        R32G32_SFloat = 50,
        R32G32B32_SFloat = 51,
        R32G32B32A32_SFloat = 52,
        B8G8R8_SRGB = 56,
        B8G8R8A8_SRGB = 57,
        B8G8R8_UNorm = 58,
        B8G8R8A8_UNorm = 59,
        B8G8R8_SNorm = 60,
        B8G8R8A8_SNorm = 61,
        B8G8R8_UInt = 62,
        B8G8R8A8_UInt = 63,
        B8G8R8_SInt = 64,
        B8G8R8A8_SInt = 65,
        R4G4B4A4_UNormPack16 = 66,
        B4G4R4A4_UNormPack16 = 67,
        R5G6B5_UNormPack16 = 68,
        B5G6R5_UNormPack16 = 69,
        R5G5B5A1_UNormPack16 = 70,
        B5G5R5A1_UNormPack16 = 71,
        A1R5G5B5_UNormPack16 = 72,
        E5B9G9R9_UFloatPack32 = 73,
        B10G11R11_UFloatPack32 = 74,
        A2B10G10R10_UNormPack32 = 75,
        A2B10G10R10_UIntPack32 = 76,
        A2B10G10R10_SIntPack32 = 77,
        A2R10G10B10_UNormPack32 = 78,
        A2R10G10B10_UIntPack32 = 79,
        A2R10G10B10_SIntPack32 = 80,
        A2R10G10B10_XRSRGBPack32 = 81,
        A2R10G10B10_XRUNormPack32 = 82,
        R10G10B10_XRSRGBPack32 = 83,
        R10G10B10_XRUNormPack32 = 84,
        A10R10G10B10_XRSRGBPack32 = 85,
        A10R10G10B10_XRUNormPack32 = 86,
        RGB_DXT1_SRGB = 96,
        RGBA_DXT1_SRGB = 96,
        RGB_DXT1_UNorm = 97,
        RGBA_DXT1_UNorm = 97,
        RGBA_DXT3_SRGB = 98,
        RGBA_DXT3_UNorm = 99,
        RGBA_DXT5_SRGB = 100,
        RGBA_DXT5_UNorm = 101,
        R_BC4_UNorm = 102,
        R_BC4_SNorm = 103,
        RG_BC5_UNorm = 104,
        RG_BC5_SNorm = 105,
        RGB_BC6H_UFloat = 106,
        RGB_BC6H_SFloat = 107,
        RGBA_BC7_SRGB = 108,
        RGBA_BC7_UNorm = 109,
        RGB_PVRTC_2Bpp_SRGB = 110,
        RGB_PVRTC_2Bpp_UNorm = 111,
        RGB_PVRTC_4Bpp_SRGB = 112,
        RGB_PVRTC_4Bpp_UNorm = 113,
        RGBA_PVRTC_2Bpp_SRGB = 114,
        RGBA_PVRTC_2Bpp_UNorm = 115,
        RGBA_PVRTC_4Bpp_SRGB = 116,
        RGBA_PVRTC_4Bpp_UNorm = 117,
        RGB_ETC_UNorm = 118,
        RGB_ETC2_SRGB = 119,
        RGB_ETC2_UNorm = 120,
        RGB_A1_ETC2_SRGB = 121,
        RGB_A1_ETC2_UNorm = 122,
        RGBA_ETC2_SRGB = 123,
        RGBA_ETC2_UNorm = 124,
        R_EAC_UNorm = 125,
        R_EAC_SNorm = 126,
        RG_EAC_UNorm = 127,
        RG_EAC_SNorm = 128,
        RGBA_ASTC4X4_SRGB = 129,
        RGBA_ASTC4X4_UNorm = 130,
        RGBA_ASTC5X5_SRGB = 131,
        RGBA_ASTC5X5_UNorm = 132,
        RGBA_ASTC6X6_SRGB = 133,
        RGBA_ASTC6X6_UNorm = 134,
        RGBA_ASTC8X8_SRGB = 135,
        RGBA_ASTC8X8_UNorm = 136,
        RGBA_ASTC10X10_SRGB = 137,
        RGBA_ASTC10X10_UNorm = 138,
        RGBA_ASTC12X12_SRGB = 139,
        RGBA_ASTC12X12_UNorm = 140,
        RGBA_ASTC4X4_UFloat = 145,
        RGBA_ASTC5X5_UFloat = 146,
        RGBA_ASTC6X6_UFloat = 147,
        RGBA_ASTC8X8_UFloat = 148,
        RGBA_ASTC10X10_UFloat = 149,
        RGBA_ASTC12X12_UFloat = 150,
      }
      export enum RayTracingMode {
        Off = 0,
        Static = 1,
        DynamicTransform = 2,
        DynamicGeometry = 3,
      }
      export declare class GraphicsFormatUtility {
        constructor();
        static GetGraphicsFormat: ((format: UnityEngine.TextureFormat, isSRGB: boolean) => UnityEngine.Experimental.Rendering.GraphicsFormat) | ((format: UnityEngine.RenderTextureFormat, isSRGB: boolean) => UnityEngine.Experimental.Rendering.GraphicsFormat) | ((format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite) => UnityEngine.Experimental.Rendering.GraphicsFormat);
        static GetTextureFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.TextureFormat);
        static IsSRGBFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsSwizzleFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static GetSRGBFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Experimental.Rendering.GraphicsFormat);
        static GetLinearFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Experimental.Rendering.GraphicsFormat);
        static GetRenderTextureFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.RenderTextureFormat);
        static GetColorComponentCount: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        static GetAlphaComponentCount: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        static GetComponentCount: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        static GetFormatString: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => string);
        static IsCompressedFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsPackedFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static Is16BitPackedFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static ConvertToAlphaFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Experimental.Rendering.GraphicsFormat);
        static IsAlphaOnlyFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsAlphaTestFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static HasAlphaChannel: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsDepthFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsStencilFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsIEEE754Format: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsFloatFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsHalfFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsUnsignedFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsSignedFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsNormFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsUNormFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsSNormFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsIntegerFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsUIntFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsSIntFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsXRFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsDXTCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsRGTCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsBPTCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsBCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsPVRTCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsETCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsEACFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsASTCFormat: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => boolean);
        static IsCrunchFormat: ((format: UnityEngine.TextureFormat) => boolean);
        static GetSwizzleR: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Rendering.FormatSwizzle);
        static GetSwizzleG: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Rendering.FormatSwizzle);
        static GetSwizzleB: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Rendering.FormatSwizzle);
        static GetSwizzleA: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => UnityEngine.Rendering.FormatSwizzle);
        static GetBlockSize: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        static GetBlockWidth: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        static GetBlockHeight: ((format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        static ComputeMipmapSize: ((width: number, height: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32) | ((width: number, height: number, depth: number, format: UnityEngine.Experimental.Rendering.GraphicsFormat) => System.UInt32);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class RayTracingAccelerationStructure {
        constructor(settings: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure_RASSettings);
        constructor();
        Dispose: (() => void);
        Release: (() => void);
        Build: (() => void) | ((relativeOrigin: UnityEngine.Vector3) => void);
        Update: (() => void) | ((relativeOrigin: UnityEngine.Vector3) => void);
        AddInstance: ((targetRenderer: UnityEngine.Renderer, subMeshMask?: boolean[], subMeshTransparencyFlags?: boolean[], enableTriangleCulling?: boolean, frontTriangleCounterClockwise?: boolean, mask?: System.UInt32) => void) | ((aabbBuffer: UnityEngine.GraphicsBuffer, numElements: System.UInt32, material: UnityEngine.Material, isCutOff: boolean, enableTriangleCulling?: boolean, frontTriangleCounterClockwise?: boolean, mask?: System.UInt32, reuseBounds?: boolean) => void) | ((aabbBuffer: UnityEngine.GraphicsBuffer, numElements: System.UInt32, material: UnityEngine.Material, instanceTransform: UnityEngine.Matrix4x4, isCutOff: boolean, enableTriangleCulling?: boolean, frontTriangleCounterClockwise?: boolean, mask?: System.UInt32, reuseBounds?: boolean) => void);
        UpdateInstanceTransform: ((renderer: UnityEngine.Renderer) => void);
        GetSize: (() => System.UInt64);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum RayTracingAccelerationStructure_RayTracingModeMask {
        Nothing = 0,
        Static = 2,
        DynamicTransform = 4,
        DynamicGeometry = 8,
        Everything = 14,
      }
      export enum RayTracingAccelerationStructure_ManagementMode {
        Manual = 0,
        Automatic = 1,
      }
      export declare class RayTracingAccelerationStructure_RASSettings {
        constructor(sceneManagementMode: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure_ManagementMode, rayTracingModeMask: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure_RayTracingModeMask, layerMask: number);
        managementMode: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure_ManagementMode;
        rayTracingModeMask: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure_RayTracingModeMask;
        layerMask: number;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class ShaderWarmupSetup {
        vdecl: UnityEngine.Rendering.VertexAttributeDescriptor[];
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class ShaderWarmup {
        static WarmupShader: ((shader: UnityEngine.Shader, setup: UnityEngine.Experimental.Rendering.ShaderWarmupSetup) => void);
        static WarmupShaderFromCollection: ((collection: UnityEngine.ShaderVariantCollection, shader: UnityEngine.Shader, setup: UnityEngine.Experimental.Rendering.ShaderWarmupSetup) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class RayTracingShader {
        maxRecursionDepth: number;
        name: string;
        hideFlags: UnityEngine.HideFlags;
        SetFloat: ((nameID: number, val: number) => void) | ((name: string, val: number) => void);
        SetInt: ((nameID: number, val: number) => void) | ((name: string, val: number) => void);
        SetVector: ((nameID: number, val: UnityEngine.Vector4) => void) | ((name: string, val: UnityEngine.Vector4) => void);
        SetMatrix: ((nameID: number, val: UnityEngine.Matrix4x4) => void) | ((name: string, val: UnityEngine.Matrix4x4) => void);
        SetVectorArray: ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((name: string, values: UnityEngine.Vector4[]) => void);
        SetMatrixArray: ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((name: string, values: UnityEngine.Matrix4x4[]) => void);
        SetTexture: ((nameID: number, texture: UnityEngine.Texture) => void) | ((name: string, texture: UnityEngine.Texture) => void);
        SetBuffer: ((nameID: number, buffer: UnityEngine.ComputeBuffer) => void) | ((nameID: number, buffer: UnityEngine.GraphicsBuffer) => void) | ((name: string, buffer: UnityEngine.ComputeBuffer) => void) | ((name: string, buffer: UnityEngine.GraphicsBuffer) => void);
        SetAccelerationStructure: ((nameID: number, accelerationStructure: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure) => void) | ((name: string, accelerationStructure: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure) => void);
        SetShaderPass: ((passName: string) => void);
        SetTextureFromGlobal: ((nameID: number, globalTextureNameID: number) => void) | ((name: string, globalTextureName: string) => void);
        Dispatch: ((rayGenFunctionName: string, width: number, height: number, depth: number, camera?: UnityEngine.Camera) => void);
        SetFloats: ((name: string, ...values: number[]) => void) | ((nameID: number, ...values: number[]) => void);
        SetInts: ((name: string, ...values: number[]) => void) | ((nameID: number, ...values: number[]) => void);
        SetBool: ((name: string, val: boolean) => void) | ((nameID: number, val: boolean) => void);
        SetConstantBuffer: ((nameID: number, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((name: string, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((nameID: number, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((name: string, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
        GetInstanceID: (() => number);
        GetHashCode: (() => number);
        Equals: ((other: System.Object) => boolean);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
    }
    export namespace Video {
      export declare class VideoClipPlayable {
        static Create: ((graph: UnityEngine.Playables.PlayableGraph, clip: UnityEngine.Video.VideoClip, looping: boolean) => UnityEngine.Experimental.Video.VideoClipPlayable);
        GetHandle: (() => UnityEngine.Playables.PlayableHandle);
        Equals: ((other: UnityEngine.Experimental.Video.VideoClipPlayable) => boolean) | ((obj: System.Object) => boolean);
        GetClip: (() => UnityEngine.Video.VideoClip);
        SetClip: ((value: UnityEngine.Video.VideoClip) => void);
        GetLooped: (() => boolean);
        SetLooped: ((value: boolean) => void);
        IsPlaying: (() => boolean);
        GetStartDelay: (() => number);
        GetPauseDelay: (() => number);
        Seek: ((startTime: number, startDelay: number) => void) | ((startTime: number, startDelay: number, duration: number) => void);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class VideoPlayerExtensions {
        static GetAudioSampleProvider: ((vp: UnityEngine.Video.VideoPlayer, trackIndex: System.UInt16) => UnityEngine.Experimental.Audio.AudioSampleProvider);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
  }
  export namespace iOS {
    export declare class ADBannerView {
      constructor(type: UnityEngine.iOS.ADBannerView_Type, layout: UnityEngine.iOS.ADBannerView_Layout);
      loaded: boolean;
      visible: boolean;
      layout: UnityEngine.iOS.ADBannerView_Layout;
      position: UnityEngine.Vector2;
      size: UnityEngine.Vector2;
      static IsAvailable: ((type: UnityEngine.iOS.ADBannerView_Type) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum ADBannerView_Layout {
      Top = 0,
      Bottom = 1,
      TopLeft = 0,
      TopRight = 4,
      TopCenter = 8,
      BottomLeft = 1,
      BottomRight = 5,
      BottomCenter = 9,
      CenterLeft = 2,
      CenterRight = 6,
      Center = 10,
      Manual = -1,
    }
    export enum ADBannerView_Type {
      Banner = 0,
      MediumRect = 1,
    }
    export declare class ADBannerView_BannerWasClickedDelegate {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ADBannerView_BannerWasLoadedDelegate {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ADBannerView_BannerFailedToLoadDelegate {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ADInterstitialAd {
      constructor(autoReload: boolean);
      constructor();
      static isAvailable: boolean;
      loaded: boolean;
      Show: (() => void);
      ReloadAd: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ADInterstitialAd_InterstitialWasLoadedDelegate {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ADInterstitialAd_InterstitialWasViewedDelegate {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum DeviceGeneration {
      Unknown = 0,
      iPhone = 1,
      iPhone3G = 2,
      iPhone3GS = 3,
      iPodTouch1Gen = 4,
      iPodTouch2Gen = 5,
      iPodTouch3Gen = 6,
      iPad1Gen = 7,
      iPhone4 = 8,
      iPodTouch4Gen = 9,
      iPad2Gen = 10,
      iPhone4S = 11,
      iPad3Gen = 12,
      iPhone5 = 13,
      iPodTouch5Gen = 14,
      iPadMini1Gen = 15,
      iPad4Gen = 16,
      iPhone5C = 17,
      iPhone5S = 18,
      iPadAir1 = 19,
      iPadMini2Gen = 20,
      iPhone6 = 21,
      iPhone6Plus = 22,
      iPadMini3Gen = 23,
      iPadAir2 = 24,
      iPhone6S = 25,
      iPhone6SPlus = 26,
      iPadPro1Gen = 27,
      iPadMini4Gen = 28,
      iPhoneSE1Gen = 29,
      iPadPro10Inch1Gen = 30,
      iPhone7 = 31,
      iPhone7Plus = 32,
      iPodTouch6Gen = 33,
      iPad5Gen = 34,
      iPadPro2Gen = 35,
      iPadPro10Inch2Gen = 36,
      iPhone8 = 37,
      iPhone8Plus = 38,
      iPhoneX = 39,
      iPhoneXS = 40,
      iPhoneXSMax = 41,
      iPhoneXR = 42,
      iPadPro11Inch = 43,
      iPadPro3Gen = 44,
      iPad6Gen = 45,
      iPadAir3Gen = 46,
      iPadMini5Gen = 47,
      iPhone11 = 48,
      iPhone11Pro = 49,
      iPhone11ProMax = 50,
      iPodTouch7Gen = 51,
      iPad7Gen = 52,
      iPhoneSE2Gen = 53,
      iPadPro11Inch2Gen = 54,
      iPadPro4Gen = 55,
      iPhoneUnknown = 10001,
      iPadUnknown = 10002,
      iPodTouchUnknown = 10003,
    }
    export enum ActivityIndicatorStyle {
      DontShow = -1,
      WhiteLarge = 0,
      White = 1,
      Gray = 2,
    }
    export declare class Device {
      constructor();
      static systemVersion: string;
      static generation: UnityEngine.iOS.DeviceGeneration;
      static vendorIdentifier: string;
      static advertisingIdentifier: string;
      static advertisingTrackingEnabled: boolean;
      static hideHomeButton: boolean;
      static lowPowerModeEnabled: boolean;
      static wantsSoftwareDimming: boolean;
      static deferSystemGesturesMode: UnityEngine.iOS.SystemGestureDeferMode;
      static SetNoBackupFlag: ((path: string) => void);
      static ResetNoBackupFlag: ((path: string) => void);
      static RequestStoreReview: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum CalendarIdentifier {
      GregorianCalendar = 0,
      BuddhistCalendar = 1,
      ChineseCalendar = 2,
      HebrewCalendar = 3,
      IslamicCalendar = 4,
      IslamicCivilCalendar = 5,
      JapaneseCalendar = 6,
      RepublicOfChinaCalendar = 7,
      PersianCalendar = 8,
      IndianCalendar = 9,
      ISO8601Calendar = 10,
    }
    export enum CalendarUnit {
      Era = 2,
      Year = 4,
      Month = 8,
      Day = 16,
      Hour = 32,
      Minute = 64,
      Second = 128,
      Week = 256,
      Weekday = 512,
      WeekdayOrdinal = 1024,
      Quarter = 2048,
    }
    export enum NotificationType {
      None = 0,
      Badge = 1,
      Sound = 2,
      Alert = 4,
    }
    export declare class LocalNotification {
      constructor();
      timeZone: string;
      repeatCalendar: UnityEngine.iOS.CalendarIdentifier;
      repeatInterval: UnityEngine.iOS.CalendarUnit;
      fireDate: System.DateTime;
      alertBody: string;
      alertTitle: string;
      alertAction: string;
      alertLaunchImage: string;
      soundName: string;
      applicationIconBadgeNumber: number;
      static defaultSoundName: string;
      userInfo: System.Collections.IDictionary;
      hasAction: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class RemoteNotification {
      alertBody: string;
      alertTitle: string;
      soundName: string;
      applicationIconBadgeNumber: number;
      userInfo: System.Collections.IDictionary;
      hasAction: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class NotificationServices {
      constructor();
      static localNotificationCount: number;
      static remoteNotificationCount: number;
      static enabledNotificationTypes: UnityEngine.iOS.NotificationType;
      static registrationError: string;
      static deviceToken: System.Byte[];
      static localNotifications: UnityEngine.iOS.LocalNotification[];
      static remoteNotifications: UnityEngine.iOS.RemoteNotification[];
      static scheduledLocalNotifications: UnityEngine.iOS.LocalNotification[];
      static ClearLocalNotifications: (() => void);
      static ClearRemoteNotifications: (() => void);
      static RegisterForNotifications: ((notificationTypes: UnityEngine.iOS.NotificationType) => void) | ((notificationTypes: UnityEngine.iOS.NotificationType, registerForRemote: boolean) => void);
      static ScheduleLocalNotification: ((notification: UnityEngine.iOS.LocalNotification) => void);
      static PresentLocalNotificationNow: ((notification: UnityEngine.iOS.LocalNotification) => void);
      static CancelLocalNotification: ((notification: UnityEngine.iOS.LocalNotification) => void);
      static CancelAllLocalNotifications: (() => void);
      static UnregisterForRemoteNotifications: (() => void);
      static GetLocalNotification: ((index: number) => UnityEngine.iOS.LocalNotification);
      static GetRemoteNotification: ((index: number) => UnityEngine.iOS.RemoteNotification);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum SystemGestureDeferMode {
      None = 0,
      TopEdge = 1,
      LeftEdge = 2,
      BottomEdge = 4,
      RightEdge = 8,
      All = 15,
    }
    export declare class OnDemandResourcesRequest {
      error: string;
      loadingPriority: number;
      isDone: boolean;
      progress: number;
      priority: number;
      allowSceneActivation: boolean;
      GetResourcePath: ((resourceName: string) => string);
      Dispose: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class OnDemandResources {
      static enabled: boolean;
      static PreloadAsync: ((tags: string[]) => UnityEngine.iOS.OnDemandResourcesRequest);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace Jobs {
    export interface IJobParallelForTransform {
      Execute: ((index: number, transform: UnityEngine.Jobs.TransformAccess) => void);
    }
    export declare class IJobParallelForTransformExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TransformAccess {
      position: UnityEngine.Vector3;
      rotation: UnityEngine.Quaternion;
      localPosition: UnityEngine.Vector3;
      localRotation: UnityEngine.Quaternion;
      localScale: UnityEngine.Vector3;
      localToWorldMatrix: UnityEngine.Matrix4x4;
      worldToLocalMatrix: UnityEngine.Matrix4x4;
      isValid: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class TransformAccessArray {
      constructor(transforms: UnityEngine.Transform[], desiredJobCount?: number);
      constructor(capacity: number, desiredJobCount?: number);
      isCreated: boolean;
      capacity: number;
      length: number;
      Dispose: (() => void);
      Add: ((transform: UnityEngine.Transform) => void);
      RemoveAtSwapBack: ((index: number) => void);
      SetTransforms: ((transforms: UnityEngine.Transform[]) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace LowLevel {
    export declare class PlayerLoopSystem {
      type: System.Type;
      subSystemList: UnityEngine.LowLevel.PlayerLoopSystem[];
      updateDelegate: UnityEngine.LowLevel.PlayerLoopSystem_UpdateFunction;
      updateFunction: System.IntPtr;
      loopConditionFunction: System.IntPtr;
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class PlayerLoopSystem_UpdateFunction {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PlayerLoop {
      constructor();
      static GetDefaultPlayerLoop: (() => UnityEngine.LowLevel.PlayerLoopSystem);
      static GetCurrentPlayerLoop: (() => UnityEngine.LowLevel.PlayerLoopSystem);
      static SetPlayerLoop: ((loop: UnityEngine.LowLevel.PlayerLoopSystem) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace Networking {
    export namespace PlayerConnection {
      export enum ConnectionTarget {
        None = 0,
        Player = 1,
        Editor = 2,
      }
      export interface IConnectionState {
        connectedToTarget: UnityEngine.Networking.PlayerConnection.ConnectionTarget;
        connectionName: string;
      }
      export declare class MessageEventArgs {
        constructor();
        playerId: number;
        data: System.Byte[];
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export interface IEditorPlayerConnection {
        Register: ((messageId: System.Guid, callback: UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs>) => void);
        Unregister: ((messageId: System.Guid, callback: UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs>) => void);
        DisconnectAll: (() => void);
        RegisterConnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        RegisterDisconnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        UnregisterConnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        UnregisterDisconnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        Send: ((messageId: System.Guid, data: System.Byte[]) => void);
        TrySend: ((messageId: System.Guid, data: System.Byte[]) => boolean);
      }
      export declare class PlayerConnection {
        constructor();
        static instance: UnityEngine.Networking.PlayerConnection.PlayerConnection;
        isConnected: boolean;
        name: string;
        hideFlags: UnityEngine.HideFlags;
        OnEnable: (() => void);
        Register: ((messageId: System.Guid, callback: UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs>) => void);
        Unregister: ((messageId: System.Guid, callback: UnityEngine.Events.UnityAction<UnityEngine.Networking.PlayerConnection.MessageEventArgs>) => void);
        RegisterConnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        RegisterDisconnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        UnregisterConnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        UnregisterDisconnection: ((callback: UnityEngine.Events.UnityAction<number>) => void);
        Send: ((messageId: System.Guid, data: System.Byte[]) => void);
        TrySend: ((messageId: System.Guid, data: System.Byte[]) => boolean);
        BlockUntilRecvMsg: ((messageId: System.Guid, timeout: number) => boolean);
        DisconnectAll: (() => void);
        SetDirty: (() => void);
        GetInstanceID: (() => number);
        GetHashCode: (() => number);
        Equals: ((other: System.Object) => boolean);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
    }
  }
  export namespace Playables {
    export declare class FrameData {
      frameId: System.UInt64;
      deltaTime: number;
      weight: number;
      effectiveWeight: number;
      effectiveParentDelay: number;
      effectiveParentSpeed: number;
      effectiveSpeed: number;
      evaluationType: UnityEngine.Playables.FrameData_EvaluationType;
      seekOccurred: boolean;
      timeLooped: boolean;
      timeHeld: boolean;
      output: UnityEngine.Playables.PlayableOutput;
      effectivePlayState: UnityEngine.Playables.PlayState;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum FrameData_EvaluationType {
      Evaluate = 0,
      Playback = 1,
    }
    export interface INotification {
      id: UnityEngine.PropertyName;
    }
    export interface INotificationReceiver {
      OnNotify: ((origin: UnityEngine.Playables.Playable, notification: UnityEngine.Playables.INotification, context: System.Object) => void);
    }
    export interface IPlayable {
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
    }
    export interface IPlayableBehaviour {
      OnGraphStart: ((playable: UnityEngine.Playables.Playable) => void);
      OnGraphStop: ((playable: UnityEngine.Playables.Playable) => void);
      OnPlayableCreate: ((playable: UnityEngine.Playables.Playable) => void);
      OnPlayableDestroy: ((playable: UnityEngine.Playables.Playable) => void);
      OnBehaviourPlay: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      OnBehaviourPause: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      PrepareFrame: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      ProcessFrame: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: System.Object) => void);
    }
    export interface IPlayableOutput {
      GetHandle: (() => UnityEngine.Playables.PlayableOutputHandle);
    }
    export declare class Notification {
      constructor(name: string);
      id: UnityEngine.PropertyName;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum DirectorWrapMode {
      Hold = 0,
      Loop = 1,
      None = 2,
    }
    export declare class Playable {
      static Null: UnityEngine.Playables.Playable;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, inputCount?: number) => UnityEngine.Playables.Playable);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      GetPlayableType: (() => System.Type);
      Equals: ((other: UnityEngine.Playables.Playable) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface IPlayableAsset {
      duration: number;
      outputs: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>;
      CreatePlayable: ((graph: UnityEngine.Playables.PlayableGraph, owner: UnityEngine.GameObject) => UnityEngine.Playables.Playable);
    }
    export declare class PlayableAsset {
      duration: number;
      outputs: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CreatePlayable: ((graph: UnityEngine.Playables.PlayableGraph, owner: UnityEngine.GameObject) => UnityEngine.Playables.Playable);
      SetDirty: (() => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PlayableBehaviour {
      constructor();
      OnGraphStart: ((playable: UnityEngine.Playables.Playable) => void);
      OnGraphStop: ((playable: UnityEngine.Playables.Playable) => void);
      OnPlayableCreate: ((playable: UnityEngine.Playables.Playable) => void);
      OnPlayableDestroy: ((playable: UnityEngine.Playables.Playable) => void);
      OnBehaviourDelay: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      OnBehaviourPlay: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      OnBehaviourPause: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      PrepareData: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      PrepareFrame: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData) => void);
      ProcessFrame: ((playable: UnityEngine.Playables.Playable, info: UnityEngine.Playables.FrameData, playerData: System.Object) => void);
      Clone: (() => System.Object);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum DataStreamType {
      Animation = 0,
      Audio = 1,
      Texture = 2,
      None = 3,
    }
    export declare class PlayableBinding {
      streamName: string;
      sourceObject: UnityEngine.Object;
      outputTargetType: System.Type;
      sourceBindingType: System.Type;
      streamType: UnityEngine.Playables.DataStreamType;
      static None: UnityEngine.Playables.PlayableBinding[];
      static DefaultDuration: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum PlayableTraversalMode {
      Mix = 0,
      Passthrough = 1,
    }
    export declare class PlayableExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum DirectorUpdateMode {
      DSPClock = 0,
      GameTime = 1,
      UnscaledGameTime = 2,
      Manual = 3,
    }
    export declare class PlayableGraph {
      GetRootPlayable: ((index: number) => UnityEngine.Playables.Playable);
      GetOutput: ((index: number) => UnityEngine.Playables.PlayableOutput);
      Evaluate: (() => void) | ((deltaTime: number) => void);
      static Create: (() => UnityEngine.Playables.PlayableGraph) | ((name: string) => UnityEngine.Playables.PlayableGraph);
      Destroy: (() => void);
      IsValid: (() => boolean);
      IsPlaying: (() => boolean);
      IsDone: (() => boolean);
      Play: (() => void);
      Stop: (() => void);
      GetTimeUpdateMode: (() => UnityEngine.Playables.DirectorUpdateMode);
      SetTimeUpdateMode: ((value: UnityEngine.Playables.DirectorUpdateMode) => void);
      GetResolver: (() => UnityEngine.IExposedPropertyTable);
      SetResolver: ((value: UnityEngine.IExposedPropertyTable) => void);
      GetPlayableCount: (() => number);
      GetRootPlayableCount: (() => number);
      GetOutputCount: (() => number);
      GetEditorName: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum PlayState {
      Paused = 0,
      Playing = 1,
      Delayed = 2,
    }
    export declare class PlayableHandle {
      static Null: UnityEngine.Playables.PlayableHandle;
      Equals: ((p: System.Object) => boolean) | ((other: UnityEngine.Playables.PlayableHandle) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PlayableOutput {
      static Null: UnityEngine.Playables.PlayableOutput;
      GetHandle: (() => UnityEngine.Playables.PlayableOutputHandle);
      GetPlayableOutputType: (() => System.Type);
      Equals: ((other: UnityEngine.Playables.PlayableOutput) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PlayableOutputExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PlayableOutputHandle {
      static Null: UnityEngine.Playables.PlayableOutputHandle;
      GetHashCode: (() => number);
      Equals: ((p: System.Object) => boolean) | ((other: UnityEngine.Playables.PlayableOutputHandle) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScriptPlayable<T = any> {
      static Null: any; // UnityEngine.Playables.ScriptPlayable`1[T]
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, inputCount?: number) => any) | ((graph: UnityEngine.Playables.PlayableGraph, template: any, inputCount?: number) => any);
      GetHandle: (() => UnityEngine.Playables.PlayableHandle);
      GetBehaviour: (() => T);
      Equals: ((other: UnityEngine.Playables.ScriptPlayable<T>) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScriptPlayableBinding {
      static Create: ((name: string, key: UnityEngine.Object, type: System.Type) => UnityEngine.Playables.PlayableBinding);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ScriptPlayableOutput {
      static Null: UnityEngine.Playables.ScriptPlayableOutput;
      static Create: ((graph: UnityEngine.Playables.PlayableGraph, name: string) => UnityEngine.Playables.ScriptPlayableOutput);
      GetHandle: (() => UnityEngine.Playables.PlayableOutputHandle);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AnimationPlayableUtilities {
      static Play: ((animator: UnityEngine.Animator, playable: UnityEngine.Playables.Playable, graph: UnityEngine.Playables.PlayableGraph) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace PlayerLoop {
    export declare class TimeUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class TimeUpdate_WaitForLastPresentationAndUpdateTime {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_PlayerUpdateTime {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_UpdateCameraMotionVectors {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_DirectorSampleTime {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_AsyncUploadTimeSlicedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_SynchronizeState {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_SynchronizeInputs {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Initialization_XREarlyUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_PollPlayerConnection {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ProfilerStartFrame {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_PollHtcsPlayerConnection {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_GpuTimestamp {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_AnalyticsCoreStatsUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UnityWebRequestUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateStreamingManager {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ExecuteMainThreadJobs {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ProcessMouseInWindow {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ClearIntermediateRenderers {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ClearLines {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_PresentBeforeUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ResetFrameStatsAfterPresent {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateAsyncReadbackManager {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateTextureStreamingManager {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdatePreloading {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_RendererNotifyInvisible {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_PlayerCleanupCachedData {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateMainGameViewRect {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateCanvasRectTransform {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateInputManager {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ProcessRemoteInput {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_XRUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ScriptRunDelayedStartupFrame {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_UpdateKinect {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_DeliverIosPlatformEvents {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_DispatchEventQueueEvents {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_PhysicsResetInterpolatedTransformPosition {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_SpriteAtlasManagerUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_TangoUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_ARCoreUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EarlyUpdate_PerformanceAnalyticsUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_ClearLines {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_DirectorFixedSampleTime {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_AudioFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_ScriptRunBehaviourFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_DirectorFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_LegacyFixedAnimationUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_XRFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_PhysicsFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_Physics2DFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_DirectorFixedUpdatePostPhysics {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_ScriptRunDelayedFixedFrameRate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FixedUpdate_NewInputFixedUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_PhysicsUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_Physics2DUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_CheckTexFieldInput {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_IMGUISendQueuedEvents {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_SendMouseEvents {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_AIUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_WindUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_UpdateVideo {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreUpdate_NewInputUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Update {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Update_ScriptRunBehaviourUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Update_DirectorUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Update_ScriptRunDelayedDynamicFrameRate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Update_ScriptRunDelayedTasks {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_AIUpdatePostScript {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_DirectorUpdateAnimationBegin {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_LegacyAnimationUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_DirectorUpdateAnimationEnd {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_DirectorDeferredEvaluate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_UIElementsUpdatePanels {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_UpdateNetworkManager {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_UpdateMasterServerInterface {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_UNetUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_EndGraphicsJobsAfterScriptUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_ParticleSystemBeginUpdateAll {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_ScriptRunBehaviourLateUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PreLateUpdate_ConstraintManagerUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PlayerSendFrameStarted {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateRectTransform {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateCanvasRectTransform {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PlayerUpdateCanvases {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateAudio {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateVideo {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_DirectorLateUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ScriptRunDelayedDynamicFrameRate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_VFXUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ParticleSystemEndUpdateAll {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_EndGraphicsJobsAfterScriptLateUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateSubstance {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateCustomRenderTextures {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateAllRenderers {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateLightProbeProxyVolumes {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_EnlightenRuntimeUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateAllSkinnedMeshes {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ProcessWebSendMessages {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_SortingGroupsUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateVideoTextures {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_DirectorRenderImage {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PlayerEmitCanvasGeometry {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_FinishFrameRendering {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_BatchModeUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PlayerSendFrameComplete {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateCaptureScreenshot {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PresentAfterDraw {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ClearImmediateRenderers {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_XRPostPresent {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_UpdateResolution {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_InputEndFrame {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_GUIClearEvents {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ShaderHandleErrors {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ResetInputAxis {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ThreadedLoadingDebug {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ProfilerSynchronizeStats {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_MemoryFrameMaintenance {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ExecuteGameCenterCallbacks {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_ProfilerEndFrame {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PlayerSendFramePostPresent {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PhysicsSkinnedClothBeginUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_PhysicsSkinnedClothFinishUpdate {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PostLateUpdate_TriggerEndOfFrameCallbacks {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace Profiling {
    export enum ProfilerArea {
      CPU = 0,
      GPU = 1,
      Rendering = 2,
      Memory = 3,
      Audio = 4,
      Video = 5,
      Physics = 6,
      Physics2D = 7,
      NetworkMessages = 8,
      NetworkOperations = 9,
      UI = 10,
      UIDetails = 11,
      GlobalIllumination = 12,
      VirtualTexturing = 13,
    }
    export declare class Profiler {
      static supported: boolean;
      static logFile: string;
      static enableBinaryLog: boolean;
      static maxUsedMemory: number;
      static enabled: boolean;
      static enableAllocationCallstacks: boolean;
      static areaCount: number;
      static maxNumberOfSamplesPerFrame: number;
      static usedHeapSize: System.UInt32;
      static usedHeapSizeLong: System.Int64;
      static SetAreaEnabled: ((area: UnityEngine.Profiling.ProfilerArea, enabled: boolean) => void);
      static GetAreaEnabled: ((area: UnityEngine.Profiling.ProfilerArea) => boolean);
      static AddFramesFromFile: ((file: string) => void);
      static BeginThreadProfiling: ((threadGroupName: string, threadName: string) => void);
      static EndThreadProfiling: (() => void);
      static BeginSample: ((name: string) => void) | ((name: string, targetObject: UnityEngine.Object) => void);
      static EndSample: (() => void);
      static GetRuntimeMemorySize: ((o: UnityEngine.Object) => number);
      static GetRuntimeMemorySizeLong: ((o: UnityEngine.Object) => System.Int64);
      static GetMonoHeapSize: (() => System.UInt32);
      static GetMonoHeapSizeLong: (() => System.Int64);
      static GetMonoUsedSize: (() => System.UInt32);
      static GetMonoUsedSizeLong: (() => System.Int64);
      static SetTempAllocatorRequestedSize: ((size: System.UInt32) => boolean);
      static GetTempAllocatorSize: (() => System.UInt32);
      static GetTotalAllocatedMemory: (() => System.UInt32);
      static GetTotalAllocatedMemoryLong: (() => System.Int64);
      static GetTotalUnusedReservedMemory: (() => System.UInt32);
      static GetTotalUnusedReservedMemoryLong: (() => System.Int64);
      static GetTotalReservedMemory: (() => System.UInt32);
      static GetTotalReservedMemoryLong: (() => System.Int64);
      static GetTotalFragmentationInfo: ((stats: any) => System.Int64);
      static GetAllocatedMemoryForGraphicsDriver: (() => System.Int64);
      static EmitFrameMetaData: ((id: System.Guid, tag: number, data: System.Array) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Recorder {
      isValid: boolean;
      enabled: boolean;
      elapsedNanoseconds: System.Int64;
      gpuElapsedNanoseconds: System.Int64;
      sampleBlockCount: number;
      gpuSampleBlockCount: number;
      static Get: ((samplerName: string) => UnityEngine.Profiling.Recorder);
      FilterToCurrentThread: (() => void);
      CollectFromAllThreads: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Sampler {
      isValid: boolean;
      name: string;
      GetRecorder: (() => UnityEngine.Profiling.Recorder);
      static Get: ((name: string) => UnityEngine.Profiling.Sampler);
      static GetNames: ((names: string[]) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class CustomSampler {
      isValid: boolean;
      name: string;
      static Create: ((name: string, collectGpuData?: boolean) => UnityEngine.Profiling.CustomSampler);
      Begin: (() => void) | ((targetObject: UnityEngine.Object) => void);
      End: (() => void);
      GetRecorder: (() => UnityEngine.Profiling.Recorder);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export namespace Experimental {
      export declare class DebugScreenCapture {
        rawImageDataReference: Unity.Collections.NativeArray<System.Byte>;
        imageFormat: UnityEngine.TextureFormat;
        width: number;
        height: number;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
    }
    export namespace Memory {
      export namespace Experimental {
        export enum CaptureFlags {
          ManagedObjects = 1,
          NativeObjects = 2,
          NativeAllocations = 4,
          NativeAllocationSites = 8,
          NativeStackTraces = 16,
        }
        export declare class MetaData {
          constructor();
          content: string;
          platform: string;
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
        export declare class MemoryProfiler {
          constructor();
          static TakeSnapshot: ((path: string, finishCallback: any, captureFlags?: UnityEngine.Profiling.Memory.Experimental.CaptureFlags) => void) | ((path: string, finishCallback: any, screenshotCallback: any, captureFlags?: UnityEngine.Profiling.Memory.Experimental.CaptureFlags) => void);
          static TakeTempSnapshot: ((finishCallback: any, captureFlags?: UnityEngine.Profiling.Memory.Experimental.CaptureFlags) => void);
          Equals: ((obj: System.Object) => boolean);
          GetHashCode: (() => number);
          GetType: (() => System.Type);
          ToString: (() => string);
        }
      }
    }
  }
  export namespace Rendering {
    export declare class AsyncGPUReadbackRequest {
      done: boolean;
      hasError: boolean;
      layerCount: number;
      layerDataSize: number;
      width: number;
      height: number;
      depth: number;
      Update: (() => void);
      WaitForCompletion: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AsyncGPUReadback {
      static WaitAllRequests: (() => void);
      static Request: ((src: UnityEngine.ComputeBuffer, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.ComputeBuffer, size: number, offset: number, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.GraphicsBuffer, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.GraphicsBuffer, size: number, offset: number, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.Texture, mipIndex?: number, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.Texture, mipIndex: number, dstFormat: UnityEngine.TextureFormat, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.Texture, mipIndex: number, dstFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: UnityEngine.TextureFormat, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest) | ((src: UnityEngine.Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, callback?: any) => UnityEngine.Rendering.AsyncGPUReadbackRequest);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum SynchronisationStage {
      VertexProcessing = 0,
      PixelProcessing = 1,
    }
    export declare class GPUFence {
      passed: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PIX {
      constructor();
      static BeginGPUCapture: (() => void);
      static EndGPUCapture: (() => void);
      static IsAttached: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum ShaderHardwareTier {
      Tier1 = 0,
      Tier2 = 1,
      Tier3 = 2,
    }
    export enum IndexFormat {
      UInt16 = 0,
      UInt32 = 1,
    }
    export enum MeshUpdateFlags {
      Default = 0,
      DontValidateIndices = 1,
      DontResetBoneBounds = 2,
      DontNotifyMeshUsers = 4,
      DontRecalculateBounds = 8,
    }
    export enum VertexAttributeFormat {
      Float32 = 0,
      Float16 = 1,
      UNorm8 = 2,
      SNorm8 = 3,
      UNorm16 = 4,
      SNorm16 = 5,
      UInt8 = 6,
      SInt8 = 7,
      UInt16 = 8,
      SInt16 = 9,
      UInt32 = 10,
      SInt32 = 11,
    }
    export enum VertexAttribute {
      Position = 0,
      Normal = 1,
      Tangent = 2,
      Color = 3,
      TexCoord0 = 4,
      TexCoord1 = 5,
      TexCoord2 = 6,
      TexCoord3 = 7,
      TexCoord4 = 8,
      TexCoord5 = 9,
      TexCoord6 = 10,
      TexCoord7 = 11,
      BlendWeight = 12,
      BlendIndices = 13,
    }
    export enum OpaqueSortMode {
      Default = 0,
      FrontToBack = 1,
      NoDistanceSort = 2,
    }
    export enum RenderQueue {
      Background = 1000,
      Geometry = 2000,
      AlphaTest = 2450,
      GeometryLast = 2500,
      Transparent = 3000,
      Overlay = 4000,
    }
    export enum RenderBufferLoadAction {
      Load = 0,
      Clear = 1,
      DontCare = 2,
    }
    export enum RenderBufferStoreAction {
      Store = 0,
      Resolve = 1,
      StoreAndResolve = 2,
      DontCare = 3,
    }
    export enum FastMemoryFlags {
      None = 0,
      SpillTop = 1,
      SpillBottom = 2,
    }
    export enum BlendMode {
      Zero = 0,
      One = 1,
      DstColor = 2,
      SrcColor = 3,
      OneMinusDstColor = 4,
      SrcAlpha = 5,
      OneMinusSrcColor = 6,
      DstAlpha = 7,
      OneMinusDstAlpha = 8,
      SrcAlphaSaturate = 9,
      OneMinusSrcAlpha = 10,
    }
    export enum BlendOp {
      Add = 0,
      Subtract = 1,
      ReverseSubtract = 2,
      Min = 3,
      Max = 4,
      LogicalClear = 5,
      LogicalSet = 6,
      LogicalCopy = 7,
      LogicalCopyInverted = 8,
      LogicalNoop = 9,
      LogicalInvert = 10,
      LogicalAnd = 11,
      LogicalNand = 12,
      LogicalOr = 13,
      LogicalNor = 14,
      LogicalXor = 15,
      LogicalEquivalence = 16,
      LogicalAndReverse = 17,
      LogicalAndInverted = 18,
      LogicalOrReverse = 19,
      LogicalOrInverted = 20,
      Multiply = 21,
      Screen = 22,
      Overlay = 23,
      Darken = 24,
      Lighten = 25,
      ColorDodge = 26,
      ColorBurn = 27,
      HardLight = 28,
      SoftLight = 29,
      Difference = 30,
      Exclusion = 31,
      HSLHue = 32,
      HSLSaturation = 33,
      HSLColor = 34,
      HSLLuminosity = 35,
    }
    export enum CompareFunction {
      Disabled = 0,
      Never = 1,
      Less = 2,
      Equal = 3,
      LessEqual = 4,
      Greater = 5,
      NotEqual = 6,
      GreaterEqual = 7,
      Always = 8,
    }
    export enum CullMode {
      Off = 0,
      Front = 1,
      Back = 2,
    }
    export enum ColorWriteMask {
      Alpha = 1,
      Blue = 2,
      Green = 4,
      Red = 8,
      All = 15,
    }
    export enum StencilOp {
      Keep = 0,
      Zero = 1,
      Replace = 2,
      IncrementSaturate = 3,
      DecrementSaturate = 4,
      Invert = 5,
      IncrementWrap = 6,
      DecrementWrap = 7,
    }
    export enum AmbientMode {
      Skybox = 0,
      Trilight = 1,
      Flat = 3,
      Custom = 4,
    }
    export enum DefaultReflectionMode {
      Skybox = 0,
      Custom = 1,
    }
    export enum ReflectionCubemapCompression {
      Uncompressed = 0,
      Compressed = 1,
      Auto = 2,
    }
    export enum CameraEvent {
      BeforeDepthTexture = 0,
      AfterDepthTexture = 1,
      BeforeDepthNormalsTexture = 2,
      AfterDepthNormalsTexture = 3,
      BeforeGBuffer = 4,
      AfterGBuffer = 5,
      BeforeLighting = 6,
      AfterLighting = 7,
      BeforeFinalPass = 8,
      AfterFinalPass = 9,
      BeforeForwardOpaque = 10,
      AfterForwardOpaque = 11,
      BeforeImageEffectsOpaque = 12,
      AfterImageEffectsOpaque = 13,
      BeforeSkybox = 14,
      AfterSkybox = 15,
      BeforeForwardAlpha = 16,
      AfterForwardAlpha = 17,
      BeforeImageEffects = 18,
      AfterImageEffects = 19,
      AfterEverything = 20,
      BeforeReflections = 21,
      AfterReflections = 22,
      BeforeHaloAndLensFlares = 23,
      AfterHaloAndLensFlares = 24,
    }
    export enum LightEvent {
      BeforeShadowMap = 0,
      AfterShadowMap = 1,
      BeforeScreenspaceMask = 2,
      AfterScreenspaceMask = 3,
      BeforeShadowMapPass = 4,
      AfterShadowMapPass = 5,
    }
    export enum ShadowMapPass {
      PointlightPositiveX = 1,
      PointlightNegativeX = 2,
      PointlightPositiveY = 4,
      PointlightNegativeY = 8,
      PointlightPositiveZ = 16,
      PointlightNegativeZ = 32,
      DirectionalCascade0 = 64,
      DirectionalCascade1 = 128,
      DirectionalCascade2 = 256,
      DirectionalCascade3 = 512,
      Spotlight = 1024,
      Pointlight = 63,
      Directional = 960,
      All = 2047,
    }
    export enum BuiltinRenderTextureType {
      PropertyName = -4,
      BufferPtr = -3,
      RenderTexture = -2,
      BindableTexture = -1,
      None = 0,
      CurrentActive = 1,
      CameraTarget = 2,
      Depth = 3,
      DepthNormals = 4,
      ResolvedDepth = 5,
      PrepassNormalsSpec = 7,
      PrepassLight = 8,
      PrepassLightSpec = 9,
      GBuffer0 = 10,
      GBuffer1 = 11,
      GBuffer2 = 12,
      GBuffer3 = 13,
      Reflections = 14,
      MotionVectors = 15,
      GBuffer4 = 16,
      GBuffer5 = 17,
      GBuffer6 = 18,
      GBuffer7 = 19,
    }
    export enum PassType {
      Normal = 0,
      Vertex = 1,
      VertexLM = 2,
      VertexLMRGBM = 3,
      ForwardBase = 4,
      ForwardAdd = 5,
      LightPrePassBase = 6,
      LightPrePassFinal = 7,
      ShadowCaster = 8,
      Deferred = 10,
      Meta = 11,
      MotionVectors = 12,
      ScriptableRenderPipeline = 13,
      ScriptableRenderPipelineDefaultUnlit = 14,
    }
    export enum ShadowCastingMode {
      Off = 0,
      On = 1,
      TwoSided = 2,
      ShadowsOnly = 3,
    }
    export enum LightShadowResolution {
      FromQualitySettings = -1,
      Low = 0,
      Medium = 1,
      High = 2,
      VeryHigh = 3,
    }
    export enum GraphicsDeviceType {
      OpenGL2 = 0,
      Direct3D9 = 1,
      Direct3D11 = 2,
      PlayStation3 = 3,
      Null = 4,
      Xbox360 = 6,
      OpenGLES2 = 8,
      OpenGLES3 = 11,
      PlayStationVita = 12,
      PlayStation4 = 13,
      XboxOne = 14,
      PlayStationMobile = 15,
      Metal = 16,
      OpenGLCore = 17,
      Direct3D12 = 18,
      N3DS = 19,
      Vulkan = 21,
      Switch = 22,
      XboxOneD3D12 = 23,
    }
    export enum GraphicsTier {
      Tier1 = 0,
      Tier2 = 1,
      Tier3 = 2,
    }
    export declare class SubMeshDescriptor {
      constructor(indexStart: number, indexCount: number, topology?: UnityEngine.MeshTopology);
      bounds: UnityEngine.Bounds;
      topology: UnityEngine.MeshTopology;
      indexStart: number;
      indexCount: number;
      baseVertex: number;
      firstVertex: number;
      vertexCount: number;
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class VertexAttributeDescriptor {
      constructor(attribute?: UnityEngine.Rendering.VertexAttribute, format?: UnityEngine.Rendering.VertexAttributeFormat, dimension?: number, stream?: number);
      attribute: UnityEngine.Rendering.VertexAttribute;
      format: UnityEngine.Rendering.VertexAttributeFormat;
      dimension: number;
      stream: number;
      ToString: (() => string);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Rendering.VertexAttributeDescriptor) => boolean);
      GetType: (() => System.Type);
    }
    export enum FormatSwizzle {
      FormatSwizzleR = 0,
      FormatSwizzleG = 1,
      FormatSwizzleB = 2,
      FormatSwizzleA = 3,
      FormatSwizzle0 = 4,
      FormatSwizzle1 = 5,
    }
    export declare class RenderTargetIdentifier {
      constructor(type: UnityEngine.Rendering.BuiltinRenderTextureType);
      constructor(type: UnityEngine.Rendering.BuiltinRenderTextureType, mipLevel?: number, cubeFace?: UnityEngine.CubemapFace, depthSlice?: number);
      constructor(name: string);
      constructor(name: string, mipLevel?: number, cubeFace?: UnityEngine.CubemapFace, depthSlice?: number);
      constructor(nameID: number);
      constructor(nameID: number, mipLevel?: number, cubeFace?: UnityEngine.CubemapFace, depthSlice?: number);
      constructor(renderTargetIdentifier: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubeFace?: UnityEngine.CubemapFace, depthSlice?: number);
      constructor(tex: UnityEngine.Texture);
      constructor(tex: UnityEngine.Texture, mipLevel?: number, cubeFace?: UnityEngine.CubemapFace, depthSlice?: number);
      constructor(buf: UnityEngine.RenderBuffer, mipLevel?: number, cubeFace?: UnityEngine.CubemapFace, depthSlice?: number);
      static AllDepthSlices: number;
      ToString: (() => string);
      GetHashCode: (() => number);
      Equals: ((rhs: UnityEngine.Rendering.RenderTargetIdentifier) => boolean) | ((obj: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export enum RenderTargetFlags {
      None = 0,
      ReadOnlyDepth = 1,
      ReadOnlyStencil = 2,
      ReadOnlyDepthStencil = 3,
    }
    export declare class RenderTargetBinding {
      constructor(colorRenderTargets: UnityEngine.Rendering.RenderTargetIdentifier[], colorLoadActions: UnityEngine.Rendering.RenderBufferLoadAction[], colorStoreActions: UnityEngine.Rendering.RenderBufferStoreAction[], depthRenderTarget: UnityEngine.Rendering.RenderTargetIdentifier, depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction);
      constructor(colorRenderTarget: UnityEngine.Rendering.RenderTargetIdentifier, colorLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, colorStoreAction: UnityEngine.Rendering.RenderBufferStoreAction, depthRenderTarget: UnityEngine.Rendering.RenderTargetIdentifier, depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction);
      constructor(setup: UnityEngine.RenderTargetSetup);
      colorRenderTargets: UnityEngine.Rendering.RenderTargetIdentifier[];
      depthRenderTarget: UnityEngine.Rendering.RenderTargetIdentifier;
      colorLoadActions: UnityEngine.Rendering.RenderBufferLoadAction[];
      colorStoreActions: UnityEngine.Rendering.RenderBufferStoreAction[];
      depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction;
      depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction;
      flags: UnityEngine.Rendering.RenderTargetFlags;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum ReflectionProbeUsage {
      Off = 0,
      BlendProbes = 1,
      BlendProbesAndSkybox = 2,
      Simple = 3,
    }
    export enum ReflectionProbeType {
      Cube = 0,
      Card = 1,
    }
    export enum ReflectionProbeClearFlags {
      Skybox = 1,
      SolidColor = 2,
    }
    export enum ReflectionProbeMode {
      Baked = 0,
      Realtime = 1,
      Custom = 2,
    }
    export declare class ReflectionProbeBlendInfo {
      probe: UnityEngine.ReflectionProbe;
      weight: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum ReflectionProbeRefreshMode {
      OnAwake = 0,
      EveryFrame = 1,
      ViaScripting = 2,
    }
    export enum ReflectionProbeTimeSlicingMode {
      AllFacesAtOnce = 0,
      IndividualFaces = 1,
      NoTimeSlicing = 2,
    }
    export enum ShadowSamplingMode {
      CompareDepths = 0,
      RawDepth = 1,
      None = 2,
    }
    export enum LightProbeUsage {
      Off = 0,
      BlendProbes = 1,
      UseProxyVolume = 2,
      CustomProvided = 4,
    }
    export enum BuiltinShaderType {
      DeferredShading = 0,
      DeferredReflections = 1,
      LegacyDeferredLighting = 2,
      ScreenSpaceShadows = 3,
      DepthNormals = 4,
      MotionVectors = 5,
      LightHalo = 6,
      LensFlare = 7,
    }
    export enum BuiltinShaderMode {
      Disabled = 0,
      UseBuiltin = 1,
      UseCustom = 2,
    }
    export enum BuiltinShaderDefine {
      UNITY_NO_DXT5nm = 0,
      UNITY_NO_RGBM = 1,
      UNITY_USE_NATIVE_HDR = 2,
      UNITY_ENABLE_REFLECTION_BUFFERS = 3,
      UNITY_FRAMEBUFFER_FETCH_AVAILABLE = 4,
      UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS = 5,
      UNITY_METAL_SHADOWS_USE_POINT_FILTERING = 6,
      UNITY_NO_CUBEMAP_ARRAY = 7,
      UNITY_NO_SCREENSPACE_SHADOWS = 8,
      UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS = 9,
      UNITY_PBS_USE_BRDF1 = 10,
      UNITY_PBS_USE_BRDF2 = 11,
      UNITY_PBS_USE_BRDF3 = 12,
      UNITY_NO_FULL_STANDARD_SHADER = 13,
      UNITY_SPECCUBE_BOX_PROJECTION = 14,
      UNITY_SPECCUBE_BLENDING = 15,
      UNITY_ENABLE_DETAIL_NORMALMAP = 16,
      SHADER_API_MOBILE = 17,
      SHADER_API_DESKTOP = 18,
      UNITY_HARDWARE_TIER1 = 19,
      UNITY_HARDWARE_TIER2 = 20,
      UNITY_HARDWARE_TIER3 = 21,
      UNITY_COLORSPACE_GAMMA = 22,
      UNITY_LIGHT_PROBE_PROXY_VOLUME = 23,
      UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS = 24,
      UNITY_LIGHTMAP_DLDR_ENCODING = 25,
      UNITY_LIGHTMAP_RGBM_ENCODING = 26,
      UNITY_LIGHTMAP_FULL_HDR = 27,
      UNITY_VIRTUAL_TEXTURING = 28,
      UNITY_PRETRANSFORM_TO_DISPLAY_ORIENTATION = 29,
      UNITY_ASTC_NORMALMAP_ENCODING = 30,
      SHADER_API_GLES30 = 31,
      UNITY_UNIFIED_SHADER_PRECISION_MODEL = 32,
    }
    export enum VideoShadersIncludeMode {
      Never = 0,
      Referenced = 1,
      Always = 2,
    }
    export enum TextureDimension {
      Unknown = -1,
      None = 0,
      Any = 1,
      Tex2D = 2,
      Tex3D = 3,
      Cube = 4,
      Tex2DArray = 5,
      CubeArray = 6,
    }
    export enum CopyTextureSupport {
      None = 0,
      Basic = 1,
      Copy3D = 2,
      DifferentTypes = 4,
      TextureToRT = 8,
      RTToTexture = 16,
    }
    export enum CameraHDRMode {
      FP16 = 1,
      R11G11B10 = 2,
    }
    export enum RealtimeGICPUUsage {
      Low = 25,
      Medium = 50,
      High = 75,
      Unlimited = 100,
    }
    export enum ComputeQueueType {
      Default = 0,
      Background = 1,
      Urgent = 2,
    }
    export enum SinglePassStereoMode {
      None = 0,
      SideBySide = 1,
      Instancing = 2,
      Multiview = 3,
    }
    export enum CommandBufferExecutionFlags {
      None = 0,
      AsyncCompute = 2,
    }
    export enum RenderTextureSubElement {
      Color = 0,
      Depth = 1,
      Stencil = 2,
      Default = 3,
    }
    export enum RenderingThreadingMode {
      Direct = 0,
      SingleThreaded = 1,
      MultiThreaded = 2,
      LegacyJobified = 3,
      NativeGraphicsJobs = 4,
      NativeGraphicsJobsWithoutRenderThread = 5,
    }
    export enum OpenGLESVersion {
      None = 0,
      OpenGLES20 = 1,
      OpenGLES30 = 2,
      OpenGLES31 = 3,
      OpenGLES31AEP = 4,
      OpenGLES32 = 5,
    }
    export enum SynchronisationStageFlags {
      VertexProcessing = 1,
      PixelProcessing = 2,
      ComputeProcessing = 4,
      AllGPUOperations = 7,
    }
    export enum GraphicsFenceType {
      AsyncQueueSynchronisation = 0,
      CPUSynchronisation = 1,
    }
    export declare class GraphicsFence {
      passed: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class GraphicsSettings {
      static transparencySortMode: UnityEngine.TransparencySortMode;
      static transparencySortAxis: UnityEngine.Vector3;
      static realtimeDirectRectangularAreaLights: boolean;
      static lightsUseLinearIntensity: boolean;
      static lightsUseColorTemperature: boolean;
      static defaultRenderingLayerMask: System.UInt32;
      static useScriptableRenderPipelineBatching: boolean;
      static logWhenShaderIsCompiled: boolean;
      static disableBuiltinCustomRenderTextureUpdate: boolean;
      static videoShadersIncludeMode: UnityEngine.Rendering.VideoShadersIncludeMode;
      static currentRenderPipeline: UnityEngine.Rendering.RenderPipelineAsset;
      static renderPipelineAsset: UnityEngine.Rendering.RenderPipelineAsset;
      static defaultRenderPipeline: UnityEngine.Rendering.RenderPipelineAsset;
      static allConfiguredRenderPipelines: UnityEngine.Rendering.RenderPipelineAsset[];
      name: string;
      hideFlags: UnityEngine.HideFlags;
      static HasShaderDefine: ((tier: UnityEngine.Rendering.GraphicsTier, defineHash: UnityEngine.Rendering.BuiltinShaderDefine) => boolean) | ((defineHash: UnityEngine.Rendering.BuiltinShaderDefine) => boolean);
      static GetGraphicsSettings: (() => UnityEngine.Object);
      static SetShaderMode: ((type: UnityEngine.Rendering.BuiltinShaderType, mode: UnityEngine.Rendering.BuiltinShaderMode) => void);
      static GetShaderMode: ((type: UnityEngine.Rendering.BuiltinShaderType) => UnityEngine.Rendering.BuiltinShaderMode);
      static SetCustomShader: ((type: UnityEngine.Rendering.BuiltinShaderType, shader: UnityEngine.Shader) => void);
      static GetCustomShader: ((type: UnityEngine.Rendering.BuiltinShaderType) => UnityEngine.Shader);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class OnDemandRendering {
      constructor();
      static willCurrentFrameRender: boolean;
      static renderFrameInterval: number;
      static effectiveRenderFrameRate: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class CommandBuffer {
      constructor();
      name: string;
      sizeInBytes: number;
      ConvertTexture: ((src: UnityEngine.Rendering.RenderTargetIdentifier, dst: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number) => void);
      WaitAllAsyncReadbackRequests: (() => void);
      RequestAsyncReadback: ((src: UnityEngine.ComputeBuffer, callback: (() => void)) => void) | ((src: UnityEngine.GraphicsBuffer, callback: (() => void)) => void) | ((src: UnityEngine.ComputeBuffer, size: number, offset: number, callback: (() => void)) => void) | ((src: UnityEngine.GraphicsBuffer, size: number, offset: number, callback: (() => void)) => void) | ((src: UnityEngine.Texture, callback: (() => void)) => void) | ((src: UnityEngine.Texture, mipIndex: number, callback: (() => void)) => void) | ((src: UnityEngine.Texture, mipIndex: number, dstFormat: UnityEngine.TextureFormat, callback: (() => void)) => void) | ((src: UnityEngine.Texture, mipIndex: number, dstFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, callback: (() => void)) => void) | ((src: UnityEngine.Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, callback: (() => void)) => void) | ((src: UnityEngine.Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: UnityEngine.TextureFormat, callback: (() => void)) => void) | ((src: UnityEngine.Texture, mipIndex: number, x: number, width: number, y: number, height: number, z: number, depth: number, dstFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, callback: (() => void)) => void);
      SetInvertCulling: ((invertCulling: boolean) => void);
      SetComputeFloatParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, val: number) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, val: number) => void);
      SetComputeIntParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, val: number) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, val: number) => void);
      SetComputeVectorParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, val: UnityEngine.Vector4) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, val: UnityEngine.Vector4) => void);
      SetComputeVectorArrayParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, values: UnityEngine.Vector4[]) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, values: UnityEngine.Vector4[]) => void);
      SetComputeMatrixParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, val: UnityEngine.Matrix4x4) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, val: UnityEngine.Matrix4x4) => void);
      SetComputeMatrixArrayParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, values: UnityEngine.Matrix4x4[]) => void);
      SetRayTracingShaderPass: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, passName: string) => void);
      Clear: (() => void);
      ClearRandomWriteTargets: (() => void);
      SetViewport: ((pixelRect: UnityEngine.Rect) => void);
      EnableScissorRect: ((scissor: UnityEngine.Rect) => void);
      DisableScissorRect: (() => void);
      GetTemporaryRT: ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless, useDynamicScale: boolean) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless, useDynamicScale: boolean) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat) => void) | ((nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode) => void) | ((nameID: number, width: number, height: number, depthBuffer: number) => void) | ((nameID: number, width: number, height: number) => void) | ((nameID: number, desc: UnityEngine.RenderTextureDescriptor, filter: UnityEngine.FilterMode) => void) | ((nameID: number, desc: UnityEngine.RenderTextureDescriptor) => void);
      GetTemporaryRTArray: ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean, useDynamicScale: boolean) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number, enableRandomWrite: boolean) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat, antiAliasing: number) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.Experimental.Rendering.GraphicsFormat) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode) => void) | ((nameID: number, width: number, height: number, slices: number, depthBuffer: number) => void) | ((nameID: number, width: number, height: number, slices: number) => void);
      ReleaseTemporaryRT: ((nameID: number) => void);
      ClearRenderTarget: ((clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color, depth: number) => void) | ((clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color) => void);
      SetGlobalFloat: ((nameID: number, value: number) => void) | ((name: string, value: number) => void);
      SetGlobalInt: ((nameID: number, value: number) => void) | ((name: string, value: number) => void);
      SetGlobalVector: ((nameID: number, value: UnityEngine.Vector4) => void) | ((name: string, value: UnityEngine.Vector4) => void);
      SetGlobalColor: ((nameID: number, value: UnityEngine.Color) => void) | ((name: string, value: UnityEngine.Color) => void);
      SetGlobalMatrix: ((nameID: number, value: UnityEngine.Matrix4x4) => void) | ((name: string, value: UnityEngine.Matrix4x4) => void);
      EnableShaderKeyword: ((keyword: string) => void);
      DisableShaderKeyword: ((keyword: string) => void);
      SetViewMatrix: ((view: UnityEngine.Matrix4x4) => void);
      SetProjectionMatrix: ((proj: UnityEngine.Matrix4x4) => void);
      SetViewProjectionMatrices: ((view: UnityEngine.Matrix4x4, proj: UnityEngine.Matrix4x4) => void);
      SetGlobalDepthBias: ((bias: number, slopeBias: number) => void);
      SetExecutionFlags: ((flags: UnityEngine.Rendering.CommandBufferExecutionFlags) => void);
      SetGlobalFloatArray: ((nameID: number, values: number[]) => void) | ((propertyName: string, values: number[]) => void) | ((nameID: number, values: number[]) => void) | ((propertyName: string, values: number[]) => void);
      SetGlobalVectorArray: ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((propertyName: string, values: UnityEngine.Vector4[]) => void) | ((nameID: number, values: UnityEngine.Vector4[]) => void) | ((propertyName: string, values: UnityEngine.Vector4[]) => void);
      SetGlobalMatrixArray: ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((propertyName: string, values: UnityEngine.Matrix4x4[]) => void) | ((nameID: number, values: UnityEngine.Matrix4x4[]) => void) | ((propertyName: string, values: UnityEngine.Matrix4x4[]) => void);
      BeginSample: ((name: string) => void) | ((sampler: UnityEngine.Profiling.CustomSampler) => void);
      EndSample: ((name: string) => void) | ((sampler: UnityEngine.Profiling.CustomSampler) => void);
      IncrementUpdateCount: ((dest: UnityEngine.Rendering.RenderTargetIdentifier) => void);
      SetInstanceMultiplier: ((multiplier: System.UInt32) => void);
      SetRenderTarget: ((rt: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((rt: UnityEngine.Rendering.RenderTargetIdentifier, loadAction: UnityEngine.Rendering.RenderBufferLoadAction, storeAction: UnityEngine.Rendering.RenderBufferStoreAction) => void) | ((rt: UnityEngine.Rendering.RenderTargetIdentifier, colorLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, colorStoreAction: UnityEngine.Rendering.RenderBufferStoreAction, depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction) => void) | ((rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number) => void) | ((rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace) => void) | ((rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number) => void) | ((color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number) => void) | ((color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace) => void) | ((color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number) => void) | ((color: UnityEngine.Rendering.RenderTargetIdentifier, colorLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, colorStoreAction: UnityEngine.Rendering.RenderBufferStoreAction, depth: UnityEngine.Rendering.RenderTargetIdentifier, depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction) => void) | ((colors: UnityEngine.Rendering.RenderTargetIdentifier[], depth: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((colors: UnityEngine.Rendering.RenderTargetIdentifier[], depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number) => void) | ((binding: UnityEngine.Rendering.RenderTargetBinding, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number) => void) | ((binding: UnityEngine.Rendering.RenderTargetBinding) => void);
      SetComputeBufferData: ((buffer: UnityEngine.ComputeBuffer, data: System.Array) => void) | ((buffer: UnityEngine.ComputeBuffer, data: System.Array, managedBufferStartIndex: number, graphicsBufferStartIndex: number, count: number) => void);
      SetComputeBufferCounterValue: ((buffer: UnityEngine.ComputeBuffer, counterValue: System.UInt32) => void);
      Dispose: (() => void);
      Release: (() => void);
      CreateAsyncGraphicsFence: (() => UnityEngine.Rendering.GraphicsFence) | ((stage: UnityEngine.Rendering.SynchronisationStage) => UnityEngine.Rendering.GraphicsFence);
      CreateGraphicsFence: ((fenceType: UnityEngine.Rendering.GraphicsFenceType, stage: UnityEngine.Rendering.SynchronisationStageFlags) => UnityEngine.Rendering.GraphicsFence);
      WaitOnAsyncGraphicsFence: ((fence: UnityEngine.Rendering.GraphicsFence) => void) | ((fence: UnityEngine.Rendering.GraphicsFence, stage: UnityEngine.Rendering.SynchronisationStage) => void) | ((fence: UnityEngine.Rendering.GraphicsFence, stage: UnityEngine.Rendering.SynchronisationStageFlags) => void);
      SetComputeFloatParams: ((computeShader: UnityEngine.ComputeShader, name: string, ...values: number[]) => void) | ((computeShader: UnityEngine.ComputeShader, nameID: number, ...values: number[]) => void);
      SetComputeIntParams: ((computeShader: UnityEngine.ComputeShader, name: string, ...values: number[]) => void) | ((computeShader: UnityEngine.ComputeShader, nameID: number, ...values: number[]) => void);
      SetComputeTextureParam: ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, rt: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, element: UnityEngine.Rendering.RenderTextureSubElement) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, element: UnityEngine.Rendering.RenderTextureSubElement) => void);
      SetComputeBufferParam: ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, buffer: UnityEngine.ComputeBuffer) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, buffer: UnityEngine.ComputeBuffer) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, buffer: UnityEngine.GraphicsBuffer) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, buffer: UnityEngine.GraphicsBuffer) => void);
      SetComputeConstantBufferParam: ((computeShader: UnityEngine.ComputeShader, nameID: number, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((computeShader: UnityEngine.ComputeShader, nameID: number, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((computeShader: UnityEngine.ComputeShader, name: string, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
      DispatchCompute: ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, indirectBuffer: UnityEngine.ComputeBuffer, argsOffset: System.UInt32) => void) | ((computeShader: UnityEngine.ComputeShader, kernelIndex: number, indirectBuffer: UnityEngine.GraphicsBuffer, argsOffset: System.UInt32) => void);
      BuildRayTracingAccelerationStructure: ((accelerationStructure: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure) => void) | ((accelerationStructure: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure, relativeOrigin: UnityEngine.Vector3) => void);
      SetRayTracingAccelerationStructure: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, rayTracingAccelerationStructure: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, rayTracingAccelerationStructure: UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure) => void);
      SetRayTracingBufferParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, buffer: UnityEngine.ComputeBuffer) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, buffer: UnityEngine.ComputeBuffer) => void);
      SetRayTracingConstantBufferParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, buffer: UnityEngine.ComputeBuffer, offset: number, size: number) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, buffer: UnityEngine.GraphicsBuffer, offset: number, size: number) => void);
      SetRayTracingTextureParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, rt: UnityEngine.Rendering.RenderTargetIdentifier) => void);
      SetRayTracingFloatParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, val: number) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, val: number) => void);
      SetRayTracingFloatParams: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, ...values: number[]) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, ...values: number[]) => void);
      SetRayTracingIntParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, val: number) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, val: number) => void);
      SetRayTracingIntParams: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, ...values: number[]) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, ...values: number[]) => void);
      SetRayTracingVectorParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, val: UnityEngine.Vector4) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, val: UnityEngine.Vector4) => void);
      SetRayTracingVectorArrayParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, ...values: UnityEngine.Vector4[]) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, ...values: UnityEngine.Vector4[]) => void);
      SetRayTracingMatrixParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, val: UnityEngine.Matrix4x4) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, val: UnityEngine.Matrix4x4) => void);
      SetRayTracingMatrixArrayParam: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, name: string, ...values: UnityEngine.Matrix4x4[]) => void) | ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, nameID: number, ...values: UnityEngine.Matrix4x4[]) => void);
      DispatchRays: ((rayTracingShader: UnityEngine.Experimental.Rendering.RayTracingShader, rayGenName: string, width: System.UInt32, height: System.UInt32, depth: System.UInt32, camera?: UnityEngine.Camera) => void);
      GenerateMips: ((rt: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((rt: UnityEngine.RenderTexture) => void);
      ResolveAntiAliasedSurface: ((rt: UnityEngine.RenderTexture, target?: UnityEngine.RenderTexture) => void);
      DrawMesh: ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number, shaderPass: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number, shaderPass: number) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number) => void) | ((mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material) => void);
      DrawRenderer: ((renderer: UnityEngine.Renderer, material: UnityEngine.Material, submeshIndex: number, shaderPass: number) => void) | ((renderer: UnityEngine.Renderer, material: UnityEngine.Material, submeshIndex: number) => void) | ((renderer: UnityEngine.Renderer, material: UnityEngine.Material) => void);
      DrawProcedural: ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, indexCount: number, instanceCount: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, indexCount: number, instanceCount: number) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, indexCount: number) => void);
      DrawProceduralIndirect: ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number) => void) | ((matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number) => void) | ((indexBuffer: UnityEngine.GraphicsBuffer, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.GraphicsBuffer) => void);
      DrawMeshInstanced: ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[], count: number) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[]) => void);
      DrawMeshInstancedProcedural: ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, count: number, properties?: UnityEngine.MaterialPropertyBlock) => void);
      DrawMeshInstancedIndirect: ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.GraphicsBuffer, argsOffset: number) => void) | ((mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.GraphicsBuffer) => void);
      DrawOcclusionMesh: ((normalizedCamViewport: UnityEngine.RectInt) => void);
      SetRandomWriteTarget: ((index: number, rt: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((index: number, buffer: UnityEngine.ComputeBuffer, preserveCounterValue: boolean) => void) | ((index: number, buffer: UnityEngine.ComputeBuffer) => void) | ((index: number, buffer: UnityEngine.GraphicsBuffer, preserveCounterValue: boolean) => void) | ((index: number, buffer: UnityEngine.GraphicsBuffer) => void);
      CopyCounterValue: ((src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: System.UInt32) => void) | ((src: UnityEngine.GraphicsBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: System.UInt32) => void) | ((src: UnityEngine.ComputeBuffer, dst: UnityEngine.GraphicsBuffer, dstOffsetBytes: System.UInt32) => void) | ((src: UnityEngine.GraphicsBuffer, dst: UnityEngine.GraphicsBuffer, dstOffsetBytes: System.UInt32) => void);
      CopyTexture: ((src: UnityEngine.Rendering.RenderTargetIdentifier, dst: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number) => void) | ((src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, srcMip: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number, dstMip: number) => void) | ((src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number, dstMip: number, dstX: number, dstY: number) => void);
      Blit: ((source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material) => void) | ((source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, sourceDepthSlice: number, destDepthSlice: number) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2, sourceDepthSlice: number, destDepthSlice: number) => void) | ((source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number, destDepthSlice: number) => void);
      SetGlobalTexture: ((name: string, value: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((nameID: number, value: UnityEngine.Rendering.RenderTargetIdentifier) => void) | ((name: string, value: UnityEngine.Rendering.RenderTargetIdentifier, element: UnityEngine.Rendering.RenderTextureSubElement) => void) | ((nameID: number, value: UnityEngine.Rendering.RenderTargetIdentifier, element: UnityEngine.Rendering.RenderTextureSubElement) => void);
      SetGlobalBuffer: ((name: string, value: UnityEngine.ComputeBuffer) => void) | ((nameID: number, value: UnityEngine.ComputeBuffer) => void) | ((name: string, value: UnityEngine.GraphicsBuffer) => void) | ((nameID: number, value: UnityEngine.GraphicsBuffer) => void);
      SetGlobalConstantBuffer: ((buffer: UnityEngine.ComputeBuffer, nameID: number, offset: number, size: number) => void) | ((buffer: UnityEngine.ComputeBuffer, name: string, offset: number, size: number) => void) | ((buffer: UnityEngine.GraphicsBuffer, nameID: number, offset: number, size: number) => void) | ((buffer: UnityEngine.GraphicsBuffer, name: string, offset: number, size: number) => void);
      SetShadowSamplingMode: ((shadowmap: UnityEngine.Rendering.RenderTargetIdentifier, mode: UnityEngine.Rendering.ShadowSamplingMode) => void);
      SetSinglePassStereo: ((mode: UnityEngine.Rendering.SinglePassStereoMode) => void);
      IssuePluginEvent: ((callback: System.IntPtr, eventID: number) => void);
      IssuePluginEventAndData: ((callback: System.IntPtr, eventID: number, data: System.IntPtr) => void);
      IssuePluginCustomBlit: ((callback: System.IntPtr, command: System.UInt32, source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, commandParam: System.UInt32, commandFlags: System.UInt32) => void);
      IssuePluginCustomTextureUpdate: ((callback: System.IntPtr, targetTexture: UnityEngine.Texture, userData: System.UInt32) => void);
      IssuePluginCustomTextureUpdateV1: ((callback: System.IntPtr, targetTexture: UnityEngine.Texture, userData: System.UInt32) => void);
      IssuePluginCustomTextureUpdateV2: ((callback: System.IntPtr, targetTexture: UnityEngine.Texture, userData: System.UInt32) => void);
      ProcessVTFeedback: ((rt: UnityEngine.Rendering.RenderTargetIdentifier, resolver: System.IntPtr, slice: number, x: number, width: number, y: number, height: number, mip: number) => void);
      CreateGPUFence: ((stage: UnityEngine.Rendering.SynchronisationStage) => UnityEngine.Rendering.GPUFence) | (() => UnityEngine.Rendering.GPUFence);
      WaitOnGPUFence: ((fence: UnityEngine.Rendering.GPUFence, stage: UnityEngine.Rendering.SynchronisationStage) => void) | ((fence: UnityEngine.Rendering.GPUFence) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class CommandBufferExtensions {
      static SwitchIntoFastMemory: ((cmd: UnityEngine.Rendering.CommandBuffer, rid: UnityEngine.Rendering.RenderTargetIdentifier, fastMemoryFlags: UnityEngine.Rendering.FastMemoryFlags, residency: number, copyContents: boolean) => void);
      static SwitchOutOfFastMemory: ((cmd: UnityEngine.Rendering.CommandBuffer, rid: UnityEngine.Rendering.RenderTargetIdentifier, copyContents: boolean) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SplashScreen {
      constructor();
      static isFinished: boolean;
      static Begin: (() => void);
      static Stop: ((stopBehavior: UnityEngine.Rendering.SplashScreen_StopBehavior) => void);
      static Draw: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum SplashScreen_StopBehavior {
      StopImmediate = 0,
      FadeOut = 1,
    }
    export declare class SphericalHarmonicsL2 {
      Clear: (() => void);
      AddAmbientLight: ((color: UnityEngine.Color) => void);
      AddDirectionalLight: ((direction: UnityEngine.Vector3, color: UnityEngine.Color, intensity: number) => void);
      Evaluate: ((directions: UnityEngine.Vector3[], results: UnityEngine.Color[]) => void);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean) | ((other: UnityEngine.Rendering.SphericalHarmonicsL2) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class BatchVisibility {
      offset: number;
      instancesCount: number;
      visibleCount: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class BatchCullingContext {
      constructor(inCullingPlanes: Unity.Collections.NativeArray<UnityEngine.Plane>, inOutBatchVisibility: Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility>, outVisibleIndices: Unity.Collections.NativeArray<number>, inLodParameters: UnityEngine.Rendering.LODParameters);
      constructor(inCullingPlanes: Unity.Collections.NativeArray<UnityEngine.Plane>, inOutBatchVisibility: Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility>, outVisibleIndices: Unity.Collections.NativeArray<number>, inLodParameters: UnityEngine.Rendering.LODParameters, inCullingMatrix: UnityEngine.Matrix4x4, inNearPlane: number);
      cullingPlanes: Unity.Collections.NativeArray<UnityEngine.Plane>;
      batchVisibility: Unity.Collections.NativeArray<UnityEngine.Rendering.BatchVisibility>;
      visibleIndices: Unity.Collections.NativeArray<number>;
      visibleIndicesY: Unity.Collections.NativeArray<number>;
      lodParameters: UnityEngine.Rendering.LODParameters;
      cullingMatrix: UnityEngine.Matrix4x4;
      nearPlane: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class BatchRendererGroup {
      constructor(cullingCallback: UnityEngine.Rendering.BatchRendererGroup_OnPerformCulling);
      Dispose: (() => void);
      AddBatch: ((mesh: UnityEngine.Mesh, subMeshIndex: number, material: UnityEngine.Material, layer: number, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, invertCulling: boolean, bounds: UnityEngine.Bounds, instanceCount: number, customProps: UnityEngine.MaterialPropertyBlock, associatedSceneObject: UnityEngine.GameObject) => number) | ((mesh: UnityEngine.Mesh, subMeshIndex: number, material: UnityEngine.Material, layer: number, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, invertCulling: boolean, bounds: UnityEngine.Bounds, instanceCount: number, customProps: UnityEngine.MaterialPropertyBlock, associatedSceneObject: UnityEngine.GameObject, sceneCullingMask: System.UInt64) => number) | ((mesh: UnityEngine.Mesh, subMeshIndex: number, material: UnityEngine.Material, layer: number, castShadows: UnityEngine.Rendering.ShadowCastingMode, receiveShadows: boolean, invertCulling: boolean, bounds: UnityEngine.Bounds, instanceCount: number, customProps: UnityEngine.MaterialPropertyBlock, associatedSceneObject: UnityEngine.GameObject, sceneCullingMask: System.UInt64, renderingLayerMask: System.UInt32) => number);
      SetBatchFlags: ((batchIndex: number, flags: System.UInt64) => void);
      SetBatchPropertyMetadata: ((batchIndex: number, cbufferLengths: Unity.Collections.NativeArray<number>, cbufferMetadata: Unity.Collections.NativeArray<number>) => void);
      SetInstancingData: ((batchIndex: number, instanceCount: number, customProps: UnityEngine.MaterialPropertyBlock) => void);
      GetBatchMatrices: ((batchIndex: number) => Unity.Collections.NativeArray<UnityEngine.Matrix4x4>);
      GetBatchScalarArrayInt: ((batchIndex: number, propertyName: string) => Unity.Collections.NativeArray<number>) | ((batchIndex: number, propertyName: number) => Unity.Collections.NativeArray<number>);
      GetBatchScalarArray: ((batchIndex: number, propertyName: string) => Unity.Collections.NativeArray<number>) | ((batchIndex: number, propertyName: number) => Unity.Collections.NativeArray<number>);
      GetBatchVectorArrayInt: ((batchIndex: number, propertyName: string) => Unity.Collections.NativeArray<number>) | ((batchIndex: number, propertyName: number) => Unity.Collections.NativeArray<number>);
      GetBatchVectorArray: ((batchIndex: number, propertyName: string) => Unity.Collections.NativeArray<UnityEngine.Vector4>) | ((batchIndex: number, propertyName: number) => Unity.Collections.NativeArray<UnityEngine.Vector4>);
      GetBatchMatrixArray: ((batchIndex: number, propertyName: string) => Unity.Collections.NativeArray<UnityEngine.Matrix4x4>) | ((batchIndex: number, propertyName: number) => Unity.Collections.NativeArray<UnityEngine.Matrix4x4>);
      SetBatchBounds: ((batchIndex: number, bounds: UnityEngine.Bounds) => void);
      GetNumBatches: (() => number);
      RemoveBatch: ((index: number) => void);
      EnableVisibleIndicesYArray: ((enabled: boolean) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BatchRendererGroup_OnPerformCulling {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((rendererGroup: UnityEngine.Rendering.BatchRendererGroup, cullingContext: UnityEngine.Rendering.BatchCullingContext) => Unity.Jobs.JobHandle);
      BeginInvoke: ((rendererGroup: UnityEngine.Rendering.BatchRendererGroup, cullingContext: UnityEngine.Rendering.BatchCullingContext, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => Unity.Jobs.JobHandle);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AttachmentDescriptor {
      constructor(format: UnityEngine.Experimental.Rendering.GraphicsFormat);
      constructor(format: UnityEngine.RenderTextureFormat);
      constructor(format: UnityEngine.RenderTextureFormat, target: UnityEngine.Rendering.RenderTargetIdentifier, loadExistingContents?: boolean, storeResults?: boolean, resolve?: boolean);
      loadAction: UnityEngine.Rendering.RenderBufferLoadAction;
      storeAction: UnityEngine.Rendering.RenderBufferStoreAction;
      graphicsFormat: UnityEngine.Experimental.Rendering.GraphicsFormat;
      format: UnityEngine.RenderTextureFormat;
      loadStoreTarget: UnityEngine.Rendering.RenderTargetIdentifier;
      resolveTarget: UnityEngine.Rendering.RenderTargetIdentifier;
      clearColor: UnityEngine.Color;
      clearDepth: number;
      clearStencil: System.UInt32;
      ConfigureTarget: ((target: UnityEngine.Rendering.RenderTargetIdentifier, loadExistingContents: boolean, storeResults: boolean) => void);
      ConfigureResolveTarget: ((target: UnityEngine.Rendering.RenderTargetIdentifier) => void);
      ConfigureClear: ((clearColor: UnityEngine.Color, clearDepth?: number, clearStencil?: System.UInt32) => void);
      Equals: ((other: UnityEngine.Rendering.AttachmentDescriptor) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class BlendState {
      constructor(separateMRTBlend?: boolean, alphaToMask?: boolean);
      static defaultValue: UnityEngine.Rendering.BlendState;
      separateMRTBlendStates: boolean;
      alphaToMask: boolean;
      blendState0: UnityEngine.Rendering.RenderTargetBlendState;
      blendState1: UnityEngine.Rendering.RenderTargetBlendState;
      blendState2: UnityEngine.Rendering.RenderTargetBlendState;
      blendState3: UnityEngine.Rendering.RenderTargetBlendState;
      blendState4: UnityEngine.Rendering.RenderTargetBlendState;
      blendState5: UnityEngine.Rendering.RenderTargetBlendState;
      blendState6: UnityEngine.Rendering.RenderTargetBlendState;
      blendState7: UnityEngine.Rendering.RenderTargetBlendState;
      Equals: ((other: UnityEngine.Rendering.BlendState) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CameraProperties {
      GetShadowCullingPlane: ((index: number) => UnityEngine.Plane);
      SetShadowCullingPlane: ((index: number, plane: UnityEngine.Plane) => void);
      GetCameraCullingPlane: ((index: number) => UnityEngine.Plane);
      SetCameraCullingPlane: ((index: number, plane: UnityEngine.Plane) => void);
      Equals: ((other: UnityEngine.Rendering.CameraProperties) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum CullingOptions {
      None = 0,
      ForceEvenIfCameraIsNotActive = 1,
      OcclusionCull = 2,
      NeedsLighting = 4,
      NeedsReflectionProbes = 8,
      Stereo = 16,
      DisablePerObjectCulling = 32,
      ShadowCasters = 64,
    }
    export declare class ScriptableCullingParameters {
      maximumVisibleLights: number;
      cullingPlaneCount: number;
      isOrthographic: boolean;
      lodParameters: UnityEngine.Rendering.LODParameters;
      cullingMask: System.UInt32;
      cullingMatrix: UnityEngine.Matrix4x4;
      origin: UnityEngine.Vector3;
      shadowDistance: number;
      cullingOptions: UnityEngine.Rendering.CullingOptions;
      reflectionProbeSortingCriteria: UnityEngine.Rendering.ReflectionProbeSortingCriteria;
      cameraProperties: UnityEngine.Rendering.CameraProperties;
      stereoViewMatrix: UnityEngine.Matrix4x4;
      stereoProjectionMatrix: UnityEngine.Matrix4x4;
      stereoSeparationDistance: number;
      accurateOcclusionThreshold: number;
      maximumPortalCullingJobs: number;
      static cullingJobsLowerLimit: number;
      static cullingJobsUpperLimit: number;
      static maximumCullingPlaneCount: number;
      static layerCount: number;
      GetLayerCullingDistance: ((layerIndex: number) => number);
      SetLayerCullingDistance: ((layerIndex: number, distance: number) => void);
      GetCullingPlane: ((index: number) => UnityEngine.Plane);
      SetCullingPlane: ((index: number, plane: UnityEngine.Plane) => void);
      Equals: ((other: UnityEngine.Rendering.ScriptableCullingParameters) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CullingResults {
      visibleLights: Unity.Collections.NativeArray<UnityEngine.Rendering.VisibleLight>;
      visibleOffscreenVertexLights: Unity.Collections.NativeArray<UnityEngine.Rendering.VisibleLight>;
      visibleReflectionProbes: Unity.Collections.NativeArray<UnityEngine.Rendering.VisibleReflectionProbe>;
      lightIndexCount: number;
      reflectionProbeIndexCount: number;
      lightAndReflectionProbeIndexCount: number;
      FillLightAndReflectionProbeIndices: ((computeBuffer: UnityEngine.ComputeBuffer) => void) | ((buffer: UnityEngine.GraphicsBuffer) => void);
      GetLightIndexMap: ((allocator: Unity.Collections.Allocator) => Unity.Collections.NativeArray<number>);
      SetLightIndexMap: ((lightIndexMap: Unity.Collections.NativeArray<number>) => void);
      GetReflectionProbeIndexMap: ((allocator: Unity.Collections.Allocator) => Unity.Collections.NativeArray<number>);
      SetReflectionProbeIndexMap: ((lightIndexMap: Unity.Collections.NativeArray<number>) => void);
      Equals: ((other: UnityEngine.Rendering.CullingResults) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class DepthState {
      constructor(writeEnabled?: boolean, compareFunction?: UnityEngine.Rendering.CompareFunction);
      static defaultValue: UnityEngine.Rendering.DepthState;
      writeEnabled: boolean;
      compareFunction: UnityEngine.Rendering.CompareFunction;
      Equals: ((other: UnityEngine.Rendering.DepthState) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class DrawingSettings {
      constructor(shaderPassName: UnityEngine.Rendering.ShaderTagId, sortingSettings: UnityEngine.Rendering.SortingSettings);
      sortingSettings: UnityEngine.Rendering.SortingSettings;
      perObjectData: UnityEngine.Rendering.PerObjectData;
      enableDynamicBatching: boolean;
      enableInstancing: boolean;
      overrideMaterial: UnityEngine.Material;
      overrideMaterialPassIndex: number;
      mainLightIndex: number;
      static maxShaderPasses: number;
      GetShaderPassName: ((index: number) => UnityEngine.Rendering.ShaderTagId);
      SetShaderPassName: ((index: number, shaderPassName: UnityEngine.Rendering.ShaderTagId) => void);
      Equals: ((other: UnityEngine.Rendering.DrawingSettings) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FilteringSettings {
      constructor(renderQueueRange?: System.Nullable<UnityEngine.Rendering.RenderQueueRange>, layerMask?: number, renderingLayerMask?: System.UInt32, excludeMotionVectorObjects?: number);
      static defaultValue: UnityEngine.Rendering.FilteringSettings;
      renderQueueRange: UnityEngine.Rendering.RenderQueueRange;
      layerMask: number;
      renderingLayerMask: System.UInt32;
      excludeMotionVectorObjects: boolean;
      sortingLayerRange: UnityEngine.Rendering.SortingLayerRange;
      Equals: ((other: UnityEngine.Rendering.FilteringSettings) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum GizmoSubset {
      PreImageEffects = 0,
      PostImageEffects = 1,
    }
    export declare class LODParameters {
      isOrthographic: boolean;
      cameraPosition: UnityEngine.Vector3;
      fieldOfView: number;
      orthoSize: number;
      cameraPixelHeight: number;
      Equals: ((other: UnityEngine.Rendering.LODParameters) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum PerObjectData {
      None = 0,
      LightProbe = 1,
      ReflectionProbes = 2,
      LightProbeProxyVolume = 4,
      Lightmaps = 8,
      LightData = 16,
      MotionVectors = 32,
      LightIndices = 64,
      ReflectionProbeData = 128,
      OcclusionProbe = 256,
      OcclusionProbeProxyVolume = 512,
      ShadowMask = 1024,
    }
    export declare class RasterState {
      constructor(cullingMode?: UnityEngine.Rendering.CullMode, offsetUnits?: number, offsetFactor?: number, depthClip?: boolean);
      cullingMode: UnityEngine.Rendering.CullMode;
      depthClip: boolean;
      conservative: boolean;
      offsetUnits: number;
      offsetFactor: number;
      static defaultValue: UnityEngine.Rendering.RasterState;
      Equals: ((other: UnityEngine.Rendering.RasterState) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum ReflectionProbeSortingCriteria {
      None = 0,
      Importance = 1,
      Size = 2,
      ImportanceThenSize = 3,
    }
    export declare class RenderPipeline {
      disposed: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class RenderPipelineAsset {
      terrainBrushPassIndex: number;
      renderingLayerMaskNames: string[];
      defaultMaterial: UnityEngine.Material;
      autodeskInteractiveShader: UnityEngine.Shader;
      autodeskInteractiveTransparentShader: UnityEngine.Shader;
      autodeskInteractiveMaskedShader: UnityEngine.Shader;
      terrainDetailLitShader: UnityEngine.Shader;
      terrainDetailGrassShader: UnityEngine.Shader;
      terrainDetailGrassBillboardShader: UnityEngine.Shader;
      defaultParticleMaterial: UnityEngine.Material;
      defaultLineMaterial: UnityEngine.Material;
      defaultTerrainMaterial: UnityEngine.Material;
      defaultUIMaterial: UnityEngine.Material;
      defaultUIOverdrawMaterial: UnityEngine.Material;
      defaultUIETC1SupportedMaterial: UnityEngine.Material;
      default2DMaterial: UnityEngine.Material;
      defaultShader: UnityEngine.Shader;
      defaultSpeedTree7Shader: UnityEngine.Shader;
      defaultSpeedTree8Shader: UnityEngine.Shader;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetDirty: (() => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class RenderPipelineManager {
      static currentPipeline: UnityEngine.Rendering.RenderPipeline;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class RenderQueueRange {
      constructor(lowerBound: number, upperBound: number);
      static all: UnityEngine.Rendering.RenderQueueRange;
      static opaque: UnityEngine.Rendering.RenderQueueRange;
      static transparent: UnityEngine.Rendering.RenderQueueRange;
      lowerBound: number;
      upperBound: number;
      static minimumBound: number;
      static maximumBound: number;
      Equals: ((other: UnityEngine.Rendering.RenderQueueRange) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class RenderStateBlock {
      constructor(mask: UnityEngine.Rendering.RenderStateMask);
      blendState: UnityEngine.Rendering.BlendState;
      rasterState: UnityEngine.Rendering.RasterState;
      depthState: UnityEngine.Rendering.DepthState;
      stencilState: UnityEngine.Rendering.StencilState;
      stencilReference: number;
      mask: UnityEngine.Rendering.RenderStateMask;
      Equals: ((other: UnityEngine.Rendering.RenderStateBlock) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum RenderStateMask {
      Nothing = 0,
      Blend = 1,
      Raster = 2,
      Depth = 4,
      Stencil = 8,
      Everything = 15,
    }
    export declare class RenderTargetBlendState {
      constructor(writeMask?: UnityEngine.Rendering.ColorWriteMask, sourceColorBlendMode?: UnityEngine.Rendering.BlendMode, destinationColorBlendMode?: UnityEngine.Rendering.BlendMode, sourceAlphaBlendMode?: UnityEngine.Rendering.BlendMode, destinationAlphaBlendMode?: UnityEngine.Rendering.BlendMode, colorBlendOperation?: UnityEngine.Rendering.BlendOp, alphaBlendOperation?: UnityEngine.Rendering.BlendOp);
      static defaultValue: UnityEngine.Rendering.RenderTargetBlendState;
      writeMask: UnityEngine.Rendering.ColorWriteMask;
      sourceColorBlendMode: UnityEngine.Rendering.BlendMode;
      destinationColorBlendMode: UnityEngine.Rendering.BlendMode;
      sourceAlphaBlendMode: UnityEngine.Rendering.BlendMode;
      destinationAlphaBlendMode: UnityEngine.Rendering.BlendMode;
      colorBlendOperation: UnityEngine.Rendering.BlendOp;
      alphaBlendOperation: UnityEngine.Rendering.BlendOp;
      Equals: ((other: UnityEngine.Rendering.RenderTargetBlendState) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScopedRenderPass {
      Dispose: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScopedSubPass {
      Dispose: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScriptableRenderContext {
      static EmitWorldGeometryForSceneView: ((cullingCamera: UnityEngine.Camera) => void);
      static EmitGeometryForCamera: ((camera: UnityEngine.Camera) => void);
      BeginRenderPass: ((width: number, height: number, samples: number, attachments: Unity.Collections.NativeArray<UnityEngine.Rendering.AttachmentDescriptor>, depthAttachmentIndex?: number) => void);
      BeginScopedRenderPass: ((width: number, height: number, samples: number, attachments: Unity.Collections.NativeArray<UnityEngine.Rendering.AttachmentDescriptor>, depthAttachmentIndex?: number) => UnityEngine.Rendering.ScopedRenderPass);
      BeginSubPass: ((colors: Unity.Collections.NativeArray<number>, inputs: Unity.Collections.NativeArray<number>, isDepthReadOnly: boolean, isStencilReadOnly: boolean) => void) | ((colors: Unity.Collections.NativeArray<number>, inputs: Unity.Collections.NativeArray<number>, isDepthStencilReadOnly?: boolean) => void) | ((colors: Unity.Collections.NativeArray<number>, isDepthReadOnly: boolean, isStencilReadOnly: boolean) => void) | ((colors: Unity.Collections.NativeArray<number>, isDepthStencilReadOnly?: boolean) => void);
      BeginScopedSubPass: ((colors: Unity.Collections.NativeArray<number>, inputs: Unity.Collections.NativeArray<number>, isDepthReadOnly: boolean, isStencilReadOnly: boolean) => UnityEngine.Rendering.ScopedSubPass) | ((colors: Unity.Collections.NativeArray<number>, inputs: Unity.Collections.NativeArray<number>, isDepthStencilReadOnly?: boolean) => UnityEngine.Rendering.ScopedSubPass) | ((colors: Unity.Collections.NativeArray<number>, isDepthReadOnly: boolean, isStencilReadOnly: boolean) => UnityEngine.Rendering.ScopedSubPass) | ((colors: Unity.Collections.NativeArray<number>, isDepthStencilReadOnly?: boolean) => UnityEngine.Rendering.ScopedSubPass);
      EndSubPass: (() => void);
      EndRenderPass: (() => void);
      Submit: (() => void);
      ExecuteCommandBuffer: ((commandBuffer: UnityEngine.Rendering.CommandBuffer) => void);
      ExecuteCommandBufferAsync: ((commandBuffer: UnityEngine.Rendering.CommandBuffer, queueType: UnityEngine.Rendering.ComputeQueueType) => void);
      SetupCameraProperties: ((camera: UnityEngine.Camera, stereoSetup?: boolean) => void) | ((camera: UnityEngine.Camera, stereoSetup: boolean, eye: number) => void);
      StereoEndRender: ((camera: UnityEngine.Camera) => void) | ((camera: UnityEngine.Camera, eye: number) => void) | ((camera: UnityEngine.Camera, eye: number, isFinalPass: boolean) => void);
      StartMultiEye: ((camera: UnityEngine.Camera) => void) | ((camera: UnityEngine.Camera, eye: number) => void);
      StopMultiEye: ((camera: UnityEngine.Camera) => void);
      DrawSkybox: ((camera: UnityEngine.Camera) => void);
      InvokeOnRenderObjectCallback: (() => void);
      DrawGizmos: ((camera: UnityEngine.Camera, gizmoSubset: UnityEngine.Rendering.GizmoSubset) => void);
      DrawWireOverlay: ((camera: UnityEngine.Camera) => void);
      DrawUIOverlay: ((camera: UnityEngine.Camera) => void);
      Equals: ((other: UnityEngine.Rendering.ScriptableRenderContext) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ShaderTagId {
      constructor(name: string);
      name: string;
      static none: UnityEngine.Rendering.ShaderTagId;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.Rendering.ShaderTagId) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ShadowDrawingSettings {
      constructor(cullingResults: UnityEngine.Rendering.CullingResults, lightIndex: number);
      cullingResults: UnityEngine.Rendering.CullingResults;
      lightIndex: number;
      useRenderingLayerMaskTest: boolean;
      splitData: UnityEngine.Rendering.ShadowSplitData;
      Equals: ((other: UnityEngine.Rendering.ShadowDrawingSettings) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ShadowSplitData {
      cullingPlaneCount: number;
      cullingSphere: UnityEngine.Vector4;
      shadowCascadeBlendCullingFactor: number;
      static maximumCullingPlaneCount: number;
      GetCullingPlane: ((index: number) => UnityEngine.Plane);
      SetCullingPlane: ((index: number, plane: UnityEngine.Plane) => void);
      Equals: ((other: UnityEngine.Rendering.ShadowSplitData) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum SortingCriteria {
      None = 0,
      SortingLayer = 1,
      RenderQueue = 2,
      BackToFront = 4,
      QuantizedFrontToBack = 8,
      OptimizeStateChanges = 16,
      CanvasOrder = 32,
      RendererPriority = 64,
      CommonOpaque = 59,
      CommonTransparent = 23,
    }
    export declare class SortingLayerRange {
      constructor(lowerBound: System.Int16, upperBound: System.Int16);
      lowerBound: System.Int16;
      upperBound: System.Int16;
      static all: UnityEngine.Rendering.SortingLayerRange;
      Equals: ((other: UnityEngine.Rendering.SortingLayerRange) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum DistanceMetric {
      Perspective = 0,
      Orthographic = 1,
      CustomAxis = 2,
    }
    export declare class SortingSettings {
      constructor(camera: UnityEngine.Camera);
      worldToCameraMatrix: UnityEngine.Matrix4x4;
      cameraPosition: UnityEngine.Vector3;
      customAxis: UnityEngine.Vector3;
      criteria: UnityEngine.Rendering.SortingCriteria;
      distanceMetric: UnityEngine.Rendering.DistanceMetric;
      Equals: ((other: UnityEngine.Rendering.SortingSettings) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StencilState {
      constructor(enabled?: boolean, readMask?: System.Byte, writeMask?: System.Byte, compareFunction?: UnityEngine.Rendering.CompareFunction, passOperation?: UnityEngine.Rendering.StencilOp, failOperation?: UnityEngine.Rendering.StencilOp, zFailOperation?: UnityEngine.Rendering.StencilOp);
      constructor(enabled: boolean, readMask: System.Byte, writeMask: System.Byte, compareFunctionFront: UnityEngine.Rendering.CompareFunction, passOperationFront: UnityEngine.Rendering.StencilOp, failOperationFront: UnityEngine.Rendering.StencilOp, zFailOperationFront: UnityEngine.Rendering.StencilOp, compareFunctionBack: UnityEngine.Rendering.CompareFunction, passOperationBack: UnityEngine.Rendering.StencilOp, failOperationBack: UnityEngine.Rendering.StencilOp, zFailOperationBack: UnityEngine.Rendering.StencilOp);
      static defaultValue: UnityEngine.Rendering.StencilState;
      enabled: boolean;
      readMask: System.Byte;
      writeMask: System.Byte;
      compareFunctionFront: UnityEngine.Rendering.CompareFunction;
      passOperationFront: UnityEngine.Rendering.StencilOp;
      failOperationFront: UnityEngine.Rendering.StencilOp;
      zFailOperationFront: UnityEngine.Rendering.StencilOp;
      compareFunctionBack: UnityEngine.Rendering.CompareFunction;
      passOperationBack: UnityEngine.Rendering.StencilOp;
      failOperationBack: UnityEngine.Rendering.StencilOp;
      zFailOperationBack: UnityEngine.Rendering.StencilOp;
      SetCompareFunction: ((value: UnityEngine.Rendering.CompareFunction) => void);
      SetPassOperation: ((value: UnityEngine.Rendering.StencilOp) => void);
      SetFailOperation: ((value: UnityEngine.Rendering.StencilOp) => void);
      SetZFailOperation: ((value: UnityEngine.Rendering.StencilOp) => void);
      Equals: ((other: UnityEngine.Rendering.StencilState) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class SupportedRenderingFeatures {
      constructor();
      static active: UnityEngine.Rendering.SupportedRenderingFeatures;
      reflectionProbeModes: UnityEngine.Rendering.SupportedRenderingFeatures_ReflectionProbeModes;
      defaultMixedLightingModes: UnityEngine.Rendering.SupportedRenderingFeatures_LightmapMixedBakeModes;
      mixedLightingModes: UnityEngine.Rendering.SupportedRenderingFeatures_LightmapMixedBakeModes;
      lightmapBakeTypes: UnityEngine.LightmapBakeType;
      lightmapsModes: UnityEngine.LightmapsMode;
      enlighten: boolean;
      lightProbeProxyVolumes: boolean;
      motionVectors: boolean;
      receiveShadows: boolean;
      reflectionProbes: boolean;
      rendererPriority: boolean;
      terrainDetailUnsupported: boolean;
      rendersUIOverlay: boolean;
      overridesEnvironmentLighting: boolean;
      overridesFog: boolean;
      overridesRealtimeReflectionProbes: boolean;
      overridesOtherLightingSettings: boolean;
      editableMaterialRenderQueue: boolean;
      overridesLODBias: boolean;
      overridesMaximumLODLevel: boolean;
      rendererProbes: boolean;
      particleSystemInstancing: boolean;
      overridesShadowmask: boolean;
      overrideShadowmaskMessage: string;
      shadowmaskMessage: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum SupportedRenderingFeatures_ReflectionProbeModes {
      None = 0,
      Rotation = 1,
    }
    export enum SupportedRenderingFeatures_LightmapMixedBakeModes {
      None = 0,
      IndirectOnly = 1,
      Subtractive = 2,
      Shadowmask = 4,
    }
    export declare class VisibleLight {
      light: UnityEngine.Light;
      lightType: UnityEngine.LightType;
      finalColor: UnityEngine.Color;
      screenRect: UnityEngine.Rect;
      localToWorldMatrix: UnityEngine.Matrix4x4;
      range: number;
      spotAngle: number;
      intersectsNearPlane: boolean;
      intersectsFarPlane: boolean;
      Equals: ((other: UnityEngine.Rendering.VisibleLight) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class VisibleReflectionProbe {
      texture: UnityEngine.Texture;
      reflectionProbe: UnityEngine.ReflectionProbe;
      bounds: UnityEngine.Bounds;
      localToWorldMatrix: UnityEngine.Matrix4x4;
      hdrData: UnityEngine.Vector4;
      center: UnityEngine.Vector3;
      blendDistance: number;
      importance: number;
      isBoxProjection: boolean;
      Equals: ((other: UnityEngine.Rendering.VisibleReflectionProbe) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PlatformKeywordSet {
      IsEnabled: ((define: UnityEngine.Rendering.BuiltinShaderDefine) => boolean);
      Enable: ((define: UnityEngine.Rendering.BuiltinShaderDefine) => void);
      Disable: ((define: UnityEngine.Rendering.BuiltinShaderDefine) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum ShaderKeywordType {
      None = 0,
      BuiltinDefault = 2,
      BuiltinExtra = 6,
      BuiltinAutoStripped = 10,
      UserDefined = 16,
    }
    export declare class ShaderKeyword {
      constructor(keywordName: string);
      constructor(shader: UnityEngine.Shader, keywordName: string);
      constructor(shader: UnityEngine.ComputeShader, keywordName: string);
      index: number;
      static GetGlobalKeywordName: ((index: UnityEngine.Rendering.ShaderKeyword) => string);
      static GetGlobalKeywordType: ((index: UnityEngine.Rendering.ShaderKeyword) => UnityEngine.Rendering.ShaderKeywordType);
      static IsKeywordLocal: ((index: UnityEngine.Rendering.ShaderKeyword) => boolean);
      static GetKeywordName: ((shader: UnityEngine.Shader, index: UnityEngine.Rendering.ShaderKeyword) => string) | ((shader: UnityEngine.ComputeShader, index: UnityEngine.Rendering.ShaderKeyword) => string) | (() => string);
      static GetKeywordType: ((shader: UnityEngine.Shader, index: UnityEngine.Rendering.ShaderKeyword) => UnityEngine.Rendering.ShaderKeywordType) | ((shader: UnityEngine.ComputeShader, index: UnityEngine.Rendering.ShaderKeyword) => UnityEngine.Rendering.ShaderKeywordType) | (() => UnityEngine.Rendering.ShaderKeywordType);
      IsValid: (() => boolean);
      GetName: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ShaderKeywordSet {
      IsEnabled: ((keyword: UnityEngine.Rendering.ShaderKeyword) => boolean);
      Enable: ((keyword: UnityEngine.Rendering.ShaderKeyword) => void);
      Disable: ((keyword: UnityEngine.Rendering.ShaderKeyword) => void);
      GetShaderKeywords: (() => UnityEngine.Rendering.ShaderKeyword[]);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum ShaderPropertyType {
      Color = 0,
      Vector = 1,
      Float = 2,
      Range = 3,
      Texture = 4,
    }
    export enum ShaderPropertyFlags {
      None = 0,
      HideInInspector = 1,
      PerRendererData = 2,
      NoScaleOffset = 4,
      Normal = 8,
      HDR = 16,
      Gamma = 32,
      NonModifiableTextureData = 64,
      MainTexture = 128,
      MainColor = 256,
    }
    export declare class SortingGroup {
      constructor();
      sortingLayerName: string;
      sortingLayerID: number;
      sortingOrder: number;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      static UpdateAllSortingGroups: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace SceneManagement {
    export declare class Scene {
      handle: number;
      path: string;
      name: string;
      isLoaded: boolean;
      buildIndex: number;
      isDirty: boolean;
      rootCount: number;
      isSubScene: boolean;
      IsValid: (() => boolean);
      GetRootGameObjects: (() => UnityEngine.GameObject[]) | ((rootGameObjects: UnityEngine.GameObject[]) => void);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class SceneManagerAPI {
      static overrideAPI: UnityEngine.SceneManagement.SceneManagerAPI;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SceneManager {
      constructor();
      static sceneCount: number;
      static sceneCountInBuildSettings: number;
      static GetActiveScene: (() => UnityEngine.SceneManagement.Scene);
      static SetActiveScene: ((scene: UnityEngine.SceneManagement.Scene) => boolean);
      static GetSceneByPath: ((scenePath: string) => UnityEngine.SceneManagement.Scene);
      static GetSceneByName: ((name: string) => UnityEngine.SceneManagement.Scene);
      static GetSceneByBuildIndex: ((buildIndex: number) => UnityEngine.SceneManagement.Scene);
      static GetSceneAt: ((index: number) => UnityEngine.SceneManagement.Scene);
      static CreateScene: ((sceneName: string, parameters: UnityEngine.SceneManagement.CreateSceneParameters) => UnityEngine.SceneManagement.Scene) | ((sceneName: string) => UnityEngine.SceneManagement.Scene);
      static MergeScenes: ((sourceScene: UnityEngine.SceneManagement.Scene, destinationScene: UnityEngine.SceneManagement.Scene) => void);
      static MoveGameObjectToScene: ((go: UnityEngine.GameObject, scene: UnityEngine.SceneManagement.Scene) => void);
      static GetAllScenes: (() => UnityEngine.SceneManagement.Scene[]);
      static LoadScene: ((sceneName: string, mode: UnityEngine.SceneManagement.LoadSceneMode) => void) | ((sceneName: string) => void) | ((sceneName: string, parameters: UnityEngine.SceneManagement.LoadSceneParameters) => UnityEngine.SceneManagement.Scene) | ((sceneBuildIndex: number, mode: UnityEngine.SceneManagement.LoadSceneMode) => void) | ((sceneBuildIndex: number) => void) | ((sceneBuildIndex: number, parameters: UnityEngine.SceneManagement.LoadSceneParameters) => UnityEngine.SceneManagement.Scene);
      static LoadSceneAsync: ((sceneBuildIndex: number, mode: UnityEngine.SceneManagement.LoadSceneMode) => UnityEngine.AsyncOperation) | ((sceneBuildIndex: number) => UnityEngine.AsyncOperation) | ((sceneBuildIndex: number, parameters: UnityEngine.SceneManagement.LoadSceneParameters) => UnityEngine.AsyncOperation) | ((sceneName: string, mode: UnityEngine.SceneManagement.LoadSceneMode) => UnityEngine.AsyncOperation) | ((sceneName: string) => UnityEngine.AsyncOperation) | ((sceneName: string, parameters: UnityEngine.SceneManagement.LoadSceneParameters) => UnityEngine.AsyncOperation);
      static UnloadScene: ((scene: UnityEngine.SceneManagement.Scene) => boolean) | ((sceneBuildIndex: number) => boolean) | ((sceneName: string) => boolean);
      static UnloadSceneAsync: ((sceneBuildIndex: number) => UnityEngine.AsyncOperation) | ((sceneName: string) => UnityEngine.AsyncOperation) | ((scene: UnityEngine.SceneManagement.Scene) => UnityEngine.AsyncOperation) | ((sceneBuildIndex: number, options: UnityEngine.SceneManagement.UnloadSceneOptions) => UnityEngine.AsyncOperation) | ((sceneName: string, options: UnityEngine.SceneManagement.UnloadSceneOptions) => UnityEngine.AsyncOperation) | ((scene: UnityEngine.SceneManagement.Scene, options: UnityEngine.SceneManagement.UnloadSceneOptions) => UnityEngine.AsyncOperation);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum LoadSceneMode {
      Single = 0,
      Additive = 1,
    }
    export enum LocalPhysicsMode {
      None = 0,
      Physics2D = 1,
      Physics3D = 2,
    }
    export declare class LoadSceneParameters {
      constructor(mode: UnityEngine.SceneManagement.LoadSceneMode);
      constructor(mode: UnityEngine.SceneManagement.LoadSceneMode, physicsMode: UnityEngine.SceneManagement.LocalPhysicsMode);
      loadSceneMode: UnityEngine.SceneManagement.LoadSceneMode;
      localPhysicsMode: UnityEngine.SceneManagement.LocalPhysicsMode;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CreateSceneParameters {
      constructor(physicsMode: UnityEngine.SceneManagement.LocalPhysicsMode);
      localPhysicsMode: UnityEngine.SceneManagement.LocalPhysicsMode;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum UnloadSceneOptions {
      None = 0,
      UnloadAllEmbeddedSceneObjects = 1,
    }
    export declare class SceneUtility {
      static GetScenePathByBuildIndex: ((buildIndex: number) => string);
      static GetBuildIndexByScenePath: ((scenePath: string) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace Scripting {
    export declare class GarbageCollector {
      static GCMode: UnityEngine.Scripting.GarbageCollector_Mode;
      static isIncremental: boolean;
      static incrementalTimeSliceNanoseconds: System.UInt64;
      static CollectIncremental: ((nanoseconds?: System.UInt64) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum GarbageCollector_Mode {
      Disabled = 0,
      Enabled = 1,
      Manual = 2,
    }
  }
  export namespace Serialization {
    export declare class UnitySurrogateSelector {
      constructor();
      ChainSelector: ((selector: System.Runtime.Serialization.ISurrogateSelector) => void);
      GetNextSelector: (() => System.Runtime.Serialization.ISurrogateSelector);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace Sprites {
    export declare class DataUtility {
      constructor();
      static GetInnerUV: ((sprite: UnityEngine.Sprite) => UnityEngine.Vector4);
      static GetOuterUV: ((sprite: UnityEngine.Sprite) => UnityEngine.Vector4);
      static GetPadding: ((sprite: UnityEngine.Sprite) => UnityEngine.Vector4);
      static GetMinSize: ((sprite: UnityEngine.Sprite) => UnityEngine.Vector2);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace TestTools {
    export declare class CoveredSequencePoint {
      method: System.Reflection.MethodBase;
      ilOffset: System.UInt32;
      hitCount: System.UInt32;
      filename: string;
      line: System.UInt32;
      column: System.UInt32;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CoveredMethodStats {
      method: System.Reflection.MethodBase;
      totalSequencePoints: number;
      uncoveredSequencePoints: number;
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Coverage {
      static enabled: boolean;
      static GetSequencePointsFor: ((method: System.Reflection.MethodBase) => UnityEngine.TestTools.CoveredSequencePoint[]);
      static GetStatsFor: ((method: System.Reflection.MethodBase) => UnityEngine.TestTools.CoveredMethodStats) | ((methods: System.Reflection.MethodBase[]) => UnityEngine.TestTools.CoveredMethodStats[]) | ((type: System.Type) => UnityEngine.TestTools.CoveredMethodStats[]);
      static GetStatsForAllCoveredMethods: (() => UnityEngine.TestTools.CoveredMethodStats[]);
      static ResetFor: ((method: System.Reflection.MethodBase) => void);
      static ResetAll: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace tvOS {
    export declare class Remote {
      constructor();
      static allowExitToHome: boolean;
      static allowRemoteRotation: boolean;
      static reportAbsoluteDpadValues: boolean;
      static touchesEnabled: boolean;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum DeviceGeneration {
      Unknown = 0,
      AppleTV1Gen = 1001,
      AppleTV2Gen = 1002,
    }
    export declare class Device {
      constructor();
      static systemVersion: string;
      static generation: UnityEngine.tvOS.DeviceGeneration;
      static vendorIdentifier: string;
      static advertisingIdentifier: string;
      static advertisingTrackingEnabled: boolean;
      static SetNoBackupFlag: ((path: string) => void);
      static ResetNoBackupFlag: ((path: string) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace U2D {
    export declare class PixelPerfectRendering {
      static pixelSnapSpacing: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SpriteBone {
      name: string;
      position: UnityEngine.Vector3;
      rotation: UnityEngine.Quaternion;
      length: number;
      parentId: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class SpriteDataAccessExtensions {
      static GetBindPoses: ((sprite: UnityEngine.Sprite) => any);
      static SetBindPoses: ((sprite: UnityEngine.Sprite, src: any) => void);
      static GetIndices: ((sprite: UnityEngine.Sprite) => any);
      static SetIndices: ((sprite: UnityEngine.Sprite, src: any) => void);
      static GetBones: ((sprite: UnityEngine.Sprite) => UnityEngine.U2D.SpriteBone[]);
      static SetBones: ((sprite: UnityEngine.Sprite, src: UnityEngine.U2D.SpriteBone[]) => void);
      static HasVertexAttribute: ((sprite: UnityEngine.Sprite, channel: UnityEngine.Rendering.VertexAttribute) => boolean);
      static SetVertexCount: ((sprite: UnityEngine.Sprite, count: number) => void);
      static GetVertexCount: ((sprite: UnityEngine.Sprite) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SpriteRendererDataAccessExtensions {
      static DeactivateDeformableBuffer: ((renderer: UnityEngine.SpriteRenderer) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SpriteAtlasManager {
      constructor();
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SpriteAtlas {
      constructor();
      isVariant: boolean;
      tag: string;
      spriteCount: number;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CanBindTo: ((sprite: UnityEngine.Sprite) => boolean);
      GetSprite: ((name: string) => UnityEngine.Sprite);
      GetSprites: ((sprites: UnityEngine.Sprite[]) => number) | ((sprites: UnityEngine.Sprite[], name: string) => number);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
  }
  export namespace UI {
    export declare class AnimationTriggers {
      constructor();
      normalTrigger: string;
      highlightedTrigger: string;
      pressedTrigger: string;
      selectedTrigger: string;
      disabledTrigger: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Button {
      onClick: UnityEngine.UI.Button_ButtonClickedEvent;
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      OnPointerClick: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSubmit: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum CanvasUpdate {
      Prelayout = 0,
      Layout = 1,
      PostLayout = 2,
      PreRender = 3,
      LatePreRender = 4,
      MaxUpdateValue = 5,
    }
    export interface ICanvasElement {
      transform: UnityEngine.Transform;
      Rebuild: ((executing: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      IsDestroyed: (() => boolean);
    }
    export declare class CanvasUpdateRegistry {
      static instance: UnityEngine.UI.CanvasUpdateRegistry;
      static RegisterCanvasElementForLayoutRebuild: ((element: UnityEngine.UI.ICanvasElement) => void);
      static TryRegisterCanvasElementForLayoutRebuild: ((element: UnityEngine.UI.ICanvasElement) => boolean);
      static RegisterCanvasElementForGraphicRebuild: ((element: UnityEngine.UI.ICanvasElement) => void);
      static TryRegisterCanvasElementForGraphicRebuild: ((element: UnityEngine.UI.ICanvasElement) => boolean);
      static UnRegisterCanvasElementForRebuild: ((element: UnityEngine.UI.ICanvasElement) => void);
      static IsRebuildingLayout: (() => boolean);
      static IsRebuildingGraphics: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ColorBlock {
      normalColor: UnityEngine.Color;
      highlightedColor: UnityEngine.Color;
      pressedColor: UnityEngine.Color;
      selectedColor: UnityEngine.Color;
      disabledColor: UnityEngine.Color;
      colorMultiplier: number;
      fadeDuration: number;
      static defaultColorBlock: UnityEngine.UI.ColorBlock;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.UI.ColorBlock) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ClipperRegistry {
      static instance: UnityEngine.UI.ClipperRegistry;
      Cull: (() => void);
      static Register: ((c: UnityEngine.UI.IClipper) => void);
      static Unregister: ((c: UnityEngine.UI.IClipper) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Clipping {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IClipper {
      PerformClipping: (() => void);
    }
    export interface IClippable {
      gameObject: UnityEngine.GameObject;
      rectTransform: UnityEngine.RectTransform;
      RecalculateClipping: (() => void);
      Cull: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipRect: ((value: UnityEngine.Rect, validRect: boolean) => void);
      SetClipSoftness: ((clipSoftness: UnityEngine.Vector2) => void);
    }
    export declare class DefaultControls {
      static factory: UnityEngine.UI.DefaultControls_IFactoryControls;
      static CreatePanel: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateButton: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateText: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateImage: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateRawImage: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateSlider: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateScrollbar: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateToggle: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateInputField: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateDropdown: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      static CreateScrollView: ((resources: UnityEngine.UI.DefaultControls_Resources) => UnityEngine.GameObject);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Dropdown {
      template: UnityEngine.RectTransform;
      captionText: UnityEngine.UI.Text;
      captionImage: UnityEngine.UI.Image;
      itemText: UnityEngine.UI.Text;
      itemImage: UnityEngine.UI.Image;
      options: UnityEngine.UI.Dropdown_OptionData[];
      onValueChanged: UnityEngine.UI.Dropdown_DropdownEvent;
      alphaFadeSpeed: number;
      value: number;
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetValueWithoutNotify: ((input: number) => void);
      RefreshShownValue: (() => void);
      AddOptions: ((options: UnityEngine.UI.Dropdown_OptionData[]) => void) | ((options: string[]) => void) | ((options: UnityEngine.Sprite[]) => void);
      ClearOptions: (() => void);
      OnPointerClick: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSubmit: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnCancel: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Show: (() => void);
      Hide: (() => void);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class FontData {
      constructor();
      static defaultFontData: UnityEngine.UI.FontData;
      font: UnityEngine.Font;
      fontSize: number;
      fontStyle: UnityEngine.FontStyle;
      bestFit: boolean;
      minSize: number;
      maxSize: number;
      alignment: UnityEngine.TextAnchor;
      alignByGeometry: boolean;
      richText: boolean;
      horizontalOverflow: UnityEngine.HorizontalWrapMode;
      verticalOverflow: UnityEngine.VerticalWrapMode;
      lineSpacing: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class FontUpdateTracker {
      static TrackText: ((t: UnityEngine.UI.Text) => void);
      static UntrackText: ((t: UnityEngine.UI.Text) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Graphic {
      static defaultGraphicMaterial: UnityEngine.Material;
      color: UnityEngine.Color;
      raycastTarget: boolean;
      raycastPadding: UnityEngine.Vector4;
      depth: number;
      rectTransform: UnityEngine.RectTransform;
      canvas: UnityEngine.Canvas;
      canvasRenderer: UnityEngine.CanvasRenderer;
      defaultMaterial: UnityEngine.Material;
      material: UnityEngine.Material;
      materialForRendering: UnityEngine.Material;
      mainTexture: UnityEngine.Texture;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetAllDirty: (() => void);
      SetLayoutDirty: (() => void);
      SetVerticesDirty: (() => void);
      SetMaterialDirty: (() => void);
      OnCullingChanged: (() => void);
      Rebuild: ((update: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      OnRebuildRequested: (() => void);
      SetNativeSize: (() => void);
      Raycast: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      PixelAdjustPoint: ((point: UnityEngine.Vector2) => UnityEngine.Vector2);
      GetPixelAdjustedRect: (() => UnityEngine.Rect);
      CrossFadeColor: ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean) => void) | ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean) => void);
      CrossFadeAlpha: ((alpha: number, duration: number, ignoreTimeScale: boolean) => void);
      RegisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class GraphicRaycaster {
      sortOrderPriority: number;
      renderOrderPriority: number;
      ignoreReversedGraphics: boolean;
      blockingObjects: UnityEngine.UI.GraphicRaycaster_BlockingObjects;
      blockingMask: UnityEngine.LayerMask;
      eventCamera: UnityEngine.Camera;
      priority: number;
      rootRaycaster: UnityEngine.EventSystems.BaseRaycaster;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Raycast: ((eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: UnityEngine.EventSystems.RaycastResult[]) => void);
      ToString: (() => string);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      GetType: (() => System.Type);
    }
    export declare class GraphicRebuildTracker {
      static TrackGraphic: ((g: UnityEngine.UI.Graphic) => void);
      static UnTrackGraphic: ((g: UnityEngine.UI.Graphic) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class GraphicRegistry {
      static instance: UnityEngine.UI.GraphicRegistry;
      static RegisterGraphicForCanvas: ((c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic) => void);
      static RegisterRaycastGraphicForCanvas: ((c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic) => void);
      static UnregisterGraphicForCanvas: ((c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic) => void);
      static UnregisterRaycastGraphicForCanvas: ((c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic) => void);
      static GetGraphicsForCanvas: ((canvas: UnityEngine.Canvas) => any);
      static GetRaycastableGraphicsForCanvas: ((canvas: UnityEngine.Canvas) => any);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IMask {
      rectTransform: UnityEngine.RectTransform;
      Enabled: (() => boolean);
    }
    export interface IMaskable {
      RecalculateMasking: (() => void);
    }
    export declare class Image {
      sprite: UnityEngine.Sprite;
      overrideSprite: UnityEngine.Sprite;
      type: UnityEngine.UI.Image_Type;
      preserveAspect: boolean;
      fillCenter: boolean;
      fillMethod: UnityEngine.UI.Image_FillMethod;
      fillAmount: number;
      fillClockwise: boolean;
      fillOrigin: number;
      eventAlphaThreshold: number;
      alphaHitTestMinimumThreshold: number;
      useSpriteMesh: boolean;
      static defaultETC1GraphicMaterial: UnityEngine.Material;
      mainTexture: UnityEngine.Texture;
      hasBorder: boolean;
      pixelsPerUnitMultiplier: number;
      pixelsPerUnit: number;
      material: UnityEngine.Material;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      onCullStateChanged: UnityEngine.UI.MaskableGraphic_CullStateChangedEvent;
      maskable: boolean;
      isMaskingGraphic: boolean;
      color: UnityEngine.Color;
      raycastTarget: boolean;
      raycastPadding: UnityEngine.Vector4;
      depth: number;
      rectTransform: UnityEngine.RectTransform;
      canvas: UnityEngine.Canvas;
      canvasRenderer: UnityEngine.CanvasRenderer;
      defaultMaterial: UnityEngine.Material;
      materialForRendering: UnityEngine.Material;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      DisableSpriteOptimizations: (() => void);
      OnBeforeSerialize: (() => void);
      OnAfterDeserialize: (() => void);
      SetNativeSize: (() => void);
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      IsRaycastLocationValid: ((screenPoint: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      GetModifiedMaterial: ((baseMaterial: UnityEngine.Material) => UnityEngine.Material);
      Cull: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipRect: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipSoftness: ((clipSoftness: UnityEngine.Vector2) => void);
      ParentMaskStateChanged: (() => void);
      RecalculateClipping: (() => void);
      RecalculateMasking: (() => void);
      SetAllDirty: (() => void);
      SetLayoutDirty: (() => void);
      SetVerticesDirty: (() => void);
      SetMaterialDirty: (() => void);
      OnCullingChanged: (() => void);
      Rebuild: ((update: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      OnRebuildRequested: (() => void);
      Raycast: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      PixelAdjustPoint: ((point: UnityEngine.Vector2) => UnityEngine.Vector2);
      GetPixelAdjustedRect: (() => UnityEngine.Rect);
      CrossFadeColor: ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean) => void) | ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean) => void);
      CrossFadeAlpha: ((alpha: number, duration: number, ignoreTimeScale: boolean) => void);
      RegisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class InputField {
      shouldHideMobileInput: boolean;
      text: string;
      isFocused: boolean;
      caretBlinkRate: number;
      caretWidth: number;
      textComponent: UnityEngine.UI.Text;
      placeholder: UnityEngine.UI.Graphic;
      caretColor: UnityEngine.Color;
      customCaretColor: boolean;
      selectionColor: UnityEngine.Color;
      onEndEdit: UnityEngine.UI.InputField_SubmitEvent;
      onValueChange: UnityEngine.UI.InputField_OnChangeEvent;
      onValueChanged: UnityEngine.UI.InputField_OnChangeEvent;
      onValidateInput: UnityEngine.UI.InputField_OnValidateInput;
      characterLimit: number;
      contentType: UnityEngine.UI.InputField_ContentType;
      lineType: UnityEngine.UI.InputField_LineType;
      inputType: UnityEngine.UI.InputField_InputType;
      touchScreenKeyboard: UnityEngine.TouchScreenKeyboard;
      keyboardType: UnityEngine.TouchScreenKeyboardType;
      characterValidation: UnityEngine.UI.InputField_CharacterValidation;
      readOnly: boolean;
      multiLine: boolean;
      asteriskChar: System.Char;
      wasCanceled: boolean;
      caretSelectPosition: number;
      caretPosition: number;
      selectionAnchorPosition: number;
      selectionFocusPosition: number;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetTextWithoutNotify: ((input: string) => void);
      MoveTextEnd: ((shift: boolean) => void);
      MoveTextStart: ((shift: boolean) => void);
      ScreenToLocal: ((screen: UnityEngine.Vector2) => UnityEngine.Vector2);
      OnBeginDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnEndDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      ProcessEvent: ((e: UnityEngine.Event) => void);
      OnUpdateSelected: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      ForceLabelUpdate: (() => void);
      Rebuild: ((update: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      ActivateInputField: (() => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnPointerClick: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      DeactivateInputField: (() => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnSubmit: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class AspectRatioFitter {
      aspectMode: UnityEngine.UI.AspectRatioFitter_AspectMode;
      aspectRatio: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsComponentValidOnObject: (() => boolean);
      IsAspectModeValid: (() => boolean);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CanvasScaler {
      uiScaleMode: UnityEngine.UI.CanvasScaler_ScaleMode;
      referencePixelsPerUnit: number;
      scaleFactor: number;
      referenceResolution: UnityEngine.Vector2;
      screenMatchMode: UnityEngine.UI.CanvasScaler_ScreenMatchMode;
      matchWidthOrHeight: number;
      physicalUnit: UnityEngine.UI.CanvasScaler_Unit;
      fallbackScreenDPI: number;
      defaultSpriteDPI: number;
      dynamicPixelsPerUnit: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ContentSizeFitter {
      horizontalFit: UnityEngine.UI.ContentSizeFitter_FitMode;
      verticalFit: UnityEngine.UI.ContentSizeFitter_FitMode;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class GridLayoutGroup {
      startCorner: UnityEngine.UI.GridLayoutGroup_Corner;
      startAxis: UnityEngine.UI.GridLayoutGroup_Axis;
      cellSize: UnityEngine.Vector2;
      spacing: UnityEngine.Vector2;
      constraint: UnityEngine.UI.GridLayoutGroup_Constraint;
      constraintCount: number;
      padding: UnityEngine.RectOffset;
      childAlignment: UnityEngine.TextAnchor;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class HorizontalLayoutGroup {
      spacing: number;
      childForceExpandWidth: boolean;
      childForceExpandHeight: boolean;
      childControlWidth: boolean;
      childControlHeight: boolean;
      childScaleWidth: boolean;
      childScaleHeight: boolean;
      reverseArrangement: boolean;
      padding: UnityEngine.RectOffset;
      childAlignment: UnityEngine.TextAnchor;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class HorizontalOrVerticalLayoutGroup {
      spacing: number;
      childForceExpandWidth: boolean;
      childForceExpandHeight: boolean;
      childControlWidth: boolean;
      childControlHeight: boolean;
      childScaleWidth: boolean;
      childScaleHeight: boolean;
      reverseArrangement: boolean;
      padding: UnityEngine.RectOffset;
      childAlignment: UnityEngine.TextAnchor;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface ILayoutElement {
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
    }
    export interface ILayoutController {
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
    }
    export interface ILayoutGroup {
    }
    export interface ILayoutSelfController {
    }
    export interface ILayoutIgnorer {
      ignoreLayout: boolean;
    }
    export declare class LayoutElement {
      ignoreLayout: boolean;
      minWidth: number;
      minHeight: number;
      preferredWidth: number;
      preferredHeight: number;
      flexibleWidth: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class LayoutGroup {
      padding: UnityEngine.RectOffset;
      childAlignment: UnityEngine.TextAnchor;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class LayoutRebuilder {
      constructor();
      transform: UnityEngine.Transform;
      IsDestroyed: (() => boolean);
      static ForceRebuildLayoutImmediate: ((layoutRoot: UnityEngine.RectTransform) => void);
      Rebuild: ((executing: UnityEngine.UI.CanvasUpdate) => void);
      static MarkLayoutForRebuild: ((rect: UnityEngine.RectTransform) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      GetHashCode: (() => number);
      Equals: ((obj: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class LayoutUtility {
      static GetMinSize: ((rect: UnityEngine.RectTransform, axis: number) => number);
      static GetPreferredSize: ((rect: UnityEngine.RectTransform, axis: number) => number);
      static GetFlexibleSize: ((rect: UnityEngine.RectTransform, axis: number) => number);
      static GetMinWidth: ((rect: UnityEngine.RectTransform) => number);
      static GetPreferredWidth: ((rect: UnityEngine.RectTransform) => number);
      static GetFlexibleWidth: ((rect: UnityEngine.RectTransform) => number);
      static GetMinHeight: ((rect: UnityEngine.RectTransform) => number);
      static GetPreferredHeight: ((rect: UnityEngine.RectTransform) => number);
      static GetFlexibleHeight: ((rect: UnityEngine.RectTransform) => number);
      static GetLayoutProperty: ((rect: UnityEngine.RectTransform, property: any, defaultValue: number) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VerticalLayoutGroup {
      spacing: number;
      childForceExpandWidth: boolean;
      childForceExpandHeight: boolean;
      childControlWidth: boolean;
      childControlHeight: boolean;
      childScaleWidth: boolean;
      childScaleHeight: boolean;
      reverseArrangement: boolean;
      padding: UnityEngine.RectOffset;
      childAlignment: UnityEngine.TextAnchor;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Mask {
      rectTransform: UnityEngine.RectTransform;
      showMaskGraphic: boolean;
      graphic: UnityEngine.UI.Graphic;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      MaskEnabled: (() => boolean);
      OnSiblingGraphicEnabledDisabled: (() => void);
      IsRaycastLocationValid: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      GetModifiedMaterial: ((baseMaterial: UnityEngine.Material) => UnityEngine.Material);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class MaskUtilities {
      constructor();
      static Notify2DMaskStateChanged: ((mask: UnityEngine.Component) => void);
      static NotifyStencilStateChanged: ((mask: UnityEngine.Component) => void);
      static FindRootSortOverrideCanvas: ((start: UnityEngine.Transform) => UnityEngine.Transform);
      static GetStencilDepth: ((transform: UnityEngine.Transform, stopAfter: UnityEngine.Transform) => number);
      static IsDescendantOrSelf: ((father: UnityEngine.Transform, child: UnityEngine.Transform) => boolean);
      static GetRectMaskForClippable: ((clippable: UnityEngine.UI.IClippable) => UnityEngine.UI.RectMask2D);
      static GetRectMasksForClip: ((clipper: UnityEngine.UI.RectMask2D, masks: UnityEngine.UI.RectMask2D[]) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MaskableGraphic {
      onCullStateChanged: UnityEngine.UI.MaskableGraphic_CullStateChangedEvent;
      maskable: boolean;
      isMaskingGraphic: boolean;
      color: UnityEngine.Color;
      raycastTarget: boolean;
      raycastPadding: UnityEngine.Vector4;
      depth: number;
      rectTransform: UnityEngine.RectTransform;
      canvas: UnityEngine.Canvas;
      canvasRenderer: UnityEngine.CanvasRenderer;
      defaultMaterial: UnityEngine.Material;
      material: UnityEngine.Material;
      materialForRendering: UnityEngine.Material;
      mainTexture: UnityEngine.Texture;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetModifiedMaterial: ((baseMaterial: UnityEngine.Material) => UnityEngine.Material);
      Cull: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipRect: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipSoftness: ((clipSoftness: UnityEngine.Vector2) => void);
      ParentMaskStateChanged: (() => void);
      RecalculateClipping: (() => void);
      RecalculateMasking: (() => void);
      SetAllDirty: (() => void);
      SetLayoutDirty: (() => void);
      SetVerticesDirty: (() => void);
      SetMaterialDirty: (() => void);
      OnCullingChanged: (() => void);
      Rebuild: ((update: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      OnRebuildRequested: (() => void);
      SetNativeSize: (() => void);
      Raycast: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      PixelAdjustPoint: ((point: UnityEngine.Vector2) => UnityEngine.Vector2);
      GetPixelAdjustedRect: (() => UnityEngine.Rect);
      CrossFadeColor: ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean) => void) | ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean) => void);
      CrossFadeAlpha: ((alpha: number, duration: number, ignoreTimeScale: boolean) => void);
      RegisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface IMaterialModifier {
      GetModifiedMaterial: ((baseMaterial: UnityEngine.Material) => UnityEngine.Material);
    }
    export declare class Navigation {
      mode: UnityEngine.UI.Navigation_Mode;
      wrapAround: boolean;
      selectOnUp: UnityEngine.UI.Selectable;
      selectOnDown: UnityEngine.UI.Selectable;
      selectOnLeft: UnityEngine.UI.Selectable;
      selectOnRight: UnityEngine.UI.Selectable;
      static defaultNavigation: UnityEngine.UI.Navigation;
      Equals: ((other: UnityEngine.UI.Navigation) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class RawImage {
      mainTexture: UnityEngine.Texture;
      texture: UnityEngine.Texture;
      uvRect: UnityEngine.Rect;
      onCullStateChanged: UnityEngine.UI.MaskableGraphic_CullStateChangedEvent;
      maskable: boolean;
      isMaskingGraphic: boolean;
      color: UnityEngine.Color;
      raycastTarget: boolean;
      raycastPadding: UnityEngine.Vector4;
      depth: number;
      rectTransform: UnityEngine.RectTransform;
      canvas: UnityEngine.Canvas;
      canvasRenderer: UnityEngine.CanvasRenderer;
      defaultMaterial: UnityEngine.Material;
      material: UnityEngine.Material;
      materialForRendering: UnityEngine.Material;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetNativeSize: (() => void);
      GetModifiedMaterial: ((baseMaterial: UnityEngine.Material) => UnityEngine.Material);
      Cull: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipRect: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipSoftness: ((clipSoftness: UnityEngine.Vector2) => void);
      ParentMaskStateChanged: (() => void);
      RecalculateClipping: (() => void);
      RecalculateMasking: (() => void);
      SetAllDirty: (() => void);
      SetLayoutDirty: (() => void);
      SetVerticesDirty: (() => void);
      SetMaterialDirty: (() => void);
      OnCullingChanged: (() => void);
      Rebuild: ((update: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      OnRebuildRequested: (() => void);
      Raycast: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      PixelAdjustPoint: ((point: UnityEngine.Vector2) => UnityEngine.Vector2);
      GetPixelAdjustedRect: (() => UnityEngine.Rect);
      CrossFadeColor: ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean) => void) | ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean) => void);
      CrossFadeAlpha: ((alpha: number, duration: number, ignoreTimeScale: boolean) => void);
      RegisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class RectMask2D {
      padding: UnityEngine.Vector4;
      softness: UnityEngine.Vector2Int;
      canvasRect: UnityEngine.Rect;
      rectTransform: UnityEngine.RectTransform;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      IsRaycastLocationValid: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      PerformClipping: (() => void);
      UpdateClipSoftness: (() => void);
      AddClippable: ((clippable: UnityEngine.UI.IClippable) => void);
      RemoveClippable: ((clippable: UnityEngine.UI.IClippable) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ScrollRect {
      content: UnityEngine.RectTransform;
      horizontal: boolean;
      vertical: boolean;
      movementType: UnityEngine.UI.ScrollRect_MovementType;
      elasticity: number;
      inertia: boolean;
      decelerationRate: number;
      scrollSensitivity: number;
      viewport: UnityEngine.RectTransform;
      horizontalScrollbar: UnityEngine.UI.Scrollbar;
      verticalScrollbar: UnityEngine.UI.Scrollbar;
      horizontalScrollbarVisibility: UnityEngine.UI.ScrollRect_ScrollbarVisibility;
      verticalScrollbarVisibility: UnityEngine.UI.ScrollRect_ScrollbarVisibility;
      horizontalScrollbarSpacing: number;
      verticalScrollbarSpacing: number;
      onValueChanged: UnityEngine.UI.ScrollRect_ScrollRectEvent;
      velocity: UnityEngine.Vector2;
      normalizedPosition: UnityEngine.Vector2;
      horizontalNormalizedPosition: number;
      verticalNormalizedPosition: number;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Rebuild: ((executing: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      IsActive: (() => boolean);
      StopMovement: (() => void);
      OnScroll: ((data: UnityEngine.EventSystems.PointerEventData) => void);
      OnInitializePotentialDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnBeginDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnEndDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      SetLayoutHorizontal: (() => void);
      SetLayoutVertical: (() => void);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Scrollbar {
      handleRect: UnityEngine.RectTransform;
      direction: UnityEngine.UI.Scrollbar_Direction;
      value: number;
      size: number;
      numberOfSteps: number;
      onValueChanged: UnityEngine.UI.Scrollbar_ScrollEvent;
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetValueWithoutNotify: ((input: number) => void);
      Rebuild: ((executing: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      OnBeginDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnInitializePotentialDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      SetDirection: ((direction: UnityEngine.UI.Scrollbar_Direction, includeRectLayouts: boolean) => void);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Selectable {
      static allSelectablesArray: UnityEngine.UI.Selectable[];
      static allSelectableCount: number;
      static allSelectables: UnityEngine.UI.Selectable[];
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      static AllSelectablesNoAlloc: ((selectables: UnityEngine.UI.Selectable[]) => number);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Slider {
      fillRect: UnityEngine.RectTransform;
      handleRect: UnityEngine.RectTransform;
      direction: UnityEngine.UI.Slider_Direction;
      minValue: number;
      maxValue: number;
      wholeNumbers: boolean;
      value: number;
      normalizedValue: number;
      onValueChanged: UnityEngine.UI.Slider_SliderEvent;
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetValueWithoutNotify: ((input: number) => void);
      Rebuild: ((executing: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnInitializePotentialDrag: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      SetDirection: ((direction: UnityEngine.UI.Slider_Direction, includeRectLayouts: boolean) => void);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class SpriteState {
      highlightedSprite: UnityEngine.Sprite;
      pressedSprite: UnityEngine.Sprite;
      selectedSprite: UnityEngine.Sprite;
      disabledSprite: UnityEngine.Sprite;
      Equals: ((other: UnityEngine.UI.SpriteState) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StencilMaterial {
      static Add: ((baseMat: UnityEngine.Material, stencilID: number) => UnityEngine.Material) | ((baseMat: UnityEngine.Material, stencilID: number, operation: UnityEngine.Rendering.StencilOp, compareFunction: UnityEngine.Rendering.CompareFunction, colorWriteMask: UnityEngine.Rendering.ColorWriteMask) => UnityEngine.Material) | ((baseMat: UnityEngine.Material, stencilID: number, operation: UnityEngine.Rendering.StencilOp, compareFunction: UnityEngine.Rendering.CompareFunction, colorWriteMask: UnityEngine.Rendering.ColorWriteMask, readMask: number, writeMask: number) => UnityEngine.Material);
      static Remove: ((customMat: UnityEngine.Material) => void);
      static ClearAll: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Text {
      cachedTextGenerator: UnityEngine.TextGenerator;
      cachedTextGeneratorForLayout: UnityEngine.TextGenerator;
      mainTexture: UnityEngine.Texture;
      font: UnityEngine.Font;
      text: string;
      supportRichText: boolean;
      resizeTextForBestFit: boolean;
      resizeTextMinSize: number;
      resizeTextMaxSize: number;
      alignment: UnityEngine.TextAnchor;
      alignByGeometry: boolean;
      fontSize: number;
      horizontalOverflow: UnityEngine.HorizontalWrapMode;
      verticalOverflow: UnityEngine.VerticalWrapMode;
      lineSpacing: number;
      fontStyle: UnityEngine.FontStyle;
      pixelsPerUnit: number;
      minWidth: number;
      preferredWidth: number;
      flexibleWidth: number;
      minHeight: number;
      preferredHeight: number;
      flexibleHeight: number;
      layoutPriority: number;
      onCullStateChanged: UnityEngine.UI.MaskableGraphic_CullStateChangedEvent;
      maskable: boolean;
      isMaskingGraphic: boolean;
      color: UnityEngine.Color;
      raycastTarget: boolean;
      raycastPadding: UnityEngine.Vector4;
      depth: number;
      rectTransform: UnityEngine.RectTransform;
      canvas: UnityEngine.Canvas;
      canvasRenderer: UnityEngine.CanvasRenderer;
      defaultMaterial: UnityEngine.Material;
      material: UnityEngine.Material;
      materialForRendering: UnityEngine.Material;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      FontTextureChanged: (() => void);
      GetGenerationSettings: ((extents: UnityEngine.Vector2) => UnityEngine.TextGenerationSettings);
      static GetTextAnchorPivot: ((anchor: UnityEngine.TextAnchor) => UnityEngine.Vector2);
      CalculateLayoutInputHorizontal: (() => void);
      CalculateLayoutInputVertical: (() => void);
      OnRebuildRequested: (() => void);
      GetModifiedMaterial: ((baseMaterial: UnityEngine.Material) => UnityEngine.Material);
      Cull: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipRect: ((clipRect: UnityEngine.Rect, validRect: boolean) => void);
      SetClipSoftness: ((clipSoftness: UnityEngine.Vector2) => void);
      ParentMaskStateChanged: (() => void);
      RecalculateClipping: (() => void);
      RecalculateMasking: (() => void);
      SetAllDirty: (() => void);
      SetLayoutDirty: (() => void);
      SetVerticesDirty: (() => void);
      SetMaterialDirty: (() => void);
      OnCullingChanged: (() => void);
      Rebuild: ((update: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      SetNativeSize: (() => void);
      Raycast: ((sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera) => boolean);
      PixelAdjustPoint: ((point: UnityEngine.Vector2) => UnityEngine.Vector2);
      GetPixelAdjustedRect: (() => UnityEngine.Rect);
      CrossFadeColor: ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean) => void) | ((targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean) => void);
      CrossFadeAlpha: ((alpha: number, duration: number, ignoreTimeScale: boolean) => void);
      RegisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyLayoutCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyVerticesCallback: ((action: UnityEngine.Events.UnityAction) => void);
      RegisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      UnregisterDirtyMaterialCallback: ((action: UnityEngine.Events.UnityAction) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Toggle {
      group: UnityEngine.UI.ToggleGroup;
      isOn: boolean;
      navigation: UnityEngine.UI.Navigation;
      transition: UnityEngine.UI.Selectable_Transition;
      colors: UnityEngine.UI.ColorBlock;
      spriteState: UnityEngine.UI.SpriteState;
      animationTriggers: UnityEngine.UI.AnimationTriggers;
      targetGraphic: UnityEngine.UI.Graphic;
      interactable: boolean;
      image: UnityEngine.UI.Image;
      animator: UnityEngine.Animator;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      toggleTransition: UnityEngine.UI.Toggle_ToggleTransition;
      graphic: UnityEngine.UI.Graphic;
      onValueChanged: UnityEngine.UI.Toggle_ToggleEvent;
      Rebuild: ((executing: UnityEngine.UI.CanvasUpdate) => void);
      LayoutComplete: (() => void);
      GraphicUpdateComplete: (() => void);
      SetIsOnWithoutNotify: ((value: boolean) => void);
      OnPointerClick: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSubmit: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      IsInteractable: (() => boolean);
      FindSelectable: ((dir: UnityEngine.Vector3) => UnityEngine.UI.Selectable);
      FindSelectableOnLeft: (() => UnityEngine.UI.Selectable);
      FindSelectableOnRight: (() => UnityEngine.UI.Selectable);
      FindSelectableOnUp: (() => UnityEngine.UI.Selectable);
      FindSelectableOnDown: (() => UnityEngine.UI.Selectable);
      OnMove: ((eventData: UnityEngine.EventSystems.AxisEventData) => void);
      OnPointerDown: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerUp: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerEnter: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnPointerExit: ((eventData: UnityEngine.EventSystems.PointerEventData) => void);
      OnSelect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      OnDeselect: ((eventData: UnityEngine.EventSystems.BaseEventData) => void);
      Select: (() => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ToggleGroup {
      allowSwitchOff: boolean;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      NotifyToggleOn: ((toggle: UnityEngine.UI.Toggle, sendCallback?: boolean) => void);
      UnregisterToggle: ((toggle: UnityEngine.UI.Toggle) => void);
      RegisterToggle: ((toggle: UnityEngine.UI.Toggle) => void);
      EnsureValidState: (() => void);
      AnyTogglesOn: (() => boolean);
      ActiveToggles: (() => System.Collections.Generic.IEnumerable<UnityEngine.UI.Toggle>);
      GetFirstActiveToggle: (() => UnityEngine.UI.Toggle);
      SetAllTogglesOff: ((sendCallback?: boolean) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class VertexHelper {
      constructor();
      constructor(m: UnityEngine.Mesh);
      currentVertCount: number;
      currentIndexCount: number;
      Dispose: (() => void);
      Clear: (() => void);
      SetUIVertex: ((vertex: UnityEngine.UIVertex, i: number) => void);
      FillMesh: ((mesh: UnityEngine.Mesh) => void);
      AddVert: ((position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector4, uv1: UnityEngine.Vector4, uv2: UnityEngine.Vector4, uv3: UnityEngine.Vector4, normal: UnityEngine.Vector3, tangent: UnityEngine.Vector4) => void) | ((position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector4, uv1: UnityEngine.Vector4, normal: UnityEngine.Vector3, tangent: UnityEngine.Vector4) => void) | ((position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector4) => void) | ((v: UnityEngine.UIVertex) => void);
      AddTriangle: ((idx0: number, idx1: number, idx2: number) => void);
      AddUIVertexQuad: ((verts: UnityEngine.UIVertex[]) => void);
      AddUIVertexStream: ((verts: UnityEngine.UIVertex[], indices: number[]) => void);
      AddUIVertexTriangleStream: ((verts: UnityEngine.UIVertex[]) => void);
      GetUIVertexStream: ((stream: UnityEngine.UIVertex[]) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BaseVertexEffect {
      ModifyVertices: ((vertices: UnityEngine.UIVertex[]) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BaseMeshEffect {
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      ModifyMesh: ((mesh: UnityEngine.Mesh) => void) | ((vh: UnityEngine.UI.VertexHelper) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface IVertexModifier {
      ModifyVertices: ((verts: UnityEngine.UIVertex[]) => void);
    }
    export interface IMeshModifier {
      ModifyMesh: ((mesh: UnityEngine.Mesh) => void) | ((verts: UnityEngine.UI.VertexHelper) => void);
    }
    export declare class Outline {
      effectColor: UnityEngine.Color;
      effectDistance: UnityEngine.Vector2;
      useGraphicAlpha: boolean;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      ModifyMesh: ((vh: UnityEngine.UI.VertexHelper) => void) | ((mesh: UnityEngine.Mesh) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class PositionAsUV1 {
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      ModifyMesh: ((vh: UnityEngine.UI.VertexHelper) => void) | ((mesh: UnityEngine.Mesh) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Shadow {
      effectColor: UnityEngine.Color;
      effectDistance: UnityEngine.Vector2;
      useGraphicAlpha: boolean;
      useGUILayout: boolean;
      runInEditMode: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      ModifyMesh: ((vh: UnityEngine.UI.VertexHelper) => void) | ((mesh: UnityEngine.Mesh) => void);
      IsActive: (() => boolean);
      IsDestroyed: (() => boolean);
      IsInvoking: (() => boolean) | ((methodName: string) => boolean);
      CancelInvoke: (() => void) | ((methodName: string) => void);
      Invoke: ((methodName: string, time: number) => void);
      InvokeRepeating: ((methodName: string, time: number, repeatRate: number) => void);
      StartCoroutine: ((methodName: string) => UnityEngine.Coroutine) | ((methodName: string, value: System.Object) => UnityEngine.Coroutine) | ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StartCoroutine_Auto: ((routine: System.Collections.IEnumerator) => UnityEngine.Coroutine);
      StopCoroutine: ((routine: System.Collections.IEnumerator) => void) | ((routine: UnityEngine.Coroutine) => void) | ((methodName: string) => void);
      StopAllCoroutines: (() => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Button_ButtonClickedEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction) => void);
      Invoke: (() => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export interface DefaultControls_IFactoryControls {
      CreateGameObject: ((name: string, ...components: System.Type[]) => UnityEngine.GameObject);
    }
    export declare class DefaultControls_Resources {
      standard: UnityEngine.Sprite;
      background: UnityEngine.Sprite;
      inputField: UnityEngine.Sprite;
      knob: UnityEngine.Sprite;
      checkmark: UnityEngine.Sprite;
      dropdown: UnityEngine.Sprite;
      mask: UnityEngine.Sprite;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Dropdown_OptionData {
      constructor();
      constructor(text: string);
      constructor(image: UnityEngine.Sprite);
      constructor(text: string, image: UnityEngine.Sprite);
      text: string;
      image: UnityEngine.Sprite;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Dropdown_OptionDataList {
      constructor();
      options: UnityEngine.UI.Dropdown_OptionData[];
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Dropdown_DropdownEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<number>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<number>) => void);
      Invoke: ((arg0: number) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum GraphicRaycaster_BlockingObjects {
      None = 0,
      TwoD = 1,
      ThreeD = 2,
      All = 3,
    }
    export enum Image_Type {
      Simple = 0,
      Sliced = 1,
      Tiled = 2,
      Filled = 3,
    }
    export enum Image_FillMethod {
      Horizontal = 0,
      Vertical = 1,
      Radial90 = 2,
      Radial180 = 3,
      Radial360 = 4,
    }
    export enum Image_OriginHorizontal {
      Left = 0,
      Right = 1,
    }
    export enum Image_OriginVertical {
      Bottom = 0,
      Top = 1,
    }
    export enum Image_Origin90 {
      BottomLeft = 0,
      TopLeft = 1,
      TopRight = 2,
      BottomRight = 3,
    }
    export enum Image_Origin180 {
      Bottom = 0,
      Left = 1,
      Top = 2,
      Right = 3,
    }
    export enum Image_Origin360 {
      Bottom = 0,
      Right = 1,
      Top = 2,
      Left = 3,
    }
    export enum InputField_ContentType {
      Standard = 0,
      Autocorrected = 1,
      IntegerNumber = 2,
      DecimalNumber = 3,
      Alphanumeric = 4,
      Name = 5,
      EmailAddress = 6,
      Password = 7,
      Pin = 8,
      Custom = 9,
    }
    export enum InputField_InputType {
      Standard = 0,
      AutoCorrect = 1,
      Password = 2,
    }
    export enum InputField_CharacterValidation {
      None = 0,
      Integer = 1,
      Decimal = 2,
      Alphanumeric = 3,
      Name = 4,
      EmailAddress = 5,
    }
    export enum InputField_LineType {
      SingleLine = 0,
      MultiLineSubmit = 1,
      MultiLineNewline = 2,
    }
    export declare class InputField_OnValidateInput {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((text: string, charIndex: number, addedChar: System.Char) => System.Char);
      BeginInvoke: ((text: string, charIndex: number, addedChar: System.Char, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => System.Char);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class InputField_SubmitEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<string>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<string>) => void);
      Invoke: ((arg0: string) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class InputField_OnChangeEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<string>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<string>) => void);
      Invoke: ((arg0: string) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum AspectRatioFitter_AspectMode {
      None = 0,
      WidthControlsHeight = 1,
      HeightControlsWidth = 2,
      FitInParent = 3,
      EnvelopeParent = 4,
    }
    export enum CanvasScaler_ScaleMode {
      ConstantPixelSize = 0,
      ScaleWithScreenSize = 1,
      ConstantPhysicalSize = 2,
    }
    export enum CanvasScaler_ScreenMatchMode {
      MatchWidthOrHeight = 0,
      Expand = 1,
      Shrink = 2,
    }
    export enum CanvasScaler_Unit {
      Centimeters = 0,
      Millimeters = 1,
      Inches = 2,
      Points = 3,
      Picas = 4,
    }
    export enum ContentSizeFitter_FitMode {
      Unconstrained = 0,
      MinSize = 1,
      PreferredSize = 2,
    }
    export enum GridLayoutGroup_Corner {
      UpperLeft = 0,
      UpperRight = 1,
      LowerLeft = 2,
      LowerRight = 3,
    }
    export enum GridLayoutGroup_Axis {
      Horizontal = 0,
      Vertical = 1,
    }
    export enum GridLayoutGroup_Constraint {
      Flexible = 0,
      FixedColumnCount = 1,
      FixedRowCount = 2,
    }
    export declare class MaskableGraphic_CullStateChangedEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<boolean>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<boolean>) => void);
      Invoke: ((arg0: boolean) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum Navigation_Mode {
      None = 0,
      Horizontal = 1,
      Vertical = 2,
      Automatic = 3,
      Explicit = 4,
    }
    export enum ScrollRect_MovementType {
      Unrestricted = 0,
      Elastic = 1,
      Clamped = 2,
    }
    export enum ScrollRect_ScrollbarVisibility {
      Permanent = 0,
      AutoHide = 1,
      AutoHideAndExpandViewport = 2,
    }
    export declare class ScrollRect_ScrollRectEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<UnityEngine.Vector2>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<UnityEngine.Vector2>) => void);
      Invoke: ((arg0: UnityEngine.Vector2) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum Scrollbar_Direction {
      LeftToRight = 0,
      RightToLeft = 1,
      BottomToTop = 2,
      TopToBottom = 3,
    }
    export declare class Scrollbar_ScrollEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<number>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<number>) => void);
      Invoke: ((arg0: number) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum Selectable_Transition {
      None = 0,
      ColorTint = 1,
      SpriteSwap = 2,
      Animation = 3,
    }
    export enum Slider_Direction {
      LeftToRight = 0,
      RightToLeft = 1,
      BottomToTop = 2,
      TopToBottom = 3,
    }
    export declare class Slider_SliderEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<number>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<number>) => void);
      Invoke: ((arg0: number) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum Toggle_ToggleTransition {
      None = 0,
      Fade = 1,
    }
    export declare class Toggle_ToggleEvent {
      constructor();
      AddListener: ((call: UnityEngine.Events.UnityAction<boolean>) => void);
      RemoveListener: ((call: UnityEngine.Events.UnityAction<boolean>) => void);
      Invoke: ((arg0: boolean) => void);
      GetPersistentEventCount: (() => number);
      GetPersistentTarget: ((index: number) => UnityEngine.Object);
      GetPersistentMethodName: ((index: number) => string);
      SetPersistentListenerState: ((index: number, state: UnityEngine.Events.UnityEventCallState) => void);
      RemoveAllListeners: (() => void);
      ToString: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
  }
  export namespace UIElements {
    export declare class BindableElement {
      constructor();
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class BindableElement_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BindableElement_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Clickable {
      constructor(handler: System.Action, delay: System.Int64, interval: System.Int64);
      constructor(handler: (() => void));
      constructor(handler: System.Action);
      lastMousePosition: UnityEngine.Vector2;
      activators: UnityEngine.UIElements.ManipulatorActivationFilter[];
      target: UnityEngine.UIElements.VisualElement;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ContextualMenuManager {
      DisplayMenuIfEventMatches: ((evt: UnityEngine.UIElements.EventBase, eventHandler: UnityEngine.UIElements.IEventHandler) => void);
      DisplayMenu: ((triggerEvent: UnityEngine.UIElements.EventBase, target: UnityEngine.UIElements.IEventHandler) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ContextualMenuManipulator {
      constructor(menuBuilder: (() => void));
      activators: UnityEngine.UIElements.ManipulatorActivationFilter[];
      target: UnityEngine.UIElements.VisualElement;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Cursor {
      texture: UnityEngine.Texture2D;
      hotspot: UnityEngine.Vector2;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.UIElements.Cursor) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class DropdownMenuEventInfo {
      constructor(e: UnityEngine.UIElements.EventBase);
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DropdownMenuItem {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DropdownMenuSeparator {
      constructor(subMenuPath: string);
      subMenuPath: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DropdownMenuAction {
      constructor(actionName: string, actionCallback: (() => void), actionStatusCallback: ((arg0: UnityEngine.UIElements.DropdownMenuAction, arg1: UnityEngine.UIElements.DropdownMenuAction_Status) => UnityEngine.UIElements.DropdownMenuAction_Status), userData?: System.Object);
      name: string;
      status: UnityEngine.UIElements.DropdownMenuAction_Status;
      eventInfo: UnityEngine.UIElements.DropdownMenuEventInfo;
      userData: System.Object;
      static AlwaysEnabled: ((a: UnityEngine.UIElements.DropdownMenuAction) => UnityEngine.UIElements.DropdownMenuAction_Status);
      static AlwaysDisabled: ((a: UnityEngine.UIElements.DropdownMenuAction) => UnityEngine.UIElements.DropdownMenuAction_Status);
      UpdateActionStatus: ((eventInfo: UnityEngine.UIElements.DropdownMenuEventInfo) => void);
      Execute: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum DropdownMenuAction_Status {
      None = 0,
      Normal = 1,
      Disabled = 2,
      Checked = 4,
      Hidden = 8,
    }
    export declare class DropdownMenu {
      constructor();
      MenuItems: (() => UnityEngine.UIElements.DropdownMenuItem[]);
      AppendAction: ((actionName: string, action: (() => void), actionStatusCallback: ((arg0: UnityEngine.UIElements.DropdownMenuAction, arg1: UnityEngine.UIElements.DropdownMenuAction_Status) => UnityEngine.UIElements.DropdownMenuAction_Status), userData?: System.Object) => void) | ((actionName: string, action: (() => void), status?: UnityEngine.UIElements.DropdownMenuAction_Status) => void);
      InsertAction: ((atIndex: number, actionName: string, action: (() => void), actionStatusCallback: ((arg0: UnityEngine.UIElements.DropdownMenuAction, arg1: UnityEngine.UIElements.DropdownMenuAction_Status) => UnityEngine.UIElements.DropdownMenuAction_Status), userData?: System.Object) => void) | ((atIndex: number, actionName: string, action: (() => void), status?: UnityEngine.UIElements.DropdownMenuAction_Status) => void);
      AppendSeparator: ((subMenuPath?: string) => void);
      InsertSeparator: ((subMenuPath: string, atIndex: number) => void);
      RemoveItemAt: ((index: number) => void);
      PrepareForDisplay: ((e: UnityEngine.UIElements.EventBase) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class EventDispatcherGate {
      constructor(d: UnityEngine.UIElements.EventDispatcher);
      Dispose: (() => void);
      Equals: ((other: UnityEngine.UIElements.EventDispatcherGate) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class EventDispatcher {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Focusable {
      focusController: UnityEngine.UIElements.FocusController;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      canGrabFocus: boolean;
      Focus: (() => void);
      Blur: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class FocusChangeDirection {
      static unspecified: UnityEngine.UIElements.FocusChangeDirection;
      static none: UnityEngine.UIElements.FocusChangeDirection;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IFocusRing {
      GetFocusChangeDirection: ((currentFocusable: UnityEngine.UIElements.Focusable, e: UnityEngine.UIElements.EventBase) => UnityEngine.UIElements.FocusChangeDirection);
      GetNextFocusable: ((currentFocusable: UnityEngine.UIElements.Focusable, direction: UnityEngine.UIElements.FocusChangeDirection) => UnityEngine.UIElements.Focusable);
    }
    export declare class FocusController {
      constructor(focusRing: UnityEngine.UIElements.IFocusRing);
      focusedElement: UnityEngine.UIElements.Focusable;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class IMGUIContainer {
      constructor();
      constructor(onGUIHandler: System.Action);
      onGUIHandler: System.Action;
      cullingEnabled: boolean;
      contextType: UnityEngine.UIElements.ContextType;
      canGrabFocus: boolean;
      viewDataKey: string;
      userData: System.Object;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      MarkDirtyLayout: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      Dispose: (() => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class IMGUIContainer_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class IMGUIContainer_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ImmediateModeElement {
      constructor();
      cullingEnabled: boolean;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export enum SelectionType {
      None = 0,
      Single = 1,
      Multiple = 2,
    }
    export interface ITransform {
      position: UnityEngine.Vector3;
      rotation: UnityEngine.Quaternion;
      scale: UnityEngine.Vector3;
      matrix: UnityEngine.Matrix4x4;
    }
    export declare class ManipulatorActivationFilter {
      button: UnityEngine.UIElements.MouseButton;
      modifiers: UnityEngine.EventModifiers;
      clickCount: number;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.UIElements.ManipulatorActivationFilter) => boolean);
      GetHashCode: (() => number);
      Matches: ((e: UnityEngine.UIElements.IMouseEvent) => boolean) | ((e: UnityEngine.UIElements.IPointerEvent) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface IManipulator {
      target: UnityEngine.UIElements.VisualElement;
    }
    export declare class Manipulator {
      target: UnityEngine.UIElements.VisualElement;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum MouseButton {
      LeftMouse = 0,
      RightMouse = 1,
      MiddleMouse = 2,
    }
    export declare class MouseCaptureController {
      static IsMouseCaptured: (() => boolean);
      static HasMouseCapture: ((handler: UnityEngine.UIElements.IEventHandler) => boolean);
      static CaptureMouse: ((handler: UnityEngine.UIElements.IEventHandler) => void);
      static ReleaseMouse: ((handler: UnityEngine.UIElements.IEventHandler) => void) | (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseManipulator {
      activators: UnityEngine.UIElements.ManipulatorActivationFilter[];
      target: UnityEngine.UIElements.VisualElement;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum ContextType {
      Player = 0,
      Editor = 1,
    }
    export enum UsageHints {
      None = 0,
      DynamicTransform = 1,
      GroupTransform = 2,
    }
    export interface IPanel {
      visualTree: UnityEngine.UIElements.VisualElement;
      dispatcher: UnityEngine.UIElements.EventDispatcher;
      contextType: UnityEngine.UIElements.ContextType;
      focusController: UnityEngine.UIElements.FocusController;
      contextualMenuManager: UnityEngine.UIElements.ContextualMenuManager;
      Pick: ((point: UnityEngine.Vector2) => UnityEngine.UIElements.VisualElement);
      PickAll: ((point: UnityEngine.Vector2, picked: UnityEngine.UIElements.VisualElement[]) => UnityEngine.UIElements.VisualElement);
    }
    export declare class PointerCaptureHelper {
      static HasPointerCapture: ((handler: UnityEngine.UIElements.IEventHandler, pointerId: number) => boolean);
      static CapturePointer: ((handler: UnityEngine.UIElements.IEventHandler, pointerId: number) => void);
      static ReleasePointer: ((handler: UnityEngine.UIElements.IEventHandler, pointerId: number) => void) | ((panel: UnityEngine.UIElements.IPanel, pointerId: number) => void);
      static GetCapturingElement: ((panel: UnityEngine.UIElements.IPanel, pointerId: number) => UnityEngine.UIElements.IEventHandler);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerManipulator {
      activators: UnityEngine.UIElements.ManipulatorActivationFilter[];
      target: UnityEngine.UIElements.VisualElement;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TimerState {
      start: System.Int64;
      now: System.Int64;
      deltaTime: System.Int64;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.UIElements.TimerState) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum Position {
      Relative = 0,
      Absolute = 1,
    }
    export enum Overflow {
      Visible = 0,
      Hidden = 1,
    }
    export enum OverflowClipBox {
      PaddingBox = 0,
      ContentBox = 1,
    }
    export enum FlexDirection {
      Column = 0,
      ColumnReverse = 1,
      Row = 2,
      RowReverse = 3,
    }
    export enum Wrap {
      NoWrap = 0,
      Wrap = 1,
      WrapReverse = 2,
    }
    export enum Align {
      Auto = 0,
      FlexStart = 1,
      Center = 2,
      FlexEnd = 3,
      Stretch = 4,
    }
    export enum Justify {
      FlexStart = 0,
      Center = 1,
      FlexEnd = 2,
      SpaceBetween = 3,
      SpaceAround = 4,
    }
    export enum TextOverflowPosition {
      End = 0,
      Start = 1,
      Middle = 2,
    }
    export enum TextOverflow {
      Clip = 0,
      Ellipsis = 1,
    }
    export enum Visibility {
      Visible = 0,
      Hidden = 1,
    }
    export enum WhiteSpace {
      Normal = 0,
      NoWrap = 1,
    }
    export enum DisplayStyle {
      Flex = 0,
      None = 1,
    }
    export declare class TemplateContainer {
      constructor();
      constructor(templateId: string);
      templateId: string;
      contentContainer: UnityEngine.UIElements.VisualElement;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class TemplateContainer_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlQualifiedName: string;
      uxmlNamespace: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TemplateContainer_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TextElement {
      constructor();
      text: string;
      displayTooltipWhenElided: boolean;
      isElided: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      MeasureTextSize: ((textToMeasure: string, width: number, widthMode: UnityEngine.UIElements.VisualElement_MeasureMode, height: number, heightMode: UnityEngine.UIElements.VisualElement_MeasureMode) => UnityEngine.Vector2);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class TextElement_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TextElement_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UQuery {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UQueryState<T = any> {
      RebuildOn: ((element: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.UQueryState<T>);
      First: (() => T);
      Last: (() => T);
      ToList: ((results: T[]) => void) | (() => T[]);
      AtIndex: ((index: number) => T);
      ForEach: ((funcCall: (() => void)) => void);
      Equals: ((other: UnityEngine.UIElements.UQueryState<T>) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class UQueryBuilder<T = any> {
      constructor(visualElement: UnityEngine.UIElements.VisualElement);
      Class: ((classname: string) => UnityEngine.UIElements.UQueryBuilder<T>);
      Name: ((id: string) => UnityEngine.UIElements.UQueryBuilder<T>);
      Where: ((selectorPredicate: ((arg0: T, arg1: boolean) => boolean)) => UnityEngine.UIElements.UQueryBuilder<T>);
      Active: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotActive: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Visible: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotVisible: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Hovered: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotHovered: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Checked: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotChecked: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Selected: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotSelected: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Enabled: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotEnabled: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Focused: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      NotFocused: (() => UnityEngine.UIElements.UQueryBuilder<T>);
      Build: (() => UnityEngine.UIElements.UQueryState<T>);
      First: (() => T);
      Last: (() => T);
      ToList: (() => T[]) | ((results: T[]) => void);
      AtIndex: ((index: number) => T);
      ForEach: ((funcCall: (() => void)) => void);
      Equals: ((other: UnityEngine.UIElements.UQueryBuilder<T>) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class UQueryExtensions {
      static Q: ((e: UnityEngine.UIElements.VisualElement, name?: string, ...classes: string[]) => UnityEngine.UIElements.VisualElement) | ((e: UnityEngine.UIElements.VisualElement, name?: string, className?: string) => UnityEngine.UIElements.VisualElement);
      static Query: ((e: UnityEngine.UIElements.VisualElement, name?: string, ...classes: string[]) => any) | ((e: UnityEngine.UIElements.VisualElement, name?: string, className?: string) => any) | ((e: UnityEngine.UIElements.VisualElement) => any);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum PickingMode {
      Position = 0,
      Ignore = 1,
    }
    export declare class VisualElement {
      constructor();
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static disabledUssClassName: string;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class VisualElement_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VisualElement_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum VisualElement_MeasureMode {
      Undefined = 0,
      Exactly = 1,
      AtMost = 2,
    }
    export declare class VisualElement_Hierarchy {
      parent: UnityEngine.UIElements.VisualElement;
      childCount: number;
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, child: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((child: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      Equals: ((other: UnityEngine.UIElements.VisualElement_Hierarchy) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class VisualElementExtensions {
      static WorldToLocal: ((ele: UnityEngine.UIElements.VisualElement, p: UnityEngine.Vector2) => UnityEngine.Vector2) | ((ele: UnityEngine.UIElements.VisualElement, r: UnityEngine.Rect) => UnityEngine.Rect);
      static LocalToWorld: ((ele: UnityEngine.UIElements.VisualElement, p: UnityEngine.Vector2) => UnityEngine.Vector2) | ((ele: UnityEngine.UIElements.VisualElement, r: UnityEngine.Rect) => UnityEngine.Rect);
      static ChangeCoordinatesTo: ((src: UnityEngine.UIElements.VisualElement, dest: UnityEngine.UIElements.VisualElement, point: UnityEngine.Vector2) => UnityEngine.Vector2) | ((src: UnityEngine.UIElements.VisualElement, dest: UnityEngine.UIElements.VisualElement, rect: UnityEngine.Rect) => UnityEngine.Rect);
      static StretchToParentSize: ((elem: UnityEngine.UIElements.VisualElement) => void);
      static StretchToParentWidth: ((elem: UnityEngine.UIElements.VisualElement) => void);
      static AddManipulator: ((ele: UnityEngine.UIElements.VisualElement, manipulator: UnityEngine.UIElements.IManipulator) => void);
      static RemoveManipulator: ((ele: UnityEngine.UIElements.VisualElement, manipulator: UnityEngine.UIElements.IManipulator) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IExperimentalFeatures {
      animation: UnityEngine.UIElements.Experimental.ITransitionAnimations;
    }
    export declare class VisualElementFocusChangeDirection {
      static left: UnityEngine.UIElements.FocusChangeDirection;
      static right: UnityEngine.UIElements.FocusChangeDirection;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VisualElementFocusRing {
      constructor(root: UnityEngine.UIElements.VisualElement, dfo?: UnityEngine.UIElements.VisualElementFocusRing_DefaultFocusOrder);
      defaultFocusOrder: UnityEngine.UIElements.VisualElementFocusRing_DefaultFocusOrder;
      GetFocusChangeDirection: ((currentFocusable: UnityEngine.UIElements.Focusable, e: UnityEngine.UIElements.EventBase) => UnityEngine.UIElements.FocusChangeDirection);
      GetNextFocusable: ((currentFocusable: UnityEngine.UIElements.Focusable, direction: UnityEngine.UIElements.FocusChangeDirection) => UnityEngine.UIElements.Focusable);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum VisualElementFocusRing_DefaultFocusOrder {
      ChildOrder = 0,
      PositionXY = 1,
      PositionYX = 2,
    }
    export interface IVisualElementScheduledItem {
      element: UnityEngine.UIElements.VisualElement;
      isActive: boolean;
      Resume: (() => void);
      Pause: (() => void);
      ExecuteLater: ((delayMs: System.Int64) => void);
      StartingIn: ((delayMs: System.Int64) => UnityEngine.UIElements.IVisualElementScheduledItem);
      Every: ((intervalMs: System.Int64) => UnityEngine.UIElements.IVisualElementScheduledItem);
      Until: ((stopCondition: ((arg0: boolean) => boolean)) => UnityEngine.UIElements.IVisualElementScheduledItem);
      ForDuration: ((durationMs: System.Int64) => UnityEngine.UIElements.IVisualElementScheduledItem);
    }
    export interface IVisualElementScheduler {
      Execute: ((timerUpdateEvent: (() => void)) => UnityEngine.UIElements.IVisualElementScheduledItem) | ((updateEvent: System.Action) => UnityEngine.UIElements.IVisualElementScheduledItem);
    }
    export declare class VisualElementStyleSheetSet {
      count: number;
      Add: ((styleSheet: UnityEngine.UIElements.StyleSheet) => void);
      Clear: (() => void);
      Remove: ((styleSheet: UnityEngine.UIElements.StyleSheet) => boolean);
      Contains: ((styleSheet: UnityEngine.UIElements.StyleSheet) => boolean);
      Equals: ((other: UnityEngine.UIElements.VisualElementStyleSheetSet) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class BaseField<TValueType = any> {
      value: TValueType;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      static noLabelVariantUssClassName: string;
      static labelDraggerVariantUssClassName: string;
      SetValueWithoutNotify: ((newValue: TValueType) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class BaseFieldTraits<TValueType = any, TValueUxmlAttributeType = any> {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum SliderDirection {
      Horizontal = 0,
      Vertical = 1,
    }
    export declare class BaseSlider<TValueType = any> {
      lowValue: TValueType;
      highValue: TValueType;
      range: TValueType;
      pageSize: number;
      showInputField: boolean;
      value: TValueType;
      direction: UnityEngine.UIElements.SliderDirection;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      static horizontalVariantUssClassName: string;
      static verticalVariantUssClassName: string;
      static dragContainerUssClassName: string;
      static trackerUssClassName: string;
      static draggerUssClassName: string;
      static draggerBorderUssClassName: string;
      static textFieldClassName: string;
      SetValueWithoutNotify: ((newValue: TValueType) => void);
      AdjustDragElement: ((factor: number) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export interface IBindable {
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
    }
    export interface IBinding {
      PreUpdate: (() => void);
      Update: (() => void);
      Release: (() => void);
    }
    export declare class IBindingExtensions {
      static IsBound: ((control: UnityEngine.UIElements.IBindable) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Box {
      constructor();
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Box_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Button {
      constructor();
      constructor(clickEvent: System.Action);
      clickable: UnityEngine.UIElements.Clickable;
      text: string;
      displayTooltipWhenElided: boolean;
      isElided: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      MeasureTextSize: ((textToMeasure: string, width: number, widthMode: UnityEngine.UIElements.VisualElement_MeasureMode, height: number, heightMode: UnityEngine.UIElements.VisualElement_MeasureMode) => UnityEngine.Vector2);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Button_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Button_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Foldout {
      constructor();
      contentContainer: UnityEngine.UIElements.VisualElement;
      text: string;
      value: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static toggleUssClassName: string;
      static contentUssClassName: string;
      SetValueWithoutNotify: ((newValue: boolean) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Foldout_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Foldout_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum HelpBoxMessageType {
      None = 0,
      Info = 1,
      Warning = 2,
      Error = 3,
    }
    export declare class HelpBox {
      constructor();
      constructor(text: string, messageType: UnityEngine.UIElements.HelpBoxMessageType);
      text: string;
      messageType: UnityEngine.UIElements.HelpBoxMessageType;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static iconUssClassName: string;
      static iconInfoUssClassName: string;
      static iconwarningUssClassName: string;
      static iconErrorUssClassName: string;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class HelpBox_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class HelpBox_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Image {
      constructor();
      image: UnityEngine.Texture;
      vectorImage: UnityEngine.UIElements.VectorImage;
      sourceRect: UnityEngine.Rect;
      uv: UnityEngine.Rect;
      scaleMode: UnityEngine.ScaleMode;
      tintColor: UnityEngine.Color;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Image_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Image_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface INotifyValueChanged<T = any> {
      value: T;
      SetValueWithoutNotify: ((newValue: T) => void);
    }
    export declare class INotifyValueChangedExtensions {
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Label {
      constructor();
      constructor(text: string);
      text: string;
      displayTooltipWhenElided: boolean;
      isElided: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      MeasureTextSize: ((textToMeasure: string, width: number, widthMode: UnityEngine.UIElements.VisualElement_MeasureMode, height: number, heightMode: UnityEngine.UIElements.VisualElement_MeasureMode) => UnityEngine.Vector2);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Label_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Label_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum AlternatingRowBackground {
      None = 0,
      ContentOnly = 1,
      All = 2,
    }
    export declare class ListView {
      constructor();
      constructor(itemsSource: System.Collections.IList, itemHeight: number, makeItem: ((arg0: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement), bindItem: ((arg0: UnityEngine.UIElements.VisualElement) => void));
      itemsSource: System.Collections.IList;
      makeItem: ((arg0: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      unbindItem: ((arg0: UnityEngine.UIElements.VisualElement) => void);
      bindItem: ((arg0: UnityEngine.UIElements.VisualElement) => void);
      resolvedItemHeight: number;
      itemHeight: number;
      showBorder: boolean;
      reorderable: boolean;
      selectedIndex: number;
      selectedIndices: System.Collections.Generic.IEnumerable<number>;
      selectedItem: System.Object;
      selectedItems: System.Collections.Generic.IEnumerable<System.Object>;
      contentContainer: UnityEngine.UIElements.VisualElement;
      selectionType: UnityEngine.UIElements.SelectionType;
      showAlternatingRowBackgrounds: UnityEngine.UIElements.AlternatingRowBackground;
      showBoundCollectionSize: boolean;
      horizontalScrollingEnabled: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static borderUssClassName: string;
      static itemUssClassName: string;
      static dragHoverBarUssClassName: string;
      static itemDragHoverUssClassName: string;
      static itemSelectedVariantUssClassName: string;
      static itemAlternativeBackgroundUssClassName: string;
      OnKeyDown: ((evt: UnityEngine.UIElements.KeyDownEvent) => void);
      ScrollToItem: ((index: number) => void);
      AddToSelection: ((index: number) => void);
      RemoveFromSelection: ((index: number) => void);
      SetSelection: ((index: number) => void) | ((indices: System.Collections.Generic.IEnumerable<number>) => void);
      SetSelectionWithoutNotify: ((indices: System.Collections.Generic.IEnumerable<number>) => void);
      ClearSelection: (() => void);
      ScrollTo: ((visualElement: UnityEngine.UIElements.VisualElement) => void);
      Refresh: (() => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class ListView_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ListView_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MinMaxSlider {
      constructor();
      constructor(minValue: number, maxValue: number, minLimit: number, maxLimit: number);
      constructor(label: string, minValue?: number, maxValue?: number, minLimit?: number, maxLimit?: number);
      minValue: number;
      maxValue: number;
      value: UnityEngine.Vector2;
      range: number;
      lowLimit: number;
      highLimit: number;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      static trackerUssClassName: string;
      static draggerUssClassName: string;
      static minThumbUssClassName: string;
      static maxThumbUssClassName: string;
      SetValueWithoutNotify: ((newValue: UnityEngine.Vector2) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class MinMaxSlider_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MinMaxSlider_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PopupWindow {
      constructor();
      contentContainer: UnityEngine.UIElements.VisualElement;
      text: string;
      displayTooltipWhenElided: boolean;
      isElided: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static contentUssClassName: string;
      MeasureTextSize: ((textToMeasure: string, width: number, widthMode: UnityEngine.UIElements.VisualElement_MeasureMode, height: number, heightMode: UnityEngine.UIElements.VisualElement_MeasureMode) => UnityEngine.Vector2);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class PopupWindow_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PopupWindow_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class RepeatButton {
      constructor();
      constructor(clickEvent: System.Action, delay: System.Int64, interval: System.Int64);
      text: string;
      displayTooltipWhenElided: boolean;
      isElided: boolean;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      SetAction: ((clickEvent: System.Action, delay: System.Int64, interval: System.Int64) => void);
      MeasureTextSize: ((textToMeasure: string, width: number, widthMode: UnityEngine.UIElements.VisualElement_MeasureMode, height: number, heightMode: UnityEngine.UIElements.VisualElement_MeasureMode) => UnityEngine.Vector2);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class RepeatButton_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class RepeatButton_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Scroller {
      constructor();
      constructor(lowValue: number, highValue: number, valueChanged: (() => void), direction?: UnityEngine.UIElements.SliderDirection);
      slider: UnityEngine.UIElements.Slider;
      lowButton: UnityEngine.UIElements.RepeatButton;
      highButton: UnityEngine.UIElements.RepeatButton;
      value: number;
      lowValue: number;
      highValue: number;
      direction: UnityEngine.UIElements.SliderDirection;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static horizontalVariantUssClassName: string;
      static verticalVariantUssClassName: string;
      static sliderUssClassName: string;
      static lowButtonUssClassName: string;
      static highButtonUssClassName: string;
      Adjust: ((factor: number) => void);
      ScrollPageUp: (() => void) | ((factor: number) => void);
      ScrollPageDown: (() => void) | ((factor: number) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Scroller_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Scroller_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum ScrollViewMode {
      Vertical = 0,
      Horizontal = 1,
      VerticalAndHorizontal = 2,
    }
    export declare class ScrollView {
      constructor();
      constructor(scrollViewMode: UnityEngine.UIElements.ScrollViewMode);
      showHorizontal: boolean;
      showVertical: boolean;
      scrollOffset: UnityEngine.Vector2;
      horizontalPageSize: number;
      verticalPageSize: number;
      scrollDecelerationRate: number;
      elasticity: number;
      touchScrollBehavior: UnityEngine.UIElements.ScrollView_TouchScrollBehavior;
      contentViewport: UnityEngine.UIElements.VisualElement;
      horizontalScroller: UnityEngine.UIElements.Scroller;
      verticalScroller: UnityEngine.UIElements.Scroller;
      contentContainer: UnityEngine.UIElements.VisualElement;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static viewportUssClassName: string;
      static contentUssClassName: string;
      static hScrollerUssClassName: string;
      static vScrollerUssClassName: string;
      static horizontalVariantUssClassName: string;
      static verticalVariantUssClassName: string;
      static verticalHorizontalVariantUssClassName: string;
      static scrollVariantUssClassName: string;
      ScrollTo: ((child: UnityEngine.UIElements.VisualElement) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class ScrollView_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ScrollView_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum ScrollView_TouchScrollBehavior {
      Unrestricted = 0,
      Elastic = 1,
      Clamped = 2,
    }
    export declare class Slider {
      constructor();
      constructor(start: number, end: number, direction?: UnityEngine.UIElements.SliderDirection, pageSize?: number);
      constructor(label: string, start?: number, end?: number, direction?: UnityEngine.UIElements.SliderDirection, pageSize?: number);
      lowValue: number;
      highValue: number;
      range: number;
      pageSize: number;
      showInputField: boolean;
      value: number;
      direction: UnityEngine.UIElements.SliderDirection;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      SetValueWithoutNotify: ((newValue: number) => void);
      AdjustDragElement: ((factor: number) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Slider_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Slider_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SliderInt {
      constructor();
      constructor(start: number, end: number, direction?: UnityEngine.UIElements.SliderDirection, pageSize?: number);
      constructor(label: string, start?: number, end?: number, direction?: UnityEngine.UIElements.SliderDirection, pageSize?: number);
      pageSize: number;
      lowValue: number;
      highValue: number;
      range: number;
      showInputField: boolean;
      value: number;
      direction: UnityEngine.UIElements.SliderDirection;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      SetValueWithoutNotify: ((newValue: number) => void);
      AdjustDragElement: ((factor: number) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class SliderInt_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class SliderInt_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TextField {
      constructor();
      constructor(maxLength: number, multiline: boolean, isPasswordField: boolean, maskChar: System.Char);
      constructor(label: string);
      constructor(label: string, maxLength: number, multiline: boolean, isPasswordField: boolean, maskChar: System.Char);
      multiline: boolean;
      value: string;
      text: string;
      isReadOnly: boolean;
      isPasswordField: boolean;
      selectionColor: UnityEngine.Color;
      cursorColor: UnityEngine.Color;
      cursorIndex: number;
      selectIndex: number;
      maxLength: number;
      doubleClickSelectsWord: boolean;
      tripleClickSelectsLine: boolean;
      isDelayed: boolean;
      maskChar: System.Char;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      SelectRange: ((rangeCursorIndex: number, selectionIndex: number) => void);
      SetValueWithoutNotify: ((newValue: string) => void);
      SelectAll: (() => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class TextField_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TextField_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TextInputBaseField<TValueType = any> {
      text: string;
      isReadOnly: boolean;
      isPasswordField: boolean;
      selectionColor: UnityEngine.Color;
      cursorColor: UnityEngine.Color;
      cursorIndex: number;
      selectIndex: number;
      maxLength: number;
      doubleClickSelectsWord: boolean;
      tripleClickSelectsLine: boolean;
      isDelayed: boolean;
      maskChar: System.Char;
      value: TValueType;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      static textInputUssName: string;
      SelectAll: (() => void);
      SetValueWithoutNotify: ((newValue: TValueType) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Toggle {
      constructor();
      constructor(label: string);
      text: string;
      value: boolean;
      labelElement: UnityEngine.UIElements.Label;
      label: string;
      binding: UnityEngine.UIElements.IBinding;
      bindingPath: string;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      contentContainer: UnityEngine.UIElements.VisualElement;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      static ussClassName: string;
      static labelUssClassName: string;
      static inputUssClassName: string;
      static noTextVariantUssClassName: string;
      static checkmarkUssClassName: string;
      static textUssClassName: string;
      SetValueWithoutNotify: ((newValue: boolean) => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class Toggle_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Toggle_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TwoPaneSplitView {
      constructor();
      constructor(fixedPaneIndex: number, fixedPaneStartDimension: number, orientation: UnityEngine.UIElements.TwoPaneSplitViewOrientation);
      fixedPane: UnityEngine.UIElements.VisualElement;
      flexedPane: UnityEngine.UIElements.VisualElement;
      fixedPaneIndex: number;
      fixedPaneInitialDimension: number;
      orientation: UnityEngine.UIElements.TwoPaneSplitViewOrientation;
      contentContainer: UnityEngine.UIElements.VisualElement;
      viewDataKey: string;
      userData: System.Object;
      canGrabFocus: boolean;
      focusController: UnityEngine.UIElements.FocusController;
      usageHints: UnityEngine.UIElements.UsageHints;
      transform: UnityEngine.UIElements.ITransform;
      layout: UnityEngine.Rect;
      contentRect: UnityEngine.Rect;
      worldBound: UnityEngine.Rect;
      localBound: UnityEngine.Rect;
      worldTransform: UnityEngine.Matrix4x4;
      pickingMode: UnityEngine.UIElements.PickingMode;
      name: string;
      enabledInHierarchy: boolean;
      enabledSelf: boolean;
      visible: boolean;
      generateVisualContent: (() => void);
      experimental: UnityEngine.UIElements.IExperimentalFeatures;
      hierarchy: UnityEngine.UIElements.VisualElement_Hierarchy;
      cacheAsBitmap: boolean;
      parent: UnityEngine.UIElements.VisualElement;
      panel: UnityEngine.UIElements.IPanel;
      childCount: number;
      schedule: UnityEngine.UIElements.IVisualElementScheduler;
      style: UnityEngine.UIElements.IStyle;
      customStyle: UnityEngine.UIElements.ICustomStyle;
      styleSheets: UnityEngine.UIElements.VisualElementStyleSheetSet;
      tooltip: string;
      resolvedStyle: UnityEngine.UIElements.IResolvedStyle;
      focusable: boolean;
      tabIndex: number;
      delegatesFocus: boolean;
      CollapseChild: ((index: number) => void);
      UnCollapse: (() => void);
      Focus: (() => void);
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      SetEnabled: ((value: boolean) => void);
      MarkDirtyRepaint: (() => void);
      ContainsPoint: ((localPoint: UnityEngine.Vector2) => boolean);
      Overlaps: ((rectangle: UnityEngine.Rect) => boolean);
      ToString: (() => string);
      GetClasses: (() => System.Collections.Generic.IEnumerable<string>);
      ClearClassList: (() => void);
      AddToClassList: ((className: string) => void);
      RemoveFromClassList: ((className: string) => void);
      ToggleInClassList: ((className: string) => void);
      EnableInClassList: ((className: string, enable: boolean) => void);
      ClassListContains: ((cls: string) => boolean);
      FindAncestorUserData: (() => System.Object);
      Add: ((child: UnityEngine.UIElements.VisualElement) => void);
      Insert: ((index: number, element: UnityEngine.UIElements.VisualElement) => void);
      Remove: ((element: UnityEngine.UIElements.VisualElement) => void);
      RemoveAt: ((index: number) => void);
      Clear: (() => void);
      ElementAt: ((index: number) => UnityEngine.UIElements.VisualElement);
      IndexOf: ((element: UnityEngine.UIElements.VisualElement) => number);
      Children: (() => System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualElement>);
      Sort: ((comp: System.Comparison<UnityEngine.UIElements.VisualElement>) => void);
      BringToFront: (() => void);
      SendToBack: (() => void);
      PlaceBehind: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      PlaceInFront: ((sibling: UnityEngine.UIElements.VisualElement) => void);
      RemoveFromHierarchy: (() => void);
      Contains: ((child: UnityEngine.UIElements.VisualElement) => boolean);
      FindCommonAncestor: ((other: UnityEngine.UIElements.VisualElement) => UnityEngine.UIElements.VisualElement);
      Blur: (() => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
    }
    export declare class TwoPaneSplitView_UxmlFactory {
      constructor();
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TwoPaneSplitView_UxmlTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum TwoPaneSplitViewOrientation {
      Horizontal = 0,
      Vertical = 1,
    }
    export interface IPointerCaptureEvent {
    }
    export declare class PointerCaptureEventBase<T = any> {
      relatedTarget: UnityEngine.UIElements.IEventHandler;
      pointerId: number;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((target: UnityEngine.UIElements.IEventHandler, relatedTarget: UnityEngine.UIElements.IEventHandler, pointerId: number) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerCaptureOutEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.IEventHandler;
      pointerId: number;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerCaptureEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.IEventHandler;
      pointerId: number;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IMouseCaptureEvent {
    }
    export declare class MouseCaptureEventBase<T = any> {
      relatedTarget: UnityEngine.UIElements.IEventHandler;
      pointerId: number;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((target: UnityEngine.UIElements.IEventHandler, relatedTarget: UnityEngine.UIElements.IEventHandler) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseCaptureOutEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.IEventHandler;
      pointerId: number;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseCaptureEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.IEventHandler;
      pointerId: number;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IChangeEvent {
    }
    export declare class ChangeEvent<T = any> {
      constructor();
      previousValue: T;
      newValue: T;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((previousValue: any, newValue: any) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface ICommandEvent {
      commandName: string;
    }
    export declare class CommandEventBase<T = any> {
      commandName: string;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => any) | ((commandName: string) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ValidateCommandEvent {
      constructor();
      commandName: string;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ExecuteCommandEvent {
      constructor();
      commandName: string;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IDragAndDropEvent {
    }
    export declare class DragAndDropEventBase<T = any> {
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DragExitedEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.DragExitedEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DragEnterEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DragLeaveEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DragUpdatedEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.DragUpdatedEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DragPerformEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class EventBase<T = any> {
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static TypeId: (() => System.Int64);
      static GetPooled: (() => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class EventCallback<TEventType = any, TCallbackArgs = any> {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((evt: TEventType, userArgs: TCallbackArgs) => void);
      BeginInvoke: ((evt: TEventType, userArgs: TCallbackArgs, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum TrickleDown {
      NoTrickleDown = 0,
      TrickleDown = 1,
    }
    export interface IEventHandler {
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
    }
    export declare class CallbackEventHandler {
      SendEvent: ((e: UnityEngine.UIElements.EventBase) => void);
      HandleEvent: ((evt: UnityEngine.UIElements.EventBase) => void);
      HasTrickleDownHandlers: (() => boolean);
      HasBubbleUpHandlers: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IFocusEvent {
      relatedTarget: UnityEngine.UIElements.Focusable;
      direction: UnityEngine.UIElements.FocusChangeDirection;
    }
    export declare class FocusEventBase<T = any> {
      relatedTarget: UnityEngine.UIElements.Focusable;
      direction: UnityEngine.UIElements.FocusChangeDirection;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((target: UnityEngine.UIElements.IEventHandler, relatedTarget: UnityEngine.UIElements.Focusable, direction: UnityEngine.UIElements.FocusChangeDirection, focusController: UnityEngine.UIElements.FocusController, bIsFocusDelegated?: boolean) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class FocusOutEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.Focusable;
      direction: UnityEngine.UIElements.FocusChangeDirection;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class BlurEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.Focusable;
      direction: UnityEngine.UIElements.FocusChangeDirection;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class FocusInEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.Focusable;
      direction: UnityEngine.UIElements.FocusChangeDirection;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class FocusEvent {
      constructor();
      relatedTarget: UnityEngine.UIElements.Focusable;
      direction: UnityEngine.UIElements.FocusChangeDirection;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum PropagationPhase {
      None = 0,
      TrickleDown = 1,
      AtTarget = 2,
      DefaultActionAtTarget = 5,
      BubbleUp = 3,
      DefaultAction = 4,
    }
    export declare class InputEvent {
      constructor();
      previousData: string;
      newData: string;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((previousData: string, newData: string) => UnityEngine.UIElements.InputEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IKeyboardEvent {
      modifiers: UnityEngine.EventModifiers;
      character: System.Char;
      keyCode: UnityEngine.KeyCode;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
    }
    export declare class KeyboardEventBase<T = any> {
      modifiers: UnityEngine.EventModifiers;
      character: System.Char;
      keyCode: UnityEngine.KeyCode;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((c: System.Char, keyCode: UnityEngine.KeyCode, modifiers: UnityEngine.EventModifiers) => any) | ((systemEvent: UnityEngine.Event) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class KeyDownEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      character: System.Char;
      keyCode: UnityEngine.KeyCode;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class KeyUpEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      character: System.Char;
      keyCode: UnityEngine.KeyCode;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class GeometryChangedEvent {
      constructor();
      oldRect: UnityEngine.Rect;
      newRect: UnityEngine.Rect;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((oldRect: UnityEngine.Rect, newRect: UnityEngine.Rect) => UnityEngine.UIElements.GeometryChangedEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IMouseEvent {
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
    }
    export declare class MouseEventBase<T = any> {
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => any) | ((position: UnityEngine.Vector2, button: number, clickCount: number, delta: UnityEngine.Vector2, modifiers?: UnityEngine.EventModifiers) => any) | ((triggerEvent: UnityEngine.UIElements.IMouseEvent) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseDownEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.MouseDownEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseUpEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.MouseUpEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseMoveEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.MouseMoveEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ContextClickEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class WheelEvent {
      constructor();
      delta: UnityEngine.Vector3;
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.WheelEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseEnterEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseLeaveEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseEnterWindowEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseLeaveWindowEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.MouseLeaveWindowEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseOverEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MouseOutEvent {
      constructor();
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ContextualMenuPopulateEvent {
      constructor();
      menu: UnityEngine.UIElements.DropdownMenu;
      triggerEvent: UnityEngine.UIElements.EventBase;
      modifiers: UnityEngine.EventModifiers;
      mousePosition: UnityEngine.Vector2;
      localMousePosition: UnityEngine.Vector2;
      mouseDelta: UnityEngine.Vector2;
      clickCount: number;
      button: number;
      pressedButtons: number;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((triggerEvent: UnityEngine.UIElements.EventBase, menu: UnityEngine.UIElements.DropdownMenu, target: UnityEngine.UIElements.IEventHandler, menuManager: UnityEngine.UIElements.ContextualMenuManager) => UnityEngine.UIElements.ContextualMenuPopulateEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IPanelChangedEvent {
    }
    export declare class PanelChangedEventBase<T = any> {
      originPanel: UnityEngine.UIElements.IPanel;
      destinationPanel: UnityEngine.UIElements.IPanel;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((originPanel: UnityEngine.UIElements.IPanel, destinationPanel: UnityEngine.UIElements.IPanel) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class AttachToPanelEvent {
      constructor();
      originPanel: UnityEngine.UIElements.IPanel;
      destinationPanel: UnityEngine.UIElements.IPanel;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class DetachFromPanelEvent {
      constructor();
      originPanel: UnityEngine.UIElements.IPanel;
      destinationPanel: UnityEngine.UIElements.IPanel;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerType {
      static mouse: string;
      static touch: string;
      static pen: string;
      static unknown: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerId {
      static maxPointers: number;
      static invalidPointerId: number;
      static mousePointerId: number;
      static touchPointerIdBase: number;
      static touchPointerCount: number;
      static penPointerIdBase: number;
      static penPointerCount: number;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IPointerEvent {
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
    }
    export declare class PointerEventBase<T = any> {
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => any) | ((touch: UnityEngine.Touch, modifiers?: UnityEngine.EventModifiers) => any) | ((triggerEvent: UnityEngine.UIElements.IPointerEvent) => any);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerDownEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerMoveEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerStationaryEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerUpEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerCancelEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class ClickEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerEnterEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerLeaveEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerOverEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class PointerOutEvent {
      constructor();
      pointerId: number;
      pointerType: string;
      isPrimary: boolean;
      button: number;
      pressedButtons: number;
      position: UnityEngine.Vector3;
      localPosition: UnityEngine.Vector3;
      deltaPosition: UnityEngine.Vector3;
      deltaTime: number;
      clickCount: number;
      pressure: number;
      tangentialPressure: number;
      altitudeAngle: number;
      azimuthAngle: number;
      twist: number;
      radius: UnityEngine.Vector2;
      radiusVariance: UnityEngine.Vector2;
      modifiers: UnityEngine.EventModifiers;
      shiftKey: boolean;
      ctrlKey: boolean;
      commandKey: boolean;
      altKey: boolean;
      actionKey: boolean;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class CustomStyleResolvedEvent {
      constructor();
      customStyle: UnityEngine.UIElements.ICustomStyle;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class TooltipEvent {
      constructor();
      tooltip: string;
      rect: UnityEngine.Rect;
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class IMGUIEvent {
      constructor();
      eventTypeId: System.Int64;
      timestamp: System.Int64;
      bubbles: boolean;
      tricklesDown: boolean;
      target: UnityEngine.UIElements.IEventHandler;
      isPropagationStopped: boolean;
      isImmediatePropagationStopped: boolean;
      isDefaultPrevented: boolean;
      propagationPhase: UnityEngine.UIElements.PropagationPhase;
      currentTarget: UnityEngine.UIElements.IEventHandler;
      dispatch: boolean;
      imguiEvent: UnityEngine.Event;
      originalMousePosition: UnityEngine.Vector2;
      static GetPooled: ((systemEvent: UnityEngine.Event) => UnityEngine.UIElements.IMGUIEvent);
      Dispose: (() => void);
      StopPropagation: (() => void);
      StopImmediatePropagation: (() => void);
      PreventDefault: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Vertex {
      static nearZ: number;
      position: UnityEngine.Vector3;
      tint: UnityEngine.Color32;
      uv: UnityEngine.Vector2;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class MeshWriteData {
      vertexCount: number;
      indexCount: number;
      uvRegion: UnityEngine.Rect;
      SetNextVertex: ((vertex: UnityEngine.UIElements.Vertex) => void);
      SetNextIndex: ((index: System.UInt16) => void);
      SetAllVertices: ((vertices: UnityEngine.UIElements.Vertex[]) => void) | ((vertices: Unity.Collections.NativeSlice<UnityEngine.UIElements.Vertex>) => void);
      SetAllIndices: ((indices: System.UInt16[]) => void) | ((indices: Unity.Collections.NativeSlice<System.UInt16>) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class MeshGenerationContext {
      visualElement: UnityEngine.UIElements.VisualElement;
      Allocate: ((vertexCount: number, indexCount: number, texture?: UnityEngine.Texture) => UnityEngine.UIElements.MeshWriteData);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Background {
      constructor(t: UnityEngine.Texture2D);
      texture: UnityEngine.Texture2D;
      vectorImage: UnityEngine.UIElements.VectorImage;
      static FromTexture2D: ((t: UnityEngine.Texture2D) => UnityEngine.UIElements.Background);
      static FromVectorImage: ((vi: UnityEngine.UIElements.VectorImage) => UnityEngine.UIElements.Background);
      Equals: ((other: UnityEngine.UIElements.Background) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CustomStyleProperty<T = any> {
      constructor(propertyName: string);
      name: string;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.UIElements.CustomStyleProperty<T>) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface ICustomStyle {
    }
    export enum LengthUnit {
      Pixel = 0,
      Percent = 1,
    }
    export declare class Length {
      constructor(value: number);
      constructor(value: number, unit: UnityEngine.UIElements.LengthUnit);
      value: number;
      unit: UnityEngine.UIElements.LengthUnit;
      static Percent: ((value: number) => UnityEngine.UIElements.Length);
      Equals: ((other: UnityEngine.UIElements.Length) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleBackground {
      constructor(v: UnityEngine.UIElements.Background);
      constructor(v: UnityEngine.Texture2D);
      constructor(v: UnityEngine.UIElements.VectorImage);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: UnityEngine.UIElements.Background;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleBackground) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleColor {
      constructor(v: UnityEngine.Color);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: UnityEngine.Color;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleColor) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleCursor {
      constructor(v: UnityEngine.UIElements.Cursor);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: UnityEngine.UIElements.Cursor;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleCursor) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleEnum<T = any> {
      constructor(v: T);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: T;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleEnum<T>) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleFloat {
      constructor(v: number);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: number;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleFloat) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleFont {
      constructor(v: UnityEngine.Font);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: UnityEngine.Font;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleFont) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleInt {
      constructor(v: number);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: number;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleInt) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class StyleLength {
      constructor(v: number);
      constructor(v: UnityEngine.UIElements.Length);
      constructor(keyword: UnityEngine.UIElements.StyleKeyword);
      value: UnityEngine.UIElements.Length;
      keyword: UnityEngine.UIElements.StyleKeyword;
      Equals: ((other: UnityEngine.UIElements.StyleLength) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum StyleKeyword {
      Undefined = 0,
      Null = 1,
      Auto = 2,
      None = 3,
      Initial = 4,
    }
    export interface IResolvedStyle {
      alignContent: UnityEngine.UIElements.Align;
      alignItems: UnityEngine.UIElements.Align;
      alignSelf: UnityEngine.UIElements.Align;
      backgroundColor: UnityEngine.Color;
      backgroundImage: UnityEngine.UIElements.Background;
      borderBottomColor: UnityEngine.Color;
      borderBottomLeftRadius: number;
      borderBottomRightRadius: number;
      borderBottomWidth: number;
      borderLeftColor: UnityEngine.Color;
      borderLeftWidth: number;
      borderRightColor: UnityEngine.Color;
      borderRightWidth: number;
      borderTopColor: UnityEngine.Color;
      borderTopLeftRadius: number;
      borderTopRightRadius: number;
      borderTopWidth: number;
      bottom: number;
      color: UnityEngine.Color;
      display: UnityEngine.UIElements.DisplayStyle;
      flexBasis: UnityEngine.UIElements.StyleFloat;
      flexDirection: UnityEngine.UIElements.FlexDirection;
      flexGrow: number;
      flexShrink: number;
      flexWrap: UnityEngine.UIElements.Wrap;
      fontSize: number;
      height: number;
      justifyContent: UnityEngine.UIElements.Justify;
      left: number;
      marginBottom: number;
      marginLeft: number;
      marginRight: number;
      marginTop: number;
      maxHeight: UnityEngine.UIElements.StyleFloat;
      maxWidth: UnityEngine.UIElements.StyleFloat;
      minHeight: UnityEngine.UIElements.StyleFloat;
      minWidth: UnityEngine.UIElements.StyleFloat;
      opacity: number;
      paddingBottom: number;
      paddingLeft: number;
      paddingRight: number;
      paddingTop: number;
      position: UnityEngine.UIElements.Position;
      right: number;
      textOverflow: UnityEngine.UIElements.TextOverflow;
      top: number;
      unityBackgroundImageTintColor: UnityEngine.Color;
      unityBackgroundScaleMode: UnityEngine.ScaleMode;
      unityFont: UnityEngine.Font;
      unityFontStyleAndWeight: UnityEngine.FontStyle;
      unitySliceBottom: number;
      unitySliceLeft: number;
      unitySliceRight: number;
      unitySliceTop: number;
      unityTextAlign: UnityEngine.TextAnchor;
      unityTextOverflowPosition: UnityEngine.UIElements.TextOverflowPosition;
      visibility: UnityEngine.UIElements.Visibility;
      whiteSpace: UnityEngine.UIElements.WhiteSpace;
      width: number;
    }
    export interface IStyle {
      alignContent: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>;
      alignItems: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>;
      alignSelf: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>;
      backgroundColor: UnityEngine.UIElements.StyleColor;
      backgroundImage: UnityEngine.UIElements.StyleBackground;
      borderBottomColor: UnityEngine.UIElements.StyleColor;
      borderBottomLeftRadius: UnityEngine.UIElements.StyleLength;
      borderBottomRightRadius: UnityEngine.UIElements.StyleLength;
      borderBottomWidth: UnityEngine.UIElements.StyleFloat;
      borderLeftColor: UnityEngine.UIElements.StyleColor;
      borderLeftWidth: UnityEngine.UIElements.StyleFloat;
      borderRightColor: UnityEngine.UIElements.StyleColor;
      borderRightWidth: UnityEngine.UIElements.StyleFloat;
      borderTopColor: UnityEngine.UIElements.StyleColor;
      borderTopLeftRadius: UnityEngine.UIElements.StyleLength;
      borderTopRightRadius: UnityEngine.UIElements.StyleLength;
      borderTopWidth: UnityEngine.UIElements.StyleFloat;
      bottom: UnityEngine.UIElements.StyleLength;
      color: UnityEngine.UIElements.StyleColor;
      cursor: UnityEngine.UIElements.StyleCursor;
      display: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.DisplayStyle>;
      flexBasis: UnityEngine.UIElements.StyleLength;
      flexDirection: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.FlexDirection>;
      flexGrow: UnityEngine.UIElements.StyleFloat;
      flexShrink: UnityEngine.UIElements.StyleFloat;
      flexWrap: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Wrap>;
      fontSize: UnityEngine.UIElements.StyleLength;
      height: UnityEngine.UIElements.StyleLength;
      justifyContent: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Justify>;
      left: UnityEngine.UIElements.StyleLength;
      marginBottom: UnityEngine.UIElements.StyleLength;
      marginLeft: UnityEngine.UIElements.StyleLength;
      marginRight: UnityEngine.UIElements.StyleLength;
      marginTop: UnityEngine.UIElements.StyleLength;
      maxHeight: UnityEngine.UIElements.StyleLength;
      maxWidth: UnityEngine.UIElements.StyleLength;
      minHeight: UnityEngine.UIElements.StyleLength;
      minWidth: UnityEngine.UIElements.StyleLength;
      opacity: UnityEngine.UIElements.StyleFloat;
      overflow: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Overflow>;
      paddingBottom: UnityEngine.UIElements.StyleLength;
      paddingLeft: UnityEngine.UIElements.StyleLength;
      paddingRight: UnityEngine.UIElements.StyleLength;
      paddingTop: UnityEngine.UIElements.StyleLength;
      position: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Position>;
      right: UnityEngine.UIElements.StyleLength;
      textOverflow: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.TextOverflow>;
      top: UnityEngine.UIElements.StyleLength;
      unityBackgroundImageTintColor: UnityEngine.UIElements.StyleColor;
      unityBackgroundScaleMode: UnityEngine.UIElements.StyleEnum<UnityEngine.ScaleMode>;
      unityFont: UnityEngine.UIElements.StyleFont;
      unityFontStyleAndWeight: UnityEngine.UIElements.StyleEnum<UnityEngine.FontStyle>;
      unityOverflowClipBox: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.OverflowClipBox>;
      unitySliceBottom: UnityEngine.UIElements.StyleInt;
      unitySliceLeft: UnityEngine.UIElements.StyleInt;
      unitySliceRight: UnityEngine.UIElements.StyleInt;
      unitySliceTop: UnityEngine.UIElements.StyleInt;
      unityTextAlign: UnityEngine.UIElements.StyleEnum<UnityEngine.TextAnchor>;
      unityTextOverflowPosition: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.TextOverflowPosition>;
      visibility: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Visibility>;
      whiteSpace: UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.WhiteSpace>;
      width: UnityEngine.UIElements.StyleLength;
    }
    export declare class StyleSheet {
      constructor();
      contentHash: number;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetDirty: (() => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class ThemeStyleSheet {
      constructor();
      contentHash: number;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetDirty: (() => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export interface IUxmlAttributes {
    }
    export declare class UxmlRootElementFactory {
      constructor();
      uxmlName: string;
      uxmlQualifiedName: string;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      uxmlNamespace: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlRootElementTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlStyleFactory {
      constructor();
      uxmlName: string;
      uxmlQualifiedName: string;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      uxmlNamespace: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlStyleTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlTemplateFactory {
      constructor();
      uxmlName: string;
      uxmlQualifiedName: string;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      uxmlNamespace: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlTemplateTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlAttributeOverridesFactory {
      constructor();
      uxmlName: string;
      uxmlQualifiedName: string;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      uxmlNamespace: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlAttributeOverridesTraits {
      constructor();
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlAttributeDescription {
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      defaultValueAsString: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum UxmlAttributeDescription_Use {
      None = 0,
      Optional = 1,
      Prohibited = 2,
      Required = 3,
    }
    export declare class TypedUxmlAttributeDescription<T = any> {
      defaultValue: T;
      defaultValueAsString: string;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => T);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlStringAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: string;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlFloatAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: number;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlDoubleAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: number;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlIntAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: number;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => number);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlLongAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: System.Int64;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => System.Int64);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlBoolAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: boolean;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlColorAttributeDescription {
      constructor();
      defaultValueAsString: string;
      defaultValue: UnityEngine.Color;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.Color);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlTypeAttributeDescription<TBase = any> {
      constructor();
      defaultValueAsString: string;
      defaultValue: System.Type;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => System.Type);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlEnumAttributeDescription<T = any> {
      constructor();
      defaultValueAsString: string;
      defaultValue: T;
      name: string;
      obsoleteNames: System.Collections.Generic.IEnumerable<string>;
      type: string;
      typeNamespace: string;
      use: UnityEngine.UIElements.UxmlAttributeDescription_Use;
      restriction: UnityEngine.UIElements.UxmlTypeRestriction;
      GetValueFromBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => T);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlChildElementDescription {
      constructor(t: System.Type);
      elementName: string;
      elementNamespace: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlTraits {
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      Init: ((ve: UnityEngine.UIElements.VisualElement, bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export interface IUxmlFactory {
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
    }
    export declare class UxmlFactory<TCreatedType = any, TTraits = any> {
      uxmlName: string;
      uxmlNamespace: string;
      uxmlQualifiedName: string;
      canHaveAnyAttribute: boolean;
      uxmlAttributesDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlAttributeDescription>;
      uxmlChildElementsDescription: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription>;
      substituteForTypeName: string;
      substituteForTypeNamespace: string;
      substituteForTypeQualifiedName: string;
      AcceptsAttributeBag: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => boolean);
      Create: ((bag: UnityEngine.UIElements.IUxmlAttributes, cc: UnityEngine.UIElements.CreationContext) => UnityEngine.UIElements.VisualElement);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlTypeRestriction {
      Equals: ((other: UnityEngine.UIElements.UxmlTypeRestriction) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlValueMatches {
      constructor();
      regex: string;
      Equals: ((other: UnityEngine.UIElements.UxmlTypeRestriction) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlValueBounds {
      constructor();
      min: string;
      max: string;
      excludeMin: boolean;
      excludeMax: boolean;
      Equals: ((other: UnityEngine.UIElements.UxmlTypeRestriction) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class UxmlEnumeration {
      constructor();
      values: System.Collections.Generic.IEnumerable<string>;
      Equals: ((other: UnityEngine.UIElements.UxmlTypeRestriction) => boolean) | ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VectorImage {
      constructor();
      name: string;
      hideFlags: UnityEngine.HideFlags;
      SetDirty: (() => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class VisualTreeAsset {
      constructor();
      templateDependencies: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.VisualTreeAsset>;
      stylesheets: System.Collections.Generic.IEnumerable<UnityEngine.UIElements.StyleSheet>;
      contentHash: number;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Instantiate: (() => UnityEngine.UIElements.TemplateContainer) | ((bindingPath: string) => UnityEngine.UIElements.TemplateContainer);
      CloneTree: (() => UnityEngine.UIElements.TemplateContainer) | ((bindingPath: string) => UnityEngine.UIElements.TemplateContainer) | ((target: UnityEngine.UIElements.VisualElement) => void);
      SetDirty: (() => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class CreationContext {
      target: UnityEngine.UIElements.VisualElement;
      visualTreeAsset: UnityEngine.UIElements.VisualTreeAsset;
      slotInsertionPoints: System.Collections.Generic.Dictionary<string, UnityEngine.UIElements.VisualElement>;
      static Default: UnityEngine.UIElements.CreationContext;
      Equals: ((obj: System.Object) => boolean) | ((other: UnityEngine.UIElements.CreationContext) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export namespace Experimental {
      export declare class Easing {
        static Step: ((t: number) => number);
        static Linear: ((t: number) => number);
        static InSine: ((t: number) => number);
        static OutSine: ((t: number) => number);
        static InOutSine: ((t: number) => number);
        static InQuad: ((t: number) => number);
        static OutQuad: ((t: number) => number);
        static InOutQuad: ((t: number) => number);
        static InCubic: ((t: number) => number);
        static OutCubic: ((t: number) => number);
        static InOutCubic: ((t: number) => number);
        static InPower: ((t: number, power: number) => number);
        static OutPower: ((t: number, power: number) => number);
        static InOutPower: ((t: number, power: number) => number);
        static InBounce: ((t: number) => number);
        static OutBounce: ((t: number) => number);
        static InOutBounce: ((t: number) => number);
        static InElastic: ((t: number) => number);
        static OutElastic: ((t: number) => number);
        static InOutElastic: ((t: number) => number);
        static InBack: ((t: number) => number) | ((t: number, s: number) => number);
        static OutBack: ((t: number) => number) | ((t: number, s: number) => number);
        static InOutBack: ((t: number) => number) | ((t: number, s: number) => number);
        static InCirc: ((t: number) => number);
        static OutCirc: ((t: number) => number);
        static InOutCirc: ((t: number) => number);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class StyleValues {
        top: number;
        left: number;
        width: number;
        height: number;
        right: number;
        bottom: number;
        color: UnityEngine.Color;
        backgroundColor: UnityEngine.Color;
        unityBackgroundImageTintColor: UnityEngine.Color;
        borderColor: UnityEngine.Color;
        marginLeft: number;
        marginTop: number;
        marginRight: number;
        marginBottom: number;
        paddingLeft: number;
        paddingTop: number;
        paddingRight: number;
        paddingBottom: number;
        borderLeftWidth: number;
        borderRightWidth: number;
        borderTopWidth: number;
        borderBottomWidth: number;
        borderTopLeftRadius: number;
        borderTopRightRadius: number;
        borderBottomLeftRadius: number;
        borderBottomRightRadius: number;
        opacity: number;
        flexGrow: number;
        flexShrink: number;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export interface ITransitionAnimations {
        Start: ((from: number, to: number, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<number>) | ((from: UnityEngine.Rect, to: UnityEngine.Rect, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Rect>) | ((from: UnityEngine.Color, to: UnityEngine.Color, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Color>) | ((from: UnityEngine.Vector3, to: UnityEngine.Vector3, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector3>) | ((from: UnityEngine.Vector2, to: UnityEngine.Vector2, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2>) | ((from: UnityEngine.Quaternion, to: UnityEngine.Quaternion, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Quaternion>) | ((from: UnityEngine.UIElements.Experimental.StyleValues, to: UnityEngine.UIElements.Experimental.StyleValues, durationMs: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.UIElements.Experimental.StyleValues>) | ((to: UnityEngine.UIElements.Experimental.StyleValues, durationMs: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.UIElements.Experimental.StyleValues>) | ((fromValueGetter: ((arg0: UnityEngine.UIElements.VisualElement, arg1: number) => number), to: number, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<number>) | ((fromValueGetter: ((arg0: UnityEngine.UIElements.VisualElement, arg1: UnityEngine.Rect) => UnityEngine.Rect), to: UnityEngine.Rect, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Rect>) | ((fromValueGetter: ((arg0: UnityEngine.UIElements.VisualElement, arg1: UnityEngine.Color) => UnityEngine.Color), to: UnityEngine.Color, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Color>) | ((fromValueGetter: ((arg0: UnityEngine.UIElements.VisualElement, arg1: UnityEngine.Vector3) => UnityEngine.Vector3), to: UnityEngine.Vector3, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector3>) | ((fromValueGetter: ((arg0: UnityEngine.UIElements.VisualElement, arg1: UnityEngine.Vector2) => UnityEngine.Vector2), to: UnityEngine.Vector2, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2>) | ((fromValueGetter: ((arg0: UnityEngine.UIElements.VisualElement, arg1: UnityEngine.Quaternion) => UnityEngine.Quaternion), to: UnityEngine.Quaternion, durationMs: number, onValueChanged: ((arg0: UnityEngine.UIElements.VisualElement) => void)) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Quaternion>);
        Layout: ((to: UnityEngine.Rect, durationMs: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Rect>);
        TopLeft: ((to: UnityEngine.Vector2, durationMs: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2>);
        Size: ((to: UnityEngine.Vector2, durationMs: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector2>);
        Scale: ((to: number, duration: number) => UnityEngine.UIElements.Experimental.ValueAnimation<number>);
        Position: ((to: UnityEngine.Vector3, duration: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Vector3>);
        Rotation: ((to: UnityEngine.Quaternion, duration: number) => UnityEngine.UIElements.Experimental.ValueAnimation<UnityEngine.Quaternion>);
      }
      export interface IValueAnimation {
        isRunning: boolean;
        durationMs: number;
        Start: (() => void);
        Stop: (() => void);
        Recycle: (() => void);
      }
      export declare class ValueAnimation<T = any> {
        constructor();
        durationMs: number;
        easingCurve: ((arg0: number, arg1: number) => number);
        isRunning: boolean;
        onAnimationCompleted: System.Action;
        autoRecycle: boolean;
        valueUpdated: ((arg0: UnityEngine.UIElements.VisualElement) => void);
        initialValue: ((arg0: UnityEngine.UIElements.VisualElement, arg1: T) => T);
        interpolator: ((arg0: T, arg1: T, arg2: number, arg3: T) => T);
        from: T;
        to: T;
        Start: (() => void);
        Stop: (() => void);
        Recycle: (() => void);
        static Create: ((e: UnityEngine.UIElements.VisualElement, interpolator: any) => any);
        Ease: ((easing: ((arg0: number, arg1: number) => number)) => UnityEngine.UIElements.Experimental.ValueAnimation<T>);
        OnCompleted: ((callback: System.Action) => UnityEngine.UIElements.Experimental.ValueAnimation<T>);
        KeepAlive: (() => UnityEngine.UIElements.Experimental.ValueAnimation<T>);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
  }
  export namespace Video {
    export declare class VideoClip {
      originalPath: string;
      frameCount: System.UInt64;
      frameRate: number;
      length: number;
      width: System.UInt32;
      height: System.UInt32;
      pixelAspectRatioNumerator: System.UInt32;
      pixelAspectRatioDenominator: System.UInt32;
      sRGB: boolean;
      audioTrackCount: System.UInt16;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      GetAudioChannelCount: ((audioTrackIdx: System.UInt16) => System.UInt16);
      GetAudioSampleRate: ((audioTrackIdx: System.UInt16) => System.UInt32);
      GetAudioLanguage: ((audioTrackIdx: System.UInt16) => string);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export enum VideoRenderMode {
      CameraFarPlane = 0,
      CameraNearPlane = 1,
      RenderTexture = 2,
      MaterialOverride = 3,
      APIOnly = 4,
    }
    export enum Video3DLayout {
      No3D = 0,
      SideBySide3D = 1,
      OverUnder3D = 2,
    }
    export enum VideoAspectRatio {
      NoScaling = 0,
      FitVertically = 1,
      FitHorizontally = 2,
      FitInside = 3,
      FitOutside = 4,
      Stretch = 5,
    }
    export enum VideoTimeSource {
      AudioDSPTimeSource = 0,
      GameTimeSource = 1,
    }
    export enum VideoTimeReference {
      Freerun = 0,
      InternalTime = 1,
      ExternalTime = 2,
    }
    export enum VideoSource {
      VideoClip = 0,
      Url = 1,
    }
    export enum VideoAudioOutputMode {
      None = 0,
      AudioSource = 1,
      Direct = 2,
      APIOnly = 3,
    }
    export declare class VideoPlayer {
      constructor();
      source: UnityEngine.Video.VideoSource;
      url: string;
      clip: UnityEngine.Video.VideoClip;
      renderMode: UnityEngine.Video.VideoRenderMode;
      targetCamera: UnityEngine.Camera;
      targetTexture: UnityEngine.RenderTexture;
      targetMaterialRenderer: UnityEngine.Renderer;
      targetMaterialProperty: string;
      aspectRatio: UnityEngine.Video.VideoAspectRatio;
      targetCameraAlpha: number;
      targetCamera3DLayout: UnityEngine.Video.Video3DLayout;
      texture: UnityEngine.Texture;
      isPrepared: boolean;
      waitForFirstFrame: boolean;
      playOnAwake: boolean;
      isPlaying: boolean;
      isPaused: boolean;
      canSetTime: boolean;
      time: number;
      frame: System.Int64;
      clockTime: number;
      canStep: boolean;
      canSetPlaybackSpeed: boolean;
      playbackSpeed: number;
      isLooping: boolean;
      canSetTimeSource: boolean;
      timeSource: UnityEngine.Video.VideoTimeSource;
      timeReference: UnityEngine.Video.VideoTimeReference;
      externalReferenceTime: number;
      canSetSkipOnDrop: boolean;
      skipOnDrop: boolean;
      frameCount: System.UInt64;
      frameRate: number;
      length: number;
      width: System.UInt32;
      height: System.UInt32;
      pixelAspectRatioNumerator: System.UInt32;
      pixelAspectRatioDenominator: System.UInt32;
      audioTrackCount: System.UInt16;
      static controlledAudioTrackMaxCount: System.UInt16;
      controlledAudioTrackCount: System.UInt16;
      audioOutputMode: UnityEngine.Video.VideoAudioOutputMode;
      canSetDirectAudioVolume: boolean;
      sendFrameReadyEvents: boolean;
      enabled: boolean;
      isActiveAndEnabled: boolean;
      transform: UnityEngine.Transform;
      gameObject: UnityEngine.GameObject;
      tag: string;
      rigidbody: UnityEngine.Component;
      rigidbody2D: UnityEngine.Component;
      camera: UnityEngine.Component;
      light: UnityEngine.Component;
      animation: UnityEngine.Component;
      constantForce: UnityEngine.Component;
      renderer: UnityEngine.Component;
      audio: UnityEngine.Component;
      networkView: UnityEngine.Component;
      collider: UnityEngine.Component;
      collider2D: UnityEngine.Component;
      hingeJoint: UnityEngine.Component;
      particleSystem: UnityEngine.Component;
      name: string;
      hideFlags: UnityEngine.HideFlags;
      Prepare: (() => void);
      Play: (() => void);
      Pause: (() => void);
      Stop: (() => void);
      StepForward: (() => void);
      GetAudioLanguageCode: ((trackIndex: System.UInt16) => string);
      GetAudioChannelCount: ((trackIndex: System.UInt16) => System.UInt16);
      GetAudioSampleRate: ((trackIndex: System.UInt16) => System.UInt32);
      EnableAudioTrack: ((trackIndex: System.UInt16, enabled: boolean) => void);
      IsAudioTrackEnabled: ((trackIndex: System.UInt16) => boolean);
      GetDirectAudioVolume: ((trackIndex: System.UInt16) => number);
      SetDirectAudioVolume: ((trackIndex: System.UInt16, volume: number) => void);
      GetDirectAudioMute: ((trackIndex: System.UInt16) => boolean);
      SetDirectAudioMute: ((trackIndex: System.UInt16, mute: boolean) => void);
      GetTargetAudioSource: ((trackIndex: System.UInt16) => UnityEngine.AudioSource);
      SetTargetAudioSource: ((trackIndex: System.UInt16, source: UnityEngine.AudioSource) => void);
      GetComponent: ((type: System.Type) => UnityEngine.Component) | ((type: string) => UnityEngine.Component);
      GetComponentInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component) | ((t: System.Type) => UnityEngine.Component);
      GetComponentsInChildren: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponentInParent: ((t: System.Type) => UnityEngine.Component);
      GetComponentsInParent: ((t: System.Type, includeInactive: boolean) => UnityEngine.Component[]) | ((t: System.Type) => UnityEngine.Component[]);
      GetComponents: ((type: System.Type) => UnityEngine.Component[]) | ((type: System.Type, results: UnityEngine.Component[]) => void);
      CompareTag: ((tag: string) => boolean);
      SendMessageUpwards: ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      SendMessage: ((methodName: string, value: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, value: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      BroadcastMessage: ((methodName: string, parameter: System.Object, options: UnityEngine.SendMessageOptions) => void) | ((methodName: string, parameter: System.Object) => void) | ((methodName: string) => void) | ((methodName: string, options: UnityEngine.SendMessageOptions) => void);
      GetInstanceID: (() => number);
      GetHashCode: (() => number);
      Equals: ((other: System.Object) => boolean);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class VideoPlayer_EventHandler {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((source: UnityEngine.Video.VideoPlayer) => void);
      BeginInvoke: ((source: UnityEngine.Video.VideoPlayer, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VideoPlayer_ErrorEventHandler {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((source: UnityEngine.Video.VideoPlayer, message: string) => void);
      BeginInvoke: ((source: UnityEngine.Video.VideoPlayer, message: string, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VideoPlayer_FrameReadyEventHandler {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((source: UnityEngine.Video.VideoPlayer, frameIdx: System.Int64) => void);
      BeginInvoke: ((source: UnityEngine.Video.VideoPlayer, frameIdx: System.Int64, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class VideoPlayer_TimeEventHandler {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((source: UnityEngine.Video.VideoPlayer, seconds: number) => void);
      BeginInvoke: ((source: UnityEngine.Video.VideoPlayer, seconds: number, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
  export namespace Windows {
    export declare class LicenseInformation {
      static isOnAppTrial: boolean;
      static PurchaseApp: (() => string);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class CrashReporting {
      static crashReportFolder: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Crypto {
      static ComputeMD5Hash: ((buffer: System.Byte[]) => System.Byte[]);
      static ComputeSHA1Hash: ((buffer: System.Byte[]) => System.Byte[]);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Directory {
      static temporaryFolder: string;
      static localFolder: string;
      static roamingFolder: string;
      static CreateDirectory: ((path: string) => void);
      static Exists: ((path: string) => boolean);
      static Delete: ((path: string) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class File {
      static ReadAllBytes: ((path: string) => System.Byte[]);
      static WriteAllBytes: ((path: string, bytes: System.Byte[]) => void);
      static Exists: ((path: string) => boolean);
      static Delete: ((path: string) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export namespace Speech {
      export declare class PhraseRecognitionSystem {
        static isSupported: boolean;
        static Status: UnityEngine.Windows.Speech.SpeechSystemStatus;
        static Restart: (() => void);
        static Shutdown: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhraseRecognitionSystem_ErrorDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((errorCode: UnityEngine.Windows.Speech.SpeechError) => void);
        BeginInvoke: ((errorCode: UnityEngine.Windows.Speech.SpeechError, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhraseRecognitionSystem_StatusDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((status: UnityEngine.Windows.Speech.SpeechSystemStatus) => void);
        BeginInvoke: ((status: UnityEngine.Windows.Speech.SpeechSystemStatus, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhraseRecognizer {
        IsRunning: boolean;
        Start: (() => void);
        Stop: (() => void);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhraseRecognizer_PhraseRecognizedDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((args: UnityEngine.Windows.Speech.PhraseRecognizedEventArgs) => void);
        BeginInvoke: ((args: UnityEngine.Windows.Speech.PhraseRecognizedEventArgs, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class DictationRecognizer {
        constructor();
        constructor(confidenceLevel: UnityEngine.Windows.Speech.ConfidenceLevel);
        constructor(topic: UnityEngine.Windows.Speech.DictationTopicConstraint);
        constructor(minimumConfidence: UnityEngine.Windows.Speech.ConfidenceLevel, topic: UnityEngine.Windows.Speech.DictationTopicConstraint);
        Status: UnityEngine.Windows.Speech.SpeechSystemStatus;
        AutoSilenceTimeoutSeconds: number;
        InitialSilenceTimeoutSeconds: number;
        Start: (() => void);
        Stop: (() => void);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class DictationRecognizer_DictationHypothesisDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((text: string) => void);
        BeginInvoke: ((text: string, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class DictationRecognizer_DictationResultDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((text: string, confidence: UnityEngine.Windows.Speech.ConfidenceLevel) => void);
        BeginInvoke: ((text: string, confidence: UnityEngine.Windows.Speech.ConfidenceLevel, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class DictationRecognizer_DictationCompletedDelegate {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((cause: UnityEngine.Windows.Speech.DictationCompletionCause) => void);
        BeginInvoke: ((cause: UnityEngine.Windows.Speech.DictationCompletionCause, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class DictationRecognizer_DictationErrorHandler {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((error: string, hresult: number) => void);
        BeginInvoke: ((error: string, hresult: number, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum ConfidenceLevel {
        High = 0,
        Medium = 1,
        Low = 2,
        Rejected = 3,
      }
      export enum SpeechSystemStatus {
        Stopped = 0,
        Running = 1,
        Failed = 2,
      }
      export enum SpeechError {
        NoError = 0,
        TopicLanguageNotSupported = 1,
        GrammarLanguageMismatch = 2,
        GrammarCompilationFailure = 3,
        AudioQualityFailure = 4,
        PauseLimitExceeded = 5,
        TimeoutExceeded = 6,
        NetworkFailure = 7,
        MicrophoneUnavailable = 8,
        UnknownError = 9,
      }
      export enum DictationTopicConstraint {
        WebSearch = 0,
        Form = 1,
        Dictation = 2,
      }
      export enum DictationCompletionCause {
        Complete = 0,
        AudioQualityFailure = 1,
        Canceled = 2,
        TimeoutExceeded = 3,
        PauseLimitExceeded = 4,
        NetworkFailure = 5,
        MicrophoneUnavailable = 6,
        UnknownError = 7,
      }
      export declare class SemanticMeaning {
        key: string;
        values: string[];
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class PhraseRecognizedEventArgs {
        confidence: UnityEngine.Windows.Speech.ConfidenceLevel;
        semanticMeanings: UnityEngine.Windows.Speech.SemanticMeaning[];
        text: string;
        phraseStartTime: System.DateTime;
        phraseDuration: System.TimeSpan;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class KeywordRecognizer {
        constructor(keywords: string[]);
        constructor(keywords: string[], minimumConfidence: UnityEngine.Windows.Speech.ConfidenceLevel);
        Keywords: System.Collections.Generic.IEnumerable<string>;
        IsRunning: boolean;
        Start: (() => void);
        Stop: (() => void);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class GrammarRecognizer {
        constructor(grammarFilePath: string);
        constructor(grammarFilePath: string, minimumConfidence: UnityEngine.Windows.Speech.ConfidenceLevel);
        GrammarFilePath: string;
        IsRunning: boolean;
        Start: (() => void);
        Stop: (() => void);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
    }
    export namespace WebCam {
      export enum PhotoCaptureFileOutputFormat {
        PNG = 0,
        JPG = 1,
      }
      export declare class PhotoCapture {
        static SupportedResolutions: any; // System.Collections.Generic.IEnumerable`1[UnityEngine.Resolution]
        static CreateAsync: ((showHolograms: boolean, onCreatedCallback: UnityEngine.Windows.WebCam.PhotoCapture_OnCaptureResourceCreatedCallback) => void) | ((onCreatedCallback: UnityEngine.Windows.WebCam.PhotoCapture_OnCaptureResourceCreatedCallback) => void);
        StartPhotoModeAsync: ((setupParams: UnityEngine.Windows.WebCam.CameraParameters, onPhotoModeStartedCallback: UnityEngine.Windows.WebCam.PhotoCapture_OnPhotoModeStartedCallback) => void);
        StopPhotoModeAsync: ((onPhotoModeStoppedCallback: UnityEngine.Windows.WebCam.PhotoCapture_OnPhotoModeStoppedCallback) => void);
        TakePhotoAsync: ((filename: string, fileOutputFormat: UnityEngine.Windows.WebCam.PhotoCaptureFileOutputFormat, onCapturedPhotoToDiskCallback: UnityEngine.Windows.WebCam.PhotoCapture_OnCapturedToDiskCallback) => void) | ((onCapturedPhotoToMemoryCallback: UnityEngine.Windows.WebCam.PhotoCapture_OnCapturedToMemoryCallback) => void);
        GetUnsafePointerToVideoDeviceController: (() => System.IntPtr);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum PhotoCapture_CaptureResultType {
        Success = 0,
        UnknownError = 1,
      }
      export declare class PhotoCapture_PhotoCaptureResult {
        success: boolean;
        resultType: UnityEngine.Windows.WebCam.PhotoCapture_CaptureResultType;
        hResult: System.Int64;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class PhotoCapture_OnCaptureResourceCreatedCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((captureObject: UnityEngine.Windows.WebCam.PhotoCapture) => void);
        BeginInvoke: ((captureObject: UnityEngine.Windows.WebCam.PhotoCapture, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhotoCapture_OnPhotoModeStartedCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhotoCapture_OnPhotoModeStoppedCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhotoCapture_OnCapturedToDiskCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhotoCapture_OnCapturedToMemoryCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult, photoCaptureFrame: UnityEngine.Windows.WebCam.PhotoCaptureFrame) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.PhotoCapture_PhotoCaptureResult, photoCaptureFrame: UnityEngine.Windows.WebCam.PhotoCaptureFrame, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class PhotoCaptureFrame {
        dataLength: number;
        hasLocationData: boolean;
        pixelFormat: UnityEngine.Windows.WebCam.CapturePixelFormat;
        UploadImageDataToTexture: ((targetTexture: UnityEngine.Texture2D) => void);
        GetUnsafePointerToBuffer: (() => System.IntPtr);
        CopyRawImageDataIntoBuffer: ((byteBuffer: System.Byte[]) => void);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class VideoCapture {
        static SupportedResolutions: any; // System.Collections.Generic.IEnumerable`1[UnityEngine.Resolution]
        IsRecording: boolean;
        static GetSupportedFrameRatesForResolution: ((resolution: UnityEngine.Resolution) => any);
        static CreateAsync: ((showHolograms: boolean, onCreatedCallback: UnityEngine.Windows.WebCam.VideoCapture_OnVideoCaptureResourceCreatedCallback) => void) | ((onCreatedCallback: UnityEngine.Windows.WebCam.VideoCapture_OnVideoCaptureResourceCreatedCallback) => void);
        StartVideoModeAsync: ((setupParams: UnityEngine.Windows.WebCam.CameraParameters, audioState: UnityEngine.Windows.WebCam.VideoCapture_AudioState, onVideoModeStartedCallback: UnityEngine.Windows.WebCam.VideoCapture_OnVideoModeStartedCallback) => void);
        StopVideoModeAsync: ((onVideoModeStoppedCallback: UnityEngine.Windows.WebCam.VideoCapture_OnVideoModeStoppedCallback) => void);
        StartRecordingAsync: ((filename: string, onStartedRecordingVideoCallback: UnityEngine.Windows.WebCam.VideoCapture_OnStartedRecordingVideoCallback) => void);
        StopRecordingAsync: ((onStoppedRecordingVideoCallback: UnityEngine.Windows.WebCam.VideoCapture_OnStoppedRecordingVideoCallback) => void);
        GetUnsafePointerToVideoDeviceController: (() => System.IntPtr);
        Dispose: (() => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum VideoCapture_CaptureResultType {
        Success = 0,
        UnknownError = 1,
      }
      export enum VideoCapture_AudioState {
        MicAudio = 0,
        ApplicationAudio = 1,
        ApplicationAndMicAudio = 2,
        None = 3,
      }
      export declare class VideoCapture_VideoCaptureResult {
        success: boolean;
        resultType: UnityEngine.Windows.WebCam.VideoCapture_CaptureResultType;
        hResult: System.Int64;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
      export declare class VideoCapture_OnVideoCaptureResourceCreatedCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((captureObject: UnityEngine.Windows.WebCam.VideoCapture) => void);
        BeginInvoke: ((captureObject: UnityEngine.Windows.WebCam.VideoCapture, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class VideoCapture_OnVideoModeStartedCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class VideoCapture_OnVideoModeStoppedCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class VideoCapture_OnStartedRecordingVideoCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class VideoCapture_OnStoppedRecordingVideoCallback {
        constructor(object: System.Object, method: System.IntPtr);
        Method: System.Reflection.MethodInfo;
        Target: System.Object;
        Invoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult) => void);
        BeginInvoke: ((result: UnityEngine.Windows.WebCam.VideoCapture_VideoCaptureResult, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
        EndInvoke: ((result: System.IAsyncResult) => void);
        GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetInvocationList: (() => System.Delegate[]);
        DynamicInvoke: ((...args: System.Object[]) => System.Object);
        Clone: (() => System.Object);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export enum CapturePixelFormat {
        BGRA32 = 0,
        NV12 = 1,
        JPEG = 2,
        PNG = 3,
      }
      export enum WebCamMode {
        None = 0,
        PhotoMode = 1,
        VideoMode = 2,
      }
      export declare class WebCam {
        constructor();
        static Mode: UnityEngine.Windows.WebCam.WebCamMode;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        GetType: (() => System.Type);
        ToString: (() => string);
      }
      export declare class CameraParameters {
        constructor(webCamMode: UnityEngine.Windows.WebCam.WebCamMode);
        hologramOpacity: number;
        frameRate: number;
        cameraResolutionWidth: number;
        cameraResolutionHeight: number;
        pixelFormat: UnityEngine.Windows.WebCam.CapturePixelFormat;
        Equals: ((obj: System.Object) => boolean);
        GetHashCode: (() => number);
        ToString: (() => string);
        GetType: (() => System.Type);
      }
    }
  }
  export namespace WSA {
    export declare class AppCallbackItem {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: (() => void);
      BeginInvoke: ((callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class WindowSizeChanged {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((width: number, height: number) => void);
      BeginInvoke: ((width: number, height: number, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum WindowActivationState {
      CodeActivated = 0,
      Deactivated = 1,
      PointerActivated = 2,
    }
    export declare class WindowActivated {
      constructor(object: System.Object, method: System.IntPtr);
      Method: System.Reflection.MethodInfo;
      Target: System.Object;
      Invoke: ((state: UnityEngine.WSA.WindowActivationState) => void);
      BeginInvoke: ((state: UnityEngine.WSA.WindowActivationState, callback: System.AsyncCallback, object: System.Object) => System.IAsyncResult);
      EndInvoke: ((result: System.IAsyncResult) => void);
      GetObjectData: ((info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetInvocationList: (() => System.Delegate[]);
      DynamicInvoke: ((...args: System.Object[]) => System.Object);
      Clone: (() => System.Object);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Application {
      constructor();
      static arguments: string;
      static advertisingIdentifier: string;
      static InvokeOnAppThread: ((item: UnityEngine.WSA.AppCallbackItem, waitUntilDone: boolean) => void);
      static InvokeOnUIThread: ((item: UnityEngine.WSA.AppCallbackItem, waitUntilDone: boolean) => void);
      static RunningOnAppThread: (() => boolean);
      static RunningOnUIThread: (() => boolean);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Cursor {
      static SetCustomCursor: ((id: System.UInt32) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum Folder {
      Installation = 0,
      Temporary = 1,
      Local = 2,
      Roaming = 3,
      CameraRoll = 4,
      DocumentsLibrary = 5,
      HomeGroup = 6,
      MediaServerDevices = 7,
      MusicLibrary = 8,
      PicturesLibrary = 9,
      Playlists = 10,
      RemovableDevices = 11,
      SavedPictures = 12,
      VideosLibrary = 13,
    }
    export declare class Launcher {
      constructor();
      static LaunchFile: ((folder: UnityEngine.WSA.Folder, relativeFilePath: string, showWarning: boolean) => void);
      static LaunchFileWithPicker: ((fileExtension: string) => void);
      static LaunchUri: ((uri: string, showWarning: boolean) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export enum TileTemplate {
      TileSquare150x150Image = 0,
      TileSquare150x150Block = 1,
      TileSquare150x150Text01 = 2,
      TileSquare150x150Text02 = 3,
      TileSquare150x150Text03 = 4,
      TileSquare150x150Text04 = 5,
      TileSquare150x150PeekImageAndText01 = 6,
      TileSquare150x150PeekImageAndText02 = 7,
      TileSquare150x150PeekImageAndText03 = 8,
      TileSquare150x150PeekImageAndText04 = 9,
      TileWide310x150Image = 10,
      TileWide310x150ImageCollection = 11,
      TileWide310x150ImageAndText01 = 12,
      TileWide310x150ImageAndText02 = 13,
      TileWide310x150BlockAndText01 = 14,
      TileWide310x150BlockAndText02 = 15,
      TileWide310x150PeekImageCollection01 = 16,
      TileWide310x150PeekImageCollection02 = 17,
      TileWide310x150PeekImageCollection03 = 18,
      TileWide310x150PeekImageCollection04 = 19,
      TileWide310x150PeekImageCollection05 = 20,
      TileWide310x150PeekImageCollection06 = 21,
      TileWide310x150PeekImageAndText01 = 22,
      TileWide310x150PeekImageAndText02 = 23,
      TileWide310x150PeekImage01 = 24,
      TileWide310x150PeekImage02 = 25,
      TileWide310x150PeekImage03 = 26,
      TileWide310x150PeekImage04 = 27,
      TileWide310x150PeekImage05 = 28,
      TileWide310x150PeekImage06 = 29,
      TileWide310x150SmallImageAndText01 = 30,
      TileWide310x150SmallImageAndText02 = 31,
      TileWide310x150SmallImageAndText03 = 32,
      TileWide310x150SmallImageAndText04 = 33,
      TileWide310x150SmallImageAndText05 = 34,
      TileWide310x150Text01 = 35,
      TileWide310x150Text02 = 36,
      TileWide310x150Text03 = 37,
      TileWide310x150Text04 = 38,
      TileWide310x150Text05 = 39,
      TileWide310x150Text06 = 40,
      TileWide310x150Text07 = 41,
      TileWide310x150Text08 = 42,
      TileWide310x150Text09 = 43,
      TileWide310x150Text10 = 44,
      TileWide310x150Text11 = 45,
      TileSquare310x310BlockAndText01 = 46,
      TileSquare310x310BlockAndText02 = 47,
      TileSquare310x310Image = 48,
      TileSquare310x310ImageAndText01 = 49,
      TileSquare310x310ImageAndText02 = 50,
      TileSquare310x310ImageAndTextOverlay01 = 51,
      TileSquare310x310ImageAndTextOverlay02 = 52,
      TileSquare310x310ImageAndTextOverlay03 = 53,
      TileSquare310x310ImageCollectionAndText01 = 54,
      TileSquare310x310ImageCollectionAndText02 = 55,
      TileSquare310x310ImageCollection = 56,
      TileSquare310x310SmallImagesAndTextList01 = 57,
      TileSquare310x310SmallImagesAndTextList02 = 58,
      TileSquare310x310SmallImagesAndTextList03 = 59,
      TileSquare310x310SmallImagesAndTextList04 = 60,
      TileSquare310x310Text01 = 61,
      TileSquare310x310Text02 = 62,
      TileSquare310x310Text03 = 63,
      TileSquare310x310Text04 = 64,
      TileSquare310x310Text05 = 65,
      TileSquare310x310Text06 = 66,
      TileSquare310x310Text07 = 67,
      TileSquare310x310Text08 = 68,
      TileSquare310x310TextList01 = 69,
      TileSquare310x310TextList02 = 70,
      TileSquare310x310TextList03 = 71,
      TileSquare310x310SmallImageAndText01 = 72,
      TileSquare310x310SmallImagesAndTextList05 = 73,
      TileSquare310x310Text09 = 74,
      TileSquare71x71IconWithBadge = 75,
      TileSquare150x150IconWithBadge = 76,
      TileWide310x150IconWithBadgeAndText = 77,
      TileSquare71x71Image = 78,
      TileTall150x310Image = 79,
      TileSquare99x99IconWithBadge = 1000,
      TileSquare210x210IconWithBadge = 1001,
      TileWide432x210IconWithBadgeAndText = 1002,
    }
    export enum ToastTemplate {
      ToastImageAndText01 = 0,
      ToastImageAndText02 = 1,
      ToastImageAndText03 = 2,
      ToastImageAndText04 = 3,
      ToastText01 = 4,
      ToastText02 = 5,
      ToastText03 = 6,
      ToastText04 = 7,
    }
    export enum TileForegroundText {
      Default = -1,
      Dark = 0,
      Light = 1,
    }
    export declare class SecondaryTileData {
      constructor(id: string, displayName: string);
      backgroundColor: UnityEngine.Color32;
      arguments: string;
      backgroundColorSet: boolean;
      displayName: string;
      foregroundText: UnityEngine.WSA.TileForegroundText;
      lockScreenBadgeLogo: string;
      lockScreenDisplayBadgeAndTileText: boolean;
      phoneticName: string;
      roamingEnabled: boolean;
      showNameOnSquare150x150Logo: boolean;
      showNameOnSquare310x310Logo: boolean;
      showNameOnWide310x150Logo: boolean;
      square150x150Logo: string;
      square30x30Logo: string;
      square310x310Logo: string;
      square70x70Logo: string;
      tileId: string;
      wide310x150Logo: string;
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      ToString: (() => string);
      GetType: (() => System.Type);
    }
    export declare class Tile {
      static main: UnityEngine.WSA.Tile;
      id: string;
      hasUserConsent: boolean;
      exists: boolean;
      static GetTemplate: ((templ: UnityEngine.WSA.TileTemplate) => string);
      Update: ((xml: string) => void) | ((medium: string, wide: string, large: string, text: string) => void);
      PeriodicUpdate: ((uri: string, interval: number) => void);
      StopPeriodicUpdate: (() => void);
      UpdateBadgeImage: ((image: string) => void);
      UpdateBadgeNumber: ((number: number) => void);
      RemoveBadge: (() => void);
      PeriodicBadgeUpdate: ((uri: string, interval: number) => void);
      StopPeriodicBadgeUpdate: (() => void);
      static Exists: ((tileId: string) => boolean);
      static CreateOrUpdateSecondary: ((data: UnityEngine.WSA.SecondaryTileData) => UnityEngine.WSA.Tile) | ((data: UnityEngine.WSA.SecondaryTileData, pos: UnityEngine.Vector2) => UnityEngine.WSA.Tile) | ((data: UnityEngine.WSA.SecondaryTileData, area: UnityEngine.Rect) => UnityEngine.WSA.Tile);
      static GetSecondary: ((tileId: string) => UnityEngine.WSA.Tile);
      static GetSecondaries: (() => UnityEngine.WSA.Tile[]);
      Delete: (() => void) | ((pos: UnityEngine.Vector2) => void) | ((area: UnityEngine.Rect) => void);
      static DeleteSecondary: ((tileId: string) => void) | ((tileId: string, pos: UnityEngine.Vector2) => void) | ((tileId: string, area: UnityEngine.Rect) => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
    export declare class Toast {
      arguments: string;
      activated: boolean;
      dismissed: boolean;
      dismissedByUser: boolean;
      static GetTemplate: ((templ: UnityEngine.WSA.ToastTemplate) => string);
      static Create: ((xml: string) => UnityEngine.WSA.Toast) | ((image: string, text: string) => UnityEngine.WSA.Toast);
      Show: (() => void);
      Hide: (() => void);
      Equals: ((obj: System.Object) => boolean);
      GetHashCode: (() => number);
      GetType: (() => System.Type);
      ToString: (() => string);
    }
  }
}
